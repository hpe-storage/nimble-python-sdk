{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"HPE Nimble Storage SDK for Python \u00b6 This is a Python Software Development Kit (SDK) for HPE Nimble Storage arrays. The HPE Nimble Storage array has a Representational State Transfer (REST) web service application programming interface (API). The SDK implements a simple client library for communicating with the HPE Nimble Storage REST API. The Python Requests library is being used to communicate with the API over HTTPS. The SDK provides a pythonic client library to interact with the HPE Nimble Storage REST API. The code abstracts the lower-level API calls into Python objects that you can easily incorporate into any automation or DevOps workflows. Use it to create, modify and delete most resources like volumes, volume collections, initiator groups and more, as well as perform other tasks like snapshotting, cloning, restoring data, etc. Synopsis \u00b6 See install , using and example workflows for more elaborate examples. $ pip install nimble-sdk $ python Python 3.7.7 (default, Mar 10 2020, 15:43:03) [Clang 11.0.0 (clang-1100.0.33.17)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from nimbleclient import NimOSClient >>> api = NimOSClient(\"192.168.1.100\", \"admin\", \"admin\") >>> api. api.access_control_records api.fibre_channel_sessions api.replication_partners api.active_directory_memberships api.folders api.shelves api.alarms api.groups api.snapshot_collections api.application_categories api.initiator_groups api.snapshots api.application_servers api.initiators api.software_versions api.arrays api.jobs api.space_domains api.audit_log api.key_managers api.subnets api.chap_users api.master_key api.tokens api.controllers api.network_configs api.user_groups api.disks api.network_interfaces api.user_policies api.events api.performance_policies api.users api.fibre_channel_configs api.pools api.versions api.fibre_channel_initiator_aliases api.protection_schedules api.volume_collections api.fibre_channel_interfaces api.protection_templates api.volumes api.fibre_channel_ports api.protocol_endpoints api.witnesses Requirements \u00b6 The HPE Nimble Storage SDK for Python supports NimbleOS 5.0 or later and requires a recent version of Requests along with Python 3.6 or newer.","title":"HPE Nimble Storage SDK for Python"},{"location":"index.html#hpe_nimble_storage_sdk_for_python","text":"This is a Python Software Development Kit (SDK) for HPE Nimble Storage arrays. The HPE Nimble Storage array has a Representational State Transfer (REST) web service application programming interface (API). The SDK implements a simple client library for communicating with the HPE Nimble Storage REST API. The Python Requests library is being used to communicate with the API over HTTPS. The SDK provides a pythonic client library to interact with the HPE Nimble Storage REST API. The code abstracts the lower-level API calls into Python objects that you can easily incorporate into any automation or DevOps workflows. Use it to create, modify and delete most resources like volumes, volume collections, initiator groups and more, as well as perform other tasks like snapshotting, cloning, restoring data, etc.","title":"HPE Nimble Storage SDK for Python"},{"location":"index.html#synopsis","text":"See install , using and example workflows for more elaborate examples. $ pip install nimble-sdk $ python Python 3.7.7 (default, Mar 10 2020, 15:43:03) [Clang 11.0.0 (clang-1100.0.33.17)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from nimbleclient import NimOSClient >>> api = NimOSClient(\"192.168.1.100\", \"admin\", \"admin\") >>> api. api.access_control_records api.fibre_channel_sessions api.replication_partners api.active_directory_memberships api.folders api.shelves api.alarms api.groups api.snapshot_collections api.application_categories api.initiator_groups api.snapshots api.application_servers api.initiators api.software_versions api.arrays api.jobs api.space_domains api.audit_log api.key_managers api.subnets api.chap_users api.master_key api.tokens api.controllers api.network_configs api.user_groups api.disks api.network_interfaces api.user_policies api.events api.performance_policies api.users api.fibre_channel_configs api.pools api.versions api.fibre_channel_initiator_aliases api.protection_schedules api.volume_collections api.fibre_channel_interfaces api.protection_templates api.volumes api.fibre_channel_ports api.protocol_endpoints api.witnesses","title":"Synopsis"},{"location":"index.html#requirements","text":"The HPE Nimble Storage SDK for Python supports NimbleOS 5.0 or later and requires a recent version of Requests along with Python 3.6 or newer.","title":"Requirements"},{"location":"api/access_control_records.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.access_control_records AccessControlRecord nimbleclient.v1.api.access_control_records \u00b6 AccessControlRecord \u00b6 class AccessControlRecord(Resource) Manage access control records for volumes. Parameters id : Identifier for the access control record. apply_to : Type of object this access control record applies to. chap_user_id : Identifier for the CHAP user. chap_user_name : Name of the CHAP user. initiator_group_id : Identifier for the initiator group. initiator_group_name : Name of the initiator group. lun : If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null. vol_id : Identifier for the volume this access control record applies to. vol_name : Name of the volume this access control record applies to. vol_agent_type : External management agent type. pe_id : Identifier for the protocol endpoint this access control record applies to. pe_name : Name of the protocol endpoint this access control record applies to. pe_lun : LUN (Logical Unit Number) to associate with this protocol endpoint. Valid LUNs are in the 0-2047 range. snap_id : Identifier for the snapshot this access control record applies to. snap_name : Name of the snapshot this access control record applies to. pe_ids : List of candidate protocol endpoints that may be used to access the Virtual Volume. One of them will be selected for the access control record. This field is required only when creating an access control record for a Virtual Volume. snapluns : Information about the snapshot LUNs associated with this access control record. This field is meaningful when the online snapshot can be accessed as a LUN in the group. creation_time : Time when this access control record was created. last_modified : Time when this access control record was last modified. access_protocol : Access protocol of the volume.","title":"access_control_records"},{"location":"api/access_control_records.html#table_of_contents","text":"nimbleclient.v1.api.access_control_records AccessControlRecord","title":"Table of Contents"},{"location":"api/access_control_records.html#nimbleclientv1apiaccess_control_records","text":"","title":"nimbleclient.v1.api.access_control_records"},{"location":"api/access_control_records.html#accesscontrolrecord","text":"class AccessControlRecord(Resource) Manage access control records for volumes. Parameters id : Identifier for the access control record. apply_to : Type of object this access control record applies to. chap_user_id : Identifier for the CHAP user. chap_user_name : Name of the CHAP user. initiator_group_id : Identifier for the initiator group. initiator_group_name : Name of the initiator group. lun : If this access control record applies to a regular volume, this attribute is the volume's LUN (Logical Unit Number). If the access protocol is iSCSI, the LUN will be 0. However, if the access protocol is Fibre Channel, the LUN will be in the range from 0 to 2047. If this record applies to a Virtual Volume, this attribute is the volume's secondary LUN in the range from 0 to 399999, for both iSCSI and Fibre Channel. If the record applies to a OpenstackV2 volume, the LUN will be in the range from 0 to 2047, for both iSCSI and Fibre Channel. If this record applies to a protocol endpoint or only a snapshot, this attribute is not meaningful and is set to null. vol_id : Identifier for the volume this access control record applies to. vol_name : Name of the volume this access control record applies to. vol_agent_type : External management agent type. pe_id : Identifier for the protocol endpoint this access control record applies to. pe_name : Name of the protocol endpoint this access control record applies to. pe_lun : LUN (Logical Unit Number) to associate with this protocol endpoint. Valid LUNs are in the 0-2047 range. snap_id : Identifier for the snapshot this access control record applies to. snap_name : Name of the snapshot this access control record applies to. pe_ids : List of candidate protocol endpoints that may be used to access the Virtual Volume. One of them will be selected for the access control record. This field is required only when creating an access control record for a Virtual Volume. snapluns : Information about the snapshot LUNs associated with this access control record. This field is meaningful when the online snapshot can be accessed as a LUN in the group. creation_time : Time when this access control record was created. last_modified : Time when this access control record was last modified. access_protocol : Access protocol of the volume.","title":"AccessControlRecord"},{"location":"api/active_directory_memberships.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.active_directory_memberships ActiveDirectoryMembership remove report_status test_user test_group ActiveDirectoryMembershipList remove report_status test_user test_group nimbleclient.v1.api.active_directory_memberships \u00b6 ActiveDirectoryMembership \u00b6 class ActiveDirectoryMembership(Resource) Manages the storage array's membership with the Active Directory. Parameters id : Identifier for the Active Directory Domain. description : Description for the Active Directory Domain. name : Identifier for the Active Directory domain. netbios : Netbios name for the Active Directory domain. server_list : List of IP addresses or names for the backup domain controller. computer_name : The name of the computer account in the domain controller. organizational_unit : The location for the computer account. user : Name of the Activer Directory user with Administrator's privilege. password : Password for the Active Directory user. enabled : Active Directory authentication is currently enabled. remove \u00b6 | remove(password, user, **kwargs) Leaves the Active Directory domain. Parameters id : ID of the active directory. user : Name of the Activer Directory user with the privilege to leave the domain. password : Password for the Active Directory user. force : Use this option when there is an error when leaving the domain. report_status \u00b6 | report_status(**kwargs) Reports the detail status of the Active Directory domain. Parameters id : ID of the active directory. test_user \u00b6 | test_user(name, **kwargs) Tests whether the user exist in the Active Directory. If the user is present, then the user's group and role information is reported. Parameters id : ID of the Active Directory. name : Name of the Active Directory user. test_group \u00b6 | test_group(name, **kwargs) Tests whether the user group exist in the Active Directory. Parameters id : ID of the Active Directory. name : Name of the Active Directory group. ActiveDirectoryMembershipList \u00b6 class ActiveDirectoryMembershipList(Collection) remove \u00b6 | remove(id, password, user, **kwargs) Leaves the Active Directory domain. Parameters id : ID of the active directory. user : Name of the Activer Directory user with the privilege to leave the domain. password : Password for the Active Directory user. force : Use this option when there is an error when leaving the domain. report_status \u00b6 | report_status(id, **kwargs) Reports the detail status of the Active Directory domain. Parameters id : ID of the active directory. test_user \u00b6 | test_user(id, name, **kwargs) Tests whether the user exist in the Active Directory. If the user is present, then the user's group and role information is reported. Parameters id : ID of the Active Directory. name : Name of the Active Directory user. test_group \u00b6 | test_group(id, name, **kwargs) Tests whether the user group exist in the Active Directory. Parameters id : ID of the Active Directory. name : Name of the Active Directory group.","title":"active_directory_memberships"},{"location":"api/active_directory_memberships.html#table_of_contents","text":"nimbleclient.v1.api.active_directory_memberships ActiveDirectoryMembership remove report_status test_user test_group ActiveDirectoryMembershipList remove report_status test_user test_group","title":"Table of Contents"},{"location":"api/active_directory_memberships.html#nimbleclientv1apiactive_directory_memberships","text":"","title":"nimbleclient.v1.api.active_directory_memberships"},{"location":"api/active_directory_memberships.html#activedirectorymembership","text":"class ActiveDirectoryMembership(Resource) Manages the storage array's membership with the Active Directory. Parameters id : Identifier for the Active Directory Domain. description : Description for the Active Directory Domain. name : Identifier for the Active Directory domain. netbios : Netbios name for the Active Directory domain. server_list : List of IP addresses or names for the backup domain controller. computer_name : The name of the computer account in the domain controller. organizational_unit : The location for the computer account. user : Name of the Activer Directory user with Administrator's privilege. password : Password for the Active Directory user. enabled : Active Directory authentication is currently enabled.","title":"ActiveDirectoryMembership"},{"location":"api/active_directory_memberships.html#remove","text":"| remove(password, user, **kwargs) Leaves the Active Directory domain. Parameters id : ID of the active directory. user : Name of the Activer Directory user with the privilege to leave the domain. password : Password for the Active Directory user. force : Use this option when there is an error when leaving the domain.","title":"remove"},{"location":"api/active_directory_memberships.html#report_status","text":"| report_status(**kwargs) Reports the detail status of the Active Directory domain. Parameters id : ID of the active directory.","title":"report_status"},{"location":"api/active_directory_memberships.html#test_user","text":"| test_user(name, **kwargs) Tests whether the user exist in the Active Directory. If the user is present, then the user's group and role information is reported. Parameters id : ID of the Active Directory. name : Name of the Active Directory user.","title":"test_user"},{"location":"api/active_directory_memberships.html#test_group","text":"| test_group(name, **kwargs) Tests whether the user group exist in the Active Directory. Parameters id : ID of the Active Directory. name : Name of the Active Directory group.","title":"test_group"},{"location":"api/active_directory_memberships.html#activedirectorymembershiplist","text":"class ActiveDirectoryMembershipList(Collection)","title":"ActiveDirectoryMembershipList"},{"location":"api/active_directory_memberships.html#remove_1","text":"| remove(id, password, user, **kwargs) Leaves the Active Directory domain. Parameters id : ID of the active directory. user : Name of the Activer Directory user with the privilege to leave the domain. password : Password for the Active Directory user. force : Use this option when there is an error when leaving the domain.","title":"remove"},{"location":"api/active_directory_memberships.html#report_status_1","text":"| report_status(id, **kwargs) Reports the detail status of the Active Directory domain. Parameters id : ID of the active directory.","title":"report_status"},{"location":"api/active_directory_memberships.html#test_user_1","text":"| test_user(id, name, **kwargs) Tests whether the user exist in the Active Directory. If the user is present, then the user's group and role information is reported. Parameters id : ID of the Active Directory. name : Name of the Active Directory user.","title":"test_user"},{"location":"api/active_directory_memberships.html#test_group_1","text":"| test_group(id, name, **kwargs) Tests whether the user group exist in the Active Directory. Parameters id : ID of the Active Directory. name : Name of the Active Directory group.","title":"test_group"},{"location":"api/alarms.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.alarms Alarm acknowledge unacknowledge AlarmList acknowledge unacknowledge nimbleclient.v1.api.alarms \u00b6 Alarm \u00b6 class Alarm(Resource) View alarms. Parameters id : Identifier for the alarm. type : Identifier for type of alarm. array : The array name where the alarm is generated. curr_onset_event_id : Identifier for the current onset event. object_id : Identifier of object operated upon. object_name : Name of object operated upon. object_type : Type of the object being operated upon. onset_time : Time when this alarm was triggered. ack_time : Time when this alarm was acknowledged. status : Status of the operation -- open or acknowledged. user_id : Identifier of the user who acknowledged the alarm. user_name : Username of the user who acknowledged the alarm. user_full_name : Full name of the user who acknowledged the alarm. category : Category of the alarm. severity : Severity level of the event. remind_every : Frequency of notification. This number and the remind_every_unit define how frequent one alarm notification is sent. For example, a value of 1 with the 'remind_every_unit' of 'days' results in one notification every day. remind_every_unit : Time unit over which to send the number of notification specified in 'remind_every'. For example, a value of 'days' with a 'remind_every' of '1' results in one notification every day. activity : Description of activity performed and recorded in alarm. next_notification_time : Time when next reminder for the alarm will be sent. acknowledge \u00b6 | acknowledge(**kwargs) Acknowledge an alarm. Parameters id : ID of the acknowledged alarm. remind_every : Notification frequency unit. remind_every_unit : Period unit. unacknowledge \u00b6 | unacknowledge(**kwargs) Unacknowledge an alarm. Parameters id : ID of the acknowledged alarm. AlarmList \u00b6 class AlarmList(Collection) acknowledge \u00b6 | acknowledge(id, **kwargs) Acknowledge an alarm. Parameters id : ID of the acknowledged alarm. remind_every : Notification frequency unit. remind_every_unit : Period unit. unacknowledge \u00b6 | unacknowledge(id, **kwargs) Unacknowledge an alarm. Parameters id : ID of the acknowledged alarm.","title":"alarms"},{"location":"api/alarms.html#table_of_contents","text":"nimbleclient.v1.api.alarms Alarm acknowledge unacknowledge AlarmList acknowledge unacknowledge","title":"Table of Contents"},{"location":"api/alarms.html#nimbleclientv1apialarms","text":"","title":"nimbleclient.v1.api.alarms"},{"location":"api/alarms.html#alarm","text":"class Alarm(Resource) View alarms. Parameters id : Identifier for the alarm. type : Identifier for type of alarm. array : The array name where the alarm is generated. curr_onset_event_id : Identifier for the current onset event. object_id : Identifier of object operated upon. object_name : Name of object operated upon. object_type : Type of the object being operated upon. onset_time : Time when this alarm was triggered. ack_time : Time when this alarm was acknowledged. status : Status of the operation -- open or acknowledged. user_id : Identifier of the user who acknowledged the alarm. user_name : Username of the user who acknowledged the alarm. user_full_name : Full name of the user who acknowledged the alarm. category : Category of the alarm. severity : Severity level of the event. remind_every : Frequency of notification. This number and the remind_every_unit define how frequent one alarm notification is sent. For example, a value of 1 with the 'remind_every_unit' of 'days' results in one notification every day. remind_every_unit : Time unit over which to send the number of notification specified in 'remind_every'. For example, a value of 'days' with a 'remind_every' of '1' results in one notification every day. activity : Description of activity performed and recorded in alarm. next_notification_time : Time when next reminder for the alarm will be sent.","title":"Alarm"},{"location":"api/alarms.html#acknowledge","text":"| acknowledge(**kwargs) Acknowledge an alarm. Parameters id : ID of the acknowledged alarm. remind_every : Notification frequency unit. remind_every_unit : Period unit.","title":"acknowledge"},{"location":"api/alarms.html#unacknowledge","text":"| unacknowledge(**kwargs) Unacknowledge an alarm. Parameters id : ID of the acknowledged alarm.","title":"unacknowledge"},{"location":"api/alarms.html#alarmlist","text":"class AlarmList(Collection)","title":"AlarmList"},{"location":"api/alarms.html#acknowledge_1","text":"| acknowledge(id, **kwargs) Acknowledge an alarm. Parameters id : ID of the acknowledged alarm. remind_every : Notification frequency unit. remind_every_unit : Period unit.","title":"acknowledge"},{"location":"api/alarms.html#unacknowledge_1","text":"| unacknowledge(id, **kwargs) Unacknowledge an alarm. Parameters id : ID of the acknowledged alarm.","title":"unacknowledge"},{"location":"api/application_categories.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.application_categories ApplicationCategory nimbleclient.v1.api.application_categories \u00b6 ApplicationCategory \u00b6 class ApplicationCategory(Resource) Provides the list of application categories that are available, to classify volumes depending on the applications that use them. Parameters id : Identifier for the application category. name : Name of application category. dedupe_enabled : Specifies if dedupe is enabled for performance policies associated with this application category. creation_time : Time when this application category was created. last_modified : Time when this application category was last modified.","title":"application_categories"},{"location":"api/application_categories.html#table_of_contents","text":"nimbleclient.v1.api.application_categories ApplicationCategory","title":"Table of Contents"},{"location":"api/application_categories.html#nimbleclientv1apiapplication_categories","text":"","title":"nimbleclient.v1.api.application_categories"},{"location":"api/application_categories.html#applicationcategory","text":"class ApplicationCategory(Resource) Provides the list of application categories that are available, to classify volumes depending on the applications that use them. Parameters id : Identifier for the application category. name : Name of application category. dedupe_enabled : Specifies if dedupe is enabled for performance policies associated with this application category. creation_time : Time when this application category was created. last_modified : Time when this application category was last modified.","title":"ApplicationCategory"},{"location":"api/application_servers.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.application_servers ApplicationServer nimbleclient.v1.api.application_servers \u00b6 ApplicationServer \u00b6 class ApplicationServer(Resource) An application server is an external agent that collaborates with an array to manage storage resources; for example, Volume Shadow Copy Service (VSS) or VMware. Parameters id : Identifier for the application server. name : Name for the application server. hostname : Application server hostname. port : Application server port number. username : Application server username. description : Text description of application server. password : Application server password. server_type : Application server type ({invalid|vss|vmware|cisco|stack_vision|container_node}). metadata : Key-value pairs that augment an application server's attributes. creation_time : Time when this application server was created. last_modified : Time when this application server was last modified.","title":"application_servers"},{"location":"api/application_servers.html#table_of_contents","text":"nimbleclient.v1.api.application_servers ApplicationServer","title":"Table of Contents"},{"location":"api/application_servers.html#nimbleclientv1apiapplication_servers","text":"","title":"nimbleclient.v1.api.application_servers"},{"location":"api/application_servers.html#applicationserver","text":"class ApplicationServer(Resource) An application server is an external agent that collaborates with an array to manage storage resources; for example, Volume Shadow Copy Service (VSS) or VMware. Parameters id : Identifier for the application server. name : Name for the application server. hostname : Application server hostname. port : Application server port number. username : Application server username. description : Text description of application server. password : Application server password. server_type : Application server type ({invalid|vss|vmware|cisco|stack_vision|container_node}). metadata : Key-value pairs that augment an application server's attributes. creation_time : Time when this application server was created. last_modified : Time when this application server was last modified.","title":"ApplicationServer"},{"location":"api/arrays.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.arrays Array failover halt reboot ArrayList failover halt reboot nimbleclient.v1.api.arrays \u00b6 Array \u00b6 class Array(Resource) Retrieve information of specified arrays. The array is the management and configuration for the underlying physical hardware array box. Parameters id : Identifier for array. name : The user provided name of the array. It is also the array's hostname. force : Forcibly delete the specified array. full_name : The array's fully qualified name. search_name : The array name used for object search. status : Reachability status of the array in the group. role : Role of the array in the group. group_state : State of the array in the group. pool_name : Name of pool to which this is a member. pool_id : ID of pool to which this is a member. model : Array model. serial : Serial number of the array. version : Software version of the array. is_sfa : True if this array supports SFA; false otherwise. creation_time : Time when this array object was created. last_modified : Time when this array object was last modified. usage_valid : Indicates whether the usage of array is valid. usable_capacity_bytes : The usable capacity of the array in bytes. usable_cache_capacity_bytes : The usable cache capacity of the array in bytes. raw_capacity_bytes : The raw capacity of the array in bytes. vol_usage_bytes : The compressed usage of volumes in array. vol_usage_uncompressed_bytes : The uncompressed usage of volumes in array. This is the pre-reduced usage. vol_compression : The compression rate of volumes in array expressed as ratio. vol_saved_bytes : The saved space of volumes in array. snap_usage_bytes : The compressed usage of snapshots in array. snap_usage_uncompressed_bytes : The uncompressed usage of snapshots in array. This is the pre-reduced usage. snap_compression : The compression rate of snapshots in array expressed as ratio. snap_space_reduction : The space reduction rate of snapshots in array expressed as ratio. snap_saved_bytes : The saved space of snapshots in array. pending_delete_bytes : The pending delete bytes in array. available_bytes : The available space of array. usage : Used space of the array in bytes. all_flash : Whether it is an all-flash array. dedupe_capacity_bytes : The dedupe capacity of a hybrid array. Does not apply to all-flash arrays. dedupe_usage_bytes : The dedupe usage of a hybrid array. Does not apply to all-flash arrays. is_fully_dedupe_capable : Is array fully capable to dedupe its usable capacity. dedupe_disabled : Is data deduplication disabled for this array. extended_model : Extended model of the array. oem : OEM brand of the array. brand : Brand of the array. is_supported_hw_config : Whether it is a supported hardware config. gig_nic_port_count : Count of 1G NIC Ports installed on the array. ten_gig_sfp_nic_port_count : Count of SFP NIC Ports installed on the array capable of 10G, 25G or 100G speeds. ten_gig_t_nic_port_count : Count of 10G BaseT NIC Ports installed on the array. fc_port_count : Count of Fibre Channel Ports installed on the array. public_key : Public key of the array. upgrade : The array upgrade data. create_pool : Whether to create associated pool during array create. pool_description : Text description of the pool to be created during array creation. allow_lower_limits : A True setting will allow you to add an array with lower limits to a pool with higher limits. ctrlr_a_support_ip : Controller A Support IP Address. ctrlr_b_support_ip : Controller B Support IP Address. nic_list : List NICs information. Used when creating an array. model_sub_type : Array model sub type. zconf_ipaddrs : List of link-local zero-configuration addresses of the array. secondary_mgmt_ip : Secondary management IP address for the Group. failover \u00b6 | failover(**kwargs) Perform a failover on the specified array. Parameters id : ID of the array to perform failover on. force : Initiate failover without performing any precheck. job_timeout : Job timeout in seconds. halt \u00b6 | halt(**kwargs) Halt the specified array. Restarting the array will require physically powering it back on. Parameters id : ID of the array to halt. job_timeout : Job timeout in seconds. reboot \u00b6 | reboot(**kwargs) Reboot the specified array. Parameters id : ID of the array to reboot. job_timeout : Job timeout in seconds. ArrayList \u00b6 class ArrayList(Collection) failover \u00b6 | failover(id, **kwargs) Perform a failover on the specified array. Parameters id : ID of the array to perform failover on. force : Initiate failover without performing any precheck. job_timeout : Job timeout in seconds. halt \u00b6 | halt(id, **kwargs) Halt the specified array. Restarting the array will require physically powering it back on. Parameters id : ID of the array to halt. job_timeout : Job timeout in seconds. reboot \u00b6 | reboot(id, **kwargs) Reboot the specified array. Parameters id : ID of the array to reboot. job_timeout : Job timeout in seconds.","title":"arrays"},{"location":"api/arrays.html#table_of_contents","text":"nimbleclient.v1.api.arrays Array failover halt reboot ArrayList failover halt reboot","title":"Table of Contents"},{"location":"api/arrays.html#nimbleclientv1apiarrays","text":"","title":"nimbleclient.v1.api.arrays"},{"location":"api/arrays.html#array","text":"class Array(Resource) Retrieve information of specified arrays. The array is the management and configuration for the underlying physical hardware array box. Parameters id : Identifier for array. name : The user provided name of the array. It is also the array's hostname. force : Forcibly delete the specified array. full_name : The array's fully qualified name. search_name : The array name used for object search. status : Reachability status of the array in the group. role : Role of the array in the group. group_state : State of the array in the group. pool_name : Name of pool to which this is a member. pool_id : ID of pool to which this is a member. model : Array model. serial : Serial number of the array. version : Software version of the array. is_sfa : True if this array supports SFA; false otherwise. creation_time : Time when this array object was created. last_modified : Time when this array object was last modified. usage_valid : Indicates whether the usage of array is valid. usable_capacity_bytes : The usable capacity of the array in bytes. usable_cache_capacity_bytes : The usable cache capacity of the array in bytes. raw_capacity_bytes : The raw capacity of the array in bytes. vol_usage_bytes : The compressed usage of volumes in array. vol_usage_uncompressed_bytes : The uncompressed usage of volumes in array. This is the pre-reduced usage. vol_compression : The compression rate of volumes in array expressed as ratio. vol_saved_bytes : The saved space of volumes in array. snap_usage_bytes : The compressed usage of snapshots in array. snap_usage_uncompressed_bytes : The uncompressed usage of snapshots in array. This is the pre-reduced usage. snap_compression : The compression rate of snapshots in array expressed as ratio. snap_space_reduction : The space reduction rate of snapshots in array expressed as ratio. snap_saved_bytes : The saved space of snapshots in array. pending_delete_bytes : The pending delete bytes in array. available_bytes : The available space of array. usage : Used space of the array in bytes. all_flash : Whether it is an all-flash array. dedupe_capacity_bytes : The dedupe capacity of a hybrid array. Does not apply to all-flash arrays. dedupe_usage_bytes : The dedupe usage of a hybrid array. Does not apply to all-flash arrays. is_fully_dedupe_capable : Is array fully capable to dedupe its usable capacity. dedupe_disabled : Is data deduplication disabled for this array. extended_model : Extended model of the array. oem : OEM brand of the array. brand : Brand of the array. is_supported_hw_config : Whether it is a supported hardware config. gig_nic_port_count : Count of 1G NIC Ports installed on the array. ten_gig_sfp_nic_port_count : Count of SFP NIC Ports installed on the array capable of 10G, 25G or 100G speeds. ten_gig_t_nic_port_count : Count of 10G BaseT NIC Ports installed on the array. fc_port_count : Count of Fibre Channel Ports installed on the array. public_key : Public key of the array. upgrade : The array upgrade data. create_pool : Whether to create associated pool during array create. pool_description : Text description of the pool to be created during array creation. allow_lower_limits : A True setting will allow you to add an array with lower limits to a pool with higher limits. ctrlr_a_support_ip : Controller A Support IP Address. ctrlr_b_support_ip : Controller B Support IP Address. nic_list : List NICs information. Used when creating an array. model_sub_type : Array model sub type. zconf_ipaddrs : List of link-local zero-configuration addresses of the array. secondary_mgmt_ip : Secondary management IP address for the Group.","title":"Array"},{"location":"api/arrays.html#failover","text":"| failover(**kwargs) Perform a failover on the specified array. Parameters id : ID of the array to perform failover on. force : Initiate failover without performing any precheck. job_timeout : Job timeout in seconds.","title":"failover"},{"location":"api/arrays.html#halt","text":"| halt(**kwargs) Halt the specified array. Restarting the array will require physically powering it back on. Parameters id : ID of the array to halt. job_timeout : Job timeout in seconds.","title":"halt"},{"location":"api/arrays.html#reboot","text":"| reboot(**kwargs) Reboot the specified array. Parameters id : ID of the array to reboot. job_timeout : Job timeout in seconds.","title":"reboot"},{"location":"api/arrays.html#arraylist","text":"class ArrayList(Collection)","title":"ArrayList"},{"location":"api/arrays.html#failover_1","text":"| failover(id, **kwargs) Perform a failover on the specified array. Parameters id : ID of the array to perform failover on. force : Initiate failover without performing any precheck. job_timeout : Job timeout in seconds.","title":"failover"},{"location":"api/arrays.html#halt_1","text":"| halt(id, **kwargs) Halt the specified array. Restarting the array will require physically powering it back on. Parameters id : ID of the array to halt. job_timeout : Job timeout in seconds.","title":"halt"},{"location":"api/arrays.html#reboot_1","text":"| reboot(id, **kwargs) Reboot the specified array. Parameters id : ID of the array to reboot. job_timeout : Job timeout in seconds.","title":"reboot"},{"location":"api/audit_log.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.audit_log AuditLog nimbleclient.v1.api.audit_log \u00b6 AuditLog \u00b6 class AuditLog(Resource) View audit log. Parameters id : Identifier for the audit log record. type : Identifier for type of audit log record. object_id : Identifier of object operated upon. object_name : Name of object operated upon. object_type : Type of the object being operated upon. scope : Scope within which object exists, for example, name of the array for a NIC. time : Time when this operation was performed. status : Status of the operation -- success or failure. error_code : If the operation has failed, this indicates the error code corresponding to the failure. user_id : Identifier of the user who performed the operation. user_name : Username of the user who performed the operation. user_full_name : Full name of the user who performed the operation. source_ip : IP address from where the operation request originated. ext_user_id : The user id of an external user. ext_user_group_id : The group ID of an external user. ext_user_group_name : The group name of an external user. app_name : Name of application from where the operation request was issued, for example, pam, VSS Agent, etc. access_type : Name of access on how the operation request was issued, for example, GUI, CLI or API. category : Category of the audit log record. activity_type : Type of activity performed, for example, create, update or delete. activity : Description of activity performed and recorded in audit log.","title":"audit_log"},{"location":"api/audit_log.html#table_of_contents","text":"nimbleclient.v1.api.audit_log AuditLog","title":"Table of Contents"},{"location":"api/audit_log.html#nimbleclientv1apiaudit_log","text":"","title":"nimbleclient.v1.api.audit_log"},{"location":"api/audit_log.html#auditlog","text":"class AuditLog(Resource) View audit log. Parameters id : Identifier for the audit log record. type : Identifier for type of audit log record. object_id : Identifier of object operated upon. object_name : Name of object operated upon. object_type : Type of the object being operated upon. scope : Scope within which object exists, for example, name of the array for a NIC. time : Time when this operation was performed. status : Status of the operation -- success or failure. error_code : If the operation has failed, this indicates the error code corresponding to the failure. user_id : Identifier of the user who performed the operation. user_name : Username of the user who performed the operation. user_full_name : Full name of the user who performed the operation. source_ip : IP address from where the operation request originated. ext_user_id : The user id of an external user. ext_user_group_id : The group ID of an external user. ext_user_group_name : The group name of an external user. app_name : Name of application from where the operation request was issued, for example, pam, VSS Agent, etc. access_type : Name of access on how the operation request was issued, for example, GUI, CLI or API. category : Category of the audit log record. activity_type : Type of activity performed, for example, create, update or delete. activity : Description of activity performed and recorded in audit log.","title":"AuditLog"},{"location":"api/chap_users.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.chap_users ChapUser nimbleclient.v1.api.chap_users \u00b6 ChapUser \u00b6 class ChapUser(Resource) Manage Challenge-Response Handshake Authentication Protocol (CHAP) user accounts. CHAP users are one method of access control for iSCSI initiators. Each CHAP user has a CHAP password, sometimes called a CHAP secret. The CHAP passwords must match on the array and on the iSCSI initiator in order for the array to authenicate the initiator and allow it access. The CHAP user information must exist on both the array and the iSCSI initiator. Target authentication gives security only for the specific iSCSI target. Parameters id : Identifier for the CHAP user. name : Name of CHAP user. full_name : CHAP user's fully qualified name. search_name : CHAP user name used for object search. description : Text description of CHAP user. password : CHAP secret.The CHAP secret should be between 12-16 characters and cannot contain spaces or most punctuation. initiator_iqns : List of iSCSI initiators. To be configured with this CHAP user for iSCSI Group Target CHAP authentication. This attribute cannot be modified at the same time with other attributes. If any specified initiator is already associated with another CHAP user, it will be replaced by this CHAP user for future CHAP authentication. tenant_id : Identifier for the tenant. creation_time : Time when this CHAP user was created. last_modified : Time when this CHAP user was last modified. vol_list : List of volumes associated with this CHAP user. vol_count : Count of volumes associated with this CHAP user.","title":"chap_users"},{"location":"api/chap_users.html#table_of_contents","text":"nimbleclient.v1.api.chap_users ChapUser","title":"Table of Contents"},{"location":"api/chap_users.html#nimbleclientv1apichap_users","text":"","title":"nimbleclient.v1.api.chap_users"},{"location":"api/chap_users.html#chapuser","text":"class ChapUser(Resource) Manage Challenge-Response Handshake Authentication Protocol (CHAP) user accounts. CHAP users are one method of access control for iSCSI initiators. Each CHAP user has a CHAP password, sometimes called a CHAP secret. The CHAP passwords must match on the array and on the iSCSI initiator in order for the array to authenicate the initiator and allow it access. The CHAP user information must exist on both the array and the iSCSI initiator. Target authentication gives security only for the specific iSCSI target. Parameters id : Identifier for the CHAP user. name : Name of CHAP user. full_name : CHAP user's fully qualified name. search_name : CHAP user name used for object search. description : Text description of CHAP user. password : CHAP secret.The CHAP secret should be between 12-16 characters and cannot contain spaces or most punctuation. initiator_iqns : List of iSCSI initiators. To be configured with this CHAP user for iSCSI Group Target CHAP authentication. This attribute cannot be modified at the same time with other attributes. If any specified initiator is already associated with another CHAP user, it will be replaced by this CHAP user for future CHAP authentication. tenant_id : Identifier for the tenant. creation_time : Time when this CHAP user was created. last_modified : Time when this CHAP user was last modified. vol_list : List of volumes associated with this CHAP user. vol_count : Count of volumes associated with this CHAP user.","title":"ChapUser"},{"location":"api/controllers.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.controllers Controller nimbleclient.v1.api.controllers \u00b6 Controller \u00b6 class Controller(Resource) Controller is a redundant collection of hardware capable of running the array software. Parameters id : Identifier of the controller. name : Name of the controller. array_name : Name of the array containing this controller. array_id : Rest ID of the array containing this controller. partial_response_ok : Indicate that it is ok to provide partially available response. serial : Serial number for this controller. model : Model of this controller. hostname : Host name for the controller. support_address : IP address used for support. support_netmask : IP netmask used for support. support_nic : Network card used for support. power_status : Overall power supply status for the controller. fan_status : Overall fan status for the controller. temperature_status : Overall temperature status for the controller. power_supplies : Status for each power supply in the controller. fans : Status for each fan in the controller. temperature_sensors : Status for temperature sensor in the controller. partition_status : Status of the system's raid partitions. ctrlr_side : Identifies which controller this is on its array. state : Indicates whether this controller is active or not. nvme_cards_enabled : Indicates if the NVMe accelerator card is enabled. nvme_cards : List of NVMe accelerator cards. asup_time : Time of the last autosupport by the controller.","title":"controllers"},{"location":"api/controllers.html#table_of_contents","text":"nimbleclient.v1.api.controllers Controller","title":"Table of Contents"},{"location":"api/controllers.html#nimbleclientv1apicontrollers","text":"","title":"nimbleclient.v1.api.controllers"},{"location":"api/controllers.html#controller","text":"class Controller(Resource) Controller is a redundant collection of hardware capable of running the array software. Parameters id : Identifier of the controller. name : Name of the controller. array_name : Name of the array containing this controller. array_id : Rest ID of the array containing this controller. partial_response_ok : Indicate that it is ok to provide partially available response. serial : Serial number for this controller. model : Model of this controller. hostname : Host name for the controller. support_address : IP address used for support. support_netmask : IP netmask used for support. support_nic : Network card used for support. power_status : Overall power supply status for the controller. fan_status : Overall fan status for the controller. temperature_status : Overall temperature status for the controller. power_supplies : Status for each power supply in the controller. fans : Status for each fan in the controller. temperature_sensors : Status for temperature sensor in the controller. partition_status : Status of the system's raid partitions. ctrlr_side : Identifies which controller this is on its array. state : Indicates whether this controller is active or not. nvme_cards_enabled : Indicates if the NVMe accelerator card is enabled. nvme_cards : List of NVMe accelerator cards. asup_time : Time of the last autosupport by the controller.","title":"Controller"},{"location":"api/disks.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.disks Disk nimbleclient.v1.api.disks \u00b6 Disk \u00b6 class Disk(Resource) Disks are used for storing user data. Parameters id : ID of disk. is_dfc : Is disk part of dual flash carrier. serial : Disk serial number(N/A if empty). path : Disk SCSI device path. shelf_serial : Serial number of the shelf the disk is attached to. shelf_location : Identifies the controller, port, and chain position of the shelf the disk belongs to. shelf_id : Identifies the physical shelf the disk belongs to. shelf_location_id : Identifies the position shelf the disk belongs to, as coded integer. vshelf_id : Identifies the local shelf ID the disk belongs to. slot : Disk slot number. bank : Disk bank number. model : Disk model name. vendor : Vendor name of the disk manufacturer. firmware_version : Firmware version on the disk. hba : HBA ID the disk is connected to. port : HBA port number the disk is connected to. size : Disk size in bytes. state : Disk hardware state. type : Type of disk (HDD, SSD, N/A). block_type : Native block type of the disk. raid_id : Raid ID. raid_resync_percent : Percentage RAID rebuild completed on this disk. raid_resync_current_speed : Current RAID rebuild speed (bytes/sec). raid_resync_average_speed : Average RAID rebuild speed (bytes/sec). raid_state : RAID status for the disk (N/A, okay, resynchronizing, spare, faulty). disk_internal_stat_1 : Internal disk statistic 1. smart_attribute_list : S.M.A.R.T. attributes for the disk. disk_op : The intended operation to be performed on the specified disk. force : Forcibly add a disk. array_name : Name of array the disk belongs to. array_id : ID of array the disk belongs to. partial_response_ok : Indicate that it is okay to provide partially available response.","title":"disks"},{"location":"api/disks.html#table_of_contents","text":"nimbleclient.v1.api.disks Disk","title":"Table of Contents"},{"location":"api/disks.html#nimbleclientv1apidisks","text":"","title":"nimbleclient.v1.api.disks"},{"location":"api/disks.html#disk","text":"class Disk(Resource) Disks are used for storing user data. Parameters id : ID of disk. is_dfc : Is disk part of dual flash carrier. serial : Disk serial number(N/A if empty). path : Disk SCSI device path. shelf_serial : Serial number of the shelf the disk is attached to. shelf_location : Identifies the controller, port, and chain position of the shelf the disk belongs to. shelf_id : Identifies the physical shelf the disk belongs to. shelf_location_id : Identifies the position shelf the disk belongs to, as coded integer. vshelf_id : Identifies the local shelf ID the disk belongs to. slot : Disk slot number. bank : Disk bank number. model : Disk model name. vendor : Vendor name of the disk manufacturer. firmware_version : Firmware version on the disk. hba : HBA ID the disk is connected to. port : HBA port number the disk is connected to. size : Disk size in bytes. state : Disk hardware state. type : Type of disk (HDD, SSD, N/A). block_type : Native block type of the disk. raid_id : Raid ID. raid_resync_percent : Percentage RAID rebuild completed on this disk. raid_resync_current_speed : Current RAID rebuild speed (bytes/sec). raid_resync_average_speed : Average RAID rebuild speed (bytes/sec). raid_state : RAID status for the disk (N/A, okay, resynchronizing, spare, faulty). disk_internal_stat_1 : Internal disk statistic 1. smart_attribute_list : S.M.A.R.T. attributes for the disk. disk_op : The intended operation to be performed on the specified disk. force : Forcibly add a disk. array_name : Name of array the disk belongs to. array_id : ID of array the disk belongs to. partial_response_ok : Indicate that it is okay to provide partially available response.","title":"Disk"},{"location":"api/events.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.events Event nimbleclient.v1.api.events \u00b6 Event \u00b6 class Event(Resource) View events. Parameters id : Identifier for the event record. type : Type of the event record. name : Name of alert macro to generate. scope : The array name for array level event. target : Name of object upon which the event occurred. target_type : Target type of the event record. timestamp : Time when this event happened. category : Category of the event record. severity : Severity level of the event. summary : Summary of the event. activity : Description of the event. alarm_id : The alarm ID if the event is related to an alarm. params : Arguments provided for event creation in key-value structure. Until KV implementation for events, will ignore keys (though keys must be non-empty) and take values positionally. tenant_id : Tenant ID of the event. This is used to determine what tenant context the event belongs to.","title":"events"},{"location":"api/events.html#table_of_contents","text":"nimbleclient.v1.api.events Event","title":"Table of Contents"},{"location":"api/events.html#nimbleclientv1apievents","text":"","title":"nimbleclient.v1.api.events"},{"location":"api/events.html#event","text":"class Event(Resource) View events. Parameters id : Identifier for the event record. type : Type of the event record. name : Name of alert macro to generate. scope : The array name for array level event. target : Name of object upon which the event occurred. target_type : Target type of the event record. timestamp : Time when this event happened. category : Category of the event record. severity : Severity level of the event. summary : Summary of the event. activity : Description of the event. alarm_id : The alarm ID if the event is related to an alarm. params : Arguments provided for event creation in key-value structure. Until KV implementation for events, will ignore keys (though keys must be non-empty) and take values positionally. tenant_id : Tenant ID of the event. This is used to determine what tenant context the event belongs to.","title":"Event"},{"location":"api/fibre_channel_configs.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.fibre_channel_configs FibreChannelConfig regenerate hw_upgrade FibreChannelConfigList regenerate hw_upgrade nimbleclient.v1.api.fibre_channel_configs \u00b6 FibreChannelConfig \u00b6 class FibreChannelConfig(Resource) Manage group wide Fibre Channel configuration. Parameters id : Identifier for Fibre Channel configuration. array_list : List of array Fibre Channel configs. group_leader_array : Name of the group leader array. regenerate \u00b6 | regenerate(precheck, wwnn_base_str, **kwargs) Regenerate Fibre Channel configuration. Parameters id : ID of the Fibre Channel configuration. wwnn_base_str : Base World Wide Node Name(WWNN). precheck : Check if the interfaces are offline before regenerating the WWNN (World Wide Node Name). hw_upgrade \u00b6 | hw_upgrade(**kwargs) Update Fibre Channel configuration after hardware changes. Parameters id : ID of the Fibre Channel configuration. FibreChannelConfigList \u00b6 class FibreChannelConfigList(Collection) regenerate \u00b6 | regenerate(id, precheck, wwnn_base_str, **kwargs) Regenerate Fibre Channel configuration. Parameters id : ID of the Fibre Channel configuration. wwnn_base_str : Base World Wide Node Name(WWNN). precheck : Check if the interfaces are offline before regenerating the WWNN (World Wide Node Name). hw_upgrade \u00b6 | hw_upgrade(id, **kwargs) Update Fibre Channel configuration after hardware changes. Parameters id : ID of the Fibre Channel configuration.","title":"fibre_channel_configs"},{"location":"api/fibre_channel_configs.html#table_of_contents","text":"nimbleclient.v1.api.fibre_channel_configs FibreChannelConfig regenerate hw_upgrade FibreChannelConfigList regenerate hw_upgrade","title":"Table of Contents"},{"location":"api/fibre_channel_configs.html#nimbleclientv1apifibre_channel_configs","text":"","title":"nimbleclient.v1.api.fibre_channel_configs"},{"location":"api/fibre_channel_configs.html#fibrechannelconfig","text":"class FibreChannelConfig(Resource) Manage group wide Fibre Channel configuration. Parameters id : Identifier for Fibre Channel configuration. array_list : List of array Fibre Channel configs. group_leader_array : Name of the group leader array.","title":"FibreChannelConfig"},{"location":"api/fibre_channel_configs.html#regenerate","text":"| regenerate(precheck, wwnn_base_str, **kwargs) Regenerate Fibre Channel configuration. Parameters id : ID of the Fibre Channel configuration. wwnn_base_str : Base World Wide Node Name(WWNN). precheck : Check if the interfaces are offline before regenerating the WWNN (World Wide Node Name).","title":"regenerate"},{"location":"api/fibre_channel_configs.html#hw_upgrade","text":"| hw_upgrade(**kwargs) Update Fibre Channel configuration after hardware changes. Parameters id : ID of the Fibre Channel configuration.","title":"hw_upgrade"},{"location":"api/fibre_channel_configs.html#fibrechannelconfiglist","text":"class FibreChannelConfigList(Collection)","title":"FibreChannelConfigList"},{"location":"api/fibre_channel_configs.html#regenerate_1","text":"| regenerate(id, precheck, wwnn_base_str, **kwargs) Regenerate Fibre Channel configuration. Parameters id : ID of the Fibre Channel configuration. wwnn_base_str : Base World Wide Node Name(WWNN). precheck : Check if the interfaces are offline before regenerating the WWNN (World Wide Node Name).","title":"regenerate"},{"location":"api/fibre_channel_configs.html#hw_upgrade_1","text":"| hw_upgrade(id, **kwargs) Update Fibre Channel configuration after hardware changes. Parameters id : ID of the Fibre Channel configuration.","title":"hw_upgrade"},{"location":"api/fibre_channel_initiator_aliases.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.fibre_channel_initiator_aliases FibreChannelInitiatorAlias nimbleclient.v1.api.fibre_channel_initiator_aliases \u00b6 FibreChannelInitiatorAlias \u00b6 class FibreChannelInitiatorAlias(Resource) This API provides the alias information for Fibre Channel initiators. Parameters id : Unique identifier for the Fibre Channel initiator alias. alias : Alias of the Fibre Channel initiator. wwpn : WWPN (World Wide Port Name) of the Fibre Channel initiator. source : Source of the Fibre Channel initiator alias.","title":"fibre_channel_initiator_aliases"},{"location":"api/fibre_channel_initiator_aliases.html#table_of_contents","text":"nimbleclient.v1.api.fibre_channel_initiator_aliases FibreChannelInitiatorAlias","title":"Table of Contents"},{"location":"api/fibre_channel_initiator_aliases.html#nimbleclientv1apifibre_channel_initiator_aliases","text":"","title":"nimbleclient.v1.api.fibre_channel_initiator_aliases"},{"location":"api/fibre_channel_initiator_aliases.html#fibrechannelinitiatoralias","text":"class FibreChannelInitiatorAlias(Resource) This API provides the alias information for Fibre Channel initiators. Parameters id : Unique identifier for the Fibre Channel initiator alias. alias : Alias of the Fibre Channel initiator. wwpn : WWPN (World Wide Port Name) of the Fibre Channel initiator. source : Source of the Fibre Channel initiator alias.","title":"FibreChannelInitiatorAlias"},{"location":"api/fibre_channel_interfaces.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.fibre_channel_interfaces FibreChannelInterface nimbleclient.v1.api.fibre_channel_interfaces \u00b6 FibreChannelInterface \u00b6 class FibreChannelInterface(Resource) Represent information of specified Fibre Channel interfaces. Fibre Channel interfaces are hosted on Fibre Channel ports to provide data access. Parameters id : Identifier for the Fibre Channel interface. array_name_or_serial : Name or serial number of array where the interface is hosted. partial_response_ok : Indicate that it is ok to provide partially available response. controller_name : Name (A or B) of the controller where the interface is hosted. fc_port_id : ID of the port with which the interface is associated. name : Name of Fibre Channel interface. wwnn : WWNN (World Wide Node Name) for this Fibre Channel interface. wwpn : WWPN (World Wide Port Name) for this Fibre Channel interface. peerzone : Active peer zone for this Fibre Channel interface. online : Identify whether the Fibre Channel interface is online. firmware_version : Version of the Fibre Channel firmware. logical_port_number : Logical port number for the Fibre Channel port. fc_port_name : Name of Fibre Channel port. bus_location : PCI bus location of the HBA for this Fibre Channel port. slot : HBA slot number for this Fibre Channel port. orientation : Orientation of FC ports on a HBA. An orientation of 'right_to_left' indicates that ports are ordered as 3,2,1,0 on the slot. Possible values: 'left_to_right', 'right_to_left'. port : HBA port number for this Fibre Channel port. link_info : Information about the Fibre Channel link at which interface is operating. fabric_info : Fibre Channel fabric information.","title":"fibre_channel_interfaces"},{"location":"api/fibre_channel_interfaces.html#table_of_contents","text":"nimbleclient.v1.api.fibre_channel_interfaces FibreChannelInterface","title":"Table of Contents"},{"location":"api/fibre_channel_interfaces.html#nimbleclientv1apifibre_channel_interfaces","text":"","title":"nimbleclient.v1.api.fibre_channel_interfaces"},{"location":"api/fibre_channel_interfaces.html#fibrechannelinterface","text":"class FibreChannelInterface(Resource) Represent information of specified Fibre Channel interfaces. Fibre Channel interfaces are hosted on Fibre Channel ports to provide data access. Parameters id : Identifier for the Fibre Channel interface. array_name_or_serial : Name or serial number of array where the interface is hosted. partial_response_ok : Indicate that it is ok to provide partially available response. controller_name : Name (A or B) of the controller where the interface is hosted. fc_port_id : ID of the port with which the interface is associated. name : Name of Fibre Channel interface. wwnn : WWNN (World Wide Node Name) for this Fibre Channel interface. wwpn : WWPN (World Wide Port Name) for this Fibre Channel interface. peerzone : Active peer zone for this Fibre Channel interface. online : Identify whether the Fibre Channel interface is online. firmware_version : Version of the Fibre Channel firmware. logical_port_number : Logical port number for the Fibre Channel port. fc_port_name : Name of Fibre Channel port. bus_location : PCI bus location of the HBA for this Fibre Channel port. slot : HBA slot number for this Fibre Channel port. orientation : Orientation of FC ports on a HBA. An orientation of 'right_to_left' indicates that ports are ordered as 3,2,1,0 on the slot. Possible values: 'left_to_right', 'right_to_left'. port : HBA port number for this Fibre Channel port. link_info : Information about the Fibre Channel link at which interface is operating. fabric_info : Fibre Channel fabric information.","title":"FibreChannelInterface"},{"location":"api/fibre_channel_ports.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.fibre_channel_ports FibreChannelPort nimbleclient.v1.api.fibre_channel_ports \u00b6 FibreChannelPort \u00b6 class FibreChannelPort(Resource) Fibre Channel ports provide data access. This API provides the list of all Fibre Channel ports configured on the arrays. Parameters id : Identifier for the Fibre Channel port. array_name_or_serial : Name or serial number of the array. controller_name : Name (A or B) of the controller to which the port belongs. fc_port_name : Name of the Fibre Channel port. bus_location : PCI bus location of the HBA (Host Bus Adapter) for this Fibre Channel port. port : HBA (Host Bus Adapter) port number for this Fibre Channel port. slot : HBA (Host Bus Adapter) slot number for this Fibre Channel port. orientation : Orientation of FC ports on a HBA. An orientation of 'right_to_left' indicates that ports are ordered as 3,2,1,0 on the slot. Possible values: 'left_to_right', 'right_to_left'. link_info : Information about the Fibre Channel link associated with this port. rx_power : SFP RX power in uW. tx_power : SFP TX power in uW.","title":"fibre_channel_ports"},{"location":"api/fibre_channel_ports.html#table_of_contents","text":"nimbleclient.v1.api.fibre_channel_ports FibreChannelPort","title":"Table of Contents"},{"location":"api/fibre_channel_ports.html#nimbleclientv1apifibre_channel_ports","text":"","title":"nimbleclient.v1.api.fibre_channel_ports"},{"location":"api/fibre_channel_ports.html#fibrechannelport","text":"class FibreChannelPort(Resource) Fibre Channel ports provide data access. This API provides the list of all Fibre Channel ports configured on the arrays. Parameters id : Identifier for the Fibre Channel port. array_name_or_serial : Name or serial number of the array. controller_name : Name (A or B) of the controller to which the port belongs. fc_port_name : Name of the Fibre Channel port. bus_location : PCI bus location of the HBA (Host Bus Adapter) for this Fibre Channel port. port : HBA (Host Bus Adapter) port number for this Fibre Channel port. slot : HBA (Host Bus Adapter) slot number for this Fibre Channel port. orientation : Orientation of FC ports on a HBA. An orientation of 'right_to_left' indicates that ports are ordered as 3,2,1,0 on the slot. Possible values: 'left_to_right', 'right_to_left'. link_info : Information about the Fibre Channel link associated with this port. rx_power : SFP RX power in uW. tx_power : SFP TX power in uW.","title":"FibreChannelPort"},{"location":"api/fibre_channel_sessions.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.fibre_channel_sessions FibreChannelSession nimbleclient.v1.api.fibre_channel_sessions \u00b6 FibreChannelSession \u00b6 class FibreChannelSession(Resource) Fibre Channel session is created when Fibre Channel initiator connects to this group. Parameters id : Unique identifier of the Fibre Channel session. initiator_info : Information about the Fibre Channel initiator. target_info : Information about the Fibre Channel target.","title":"fibre_channel_sessions"},{"location":"api/fibre_channel_sessions.html#table_of_contents","text":"nimbleclient.v1.api.fibre_channel_sessions FibreChannelSession","title":"Table of Contents"},{"location":"api/fibre_channel_sessions.html#nimbleclientv1apifibre_channel_sessions","text":"","title":"nimbleclient.v1.api.fibre_channel_sessions"},{"location":"api/fibre_channel_sessions.html#fibrechannelsession","text":"class FibreChannelSession(Resource) Fibre Channel session is created when Fibre Channel initiator connects to this group. Parameters id : Unique identifier of the Fibre Channel session. initiator_info : Information about the Fibre Channel initiator. target_info : Information about the Fibre Channel target.","title":"FibreChannelSession"},{"location":"api/folders.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.folders Folder set_dedupe FolderList set_dedupe nimbleclient.v1.api.folders \u00b6 Folder \u00b6 class Folder(Resource) Folders are a way to group volumes, as well as a way to apply space constraints to them. Parameters id : Identifier for the folder. name : Name of folder. fqn : Fully qualified name of folder in the pool. full_name : Fully qualified name of folder in the group. search_name : Name of folder used for object search. description : Text description of folder. pool_name : Name of the pool where the folder resides. pool_id : ID of the pool where the folder resides. limit_bytes_specified : Indicates whether the folder has a limit. limit_bytes : Folder limit size in bytes. By default, a folder (except SMIS and VVol types) does not have a limit. If limit_bytes is not specified when a folder is created, or if limit_bytes is set to the largest possible 64-bit signed integer (9223372036854775807), then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. On output, if the folder has a limit, the limit_bytes_specified attribute will be true and limit_bytes will be the limit. If the folder does not have a limit, the limit_bytes_specified attribute will be false and limit_bytes will be interpreted based on the value of the usage_valid attribute. If the usage_valid attribute is true, limits_byte will be the capacity of the pool. Otherwise, limits_bytes is not meaningful and can be null. SMIS and VVol folders require a size limit. This attribute is superseded by limit_size_bytes. limit_size_bytes : Folder size limit in bytes. If limit_size_bytes is not specified when a folder is created, or if limit_size_bytes is set to -1, then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. Folders with an agent_type of 'smis' or 'vvol' must have a size limit. provisioned_limit_size_bytes : Limit on the provisioned size of volumes in a folder. If provisioned_limit_size_bytes is not specified when a folder is created, or if provisioned_limit_size_bytes is set to -1, then the folder has no provisioned size limit. overdraft_limit_pct : Amount of space to consider as overdraft range for this folder as a percentage of folder used limit. Valid values are from 0% - 200%. This is the limit above the folder usage limit beyond which enforcement action(volume offline/non-writable) is issued. capacity_bytes : Capacity of the folder in bytes. If the folder's size has a usage limit, capacity_bytes will be the folder's usage limit. If the folder's size does not have a usage limit, capacity_bytes will be the pool's capacity. This field is meaningful only when the usage_valid attribute is true. free_space_bytes : Free space in the folder in bytes. If the folder has a usage limit, free_space_bytes will be the folder's free space (the folder's usage limit minus the folder's space usage). If the folder does not have a usage limit, free_space_bytes will be the pool's free space. This field is meaningful only when the usage_valid attribute is true. provisioned_bytes : Sum of provisioned size of volumes in the folder. usage_bytes : Sum of mapped usage and snapshot uncompressed usage of volumes in the folder. volume_mapped_bytes : Sum of mapped usage of volumes in the folder. usage_valid : Indicate whether the space usage attributes of folder are valid. agent_type : External management agent type. inherited_vol_perfpol_id : Identifier of the default performance policy for a newly created volume. inherited_vol_perfpol_name : Name of the default performance policy for a newly created volume. unused_reserve_bytes : Unused reserve of volumes in the folder in bytes. This field is meaningful only when the usage_valid attribute is true. unused_snap_reserve_bytes : Unused reserve of snapshots of volumes in the folder in bytes. This field is meaningful only when the usage_valid attribute is true. compressed_vol_usage_bytes : Compressed usage of volumes in the folder. This field is meaningful only when the usage_valid attribute is true. compressed_snap_usage_bytes : Compressed usage of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true. uncompressed_vol_usage_bytes : Uncompressed usage of volumes in the folder. This field is meaningful only when the usage_valid attribute is true. uncompressed_snap_usage_bytes : Uncompressed usage of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true. vol_compression_ratio : Compression ratio of volumes in the folder. This field is meaningful only when the usage_valid attribute is true. snap_compression_ratio : Compression ratio of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true. compression_ratio : Compression savings for the folder expressed as ratio. This field is meaningful only when the usage_valid attribute is true. creation_time : Time when this folder was created. last_modified : Time when this folder was last modified. num_snaps : Number of snapshots inside the folder. This attribute is deprecated and has no meaningful value. num_snapcolls : Number of snapshot collections inside the folder. This attribute is deprecated and has no meaningful value. app_uuid : Application identifier of the folder. volume_list : List of volumes contained by the folder. appserver_id : Identifier of the application server associated with the folder. appserver_name : Name of the application server associated with the folder. folset_id : Identifier of the folder set associated with the folder. Only VVol folder can be associated with the folder set. The folder and the containing folder set must be associated with the same application server. folset_name : Name of the folder set associated with the folder. Only VVol folder can be associated with the folder set. The folder and the containing folder set must be associated with the same application server. limit_iops : IOPS limit for this folder. If limit_iops is not specified when a folder is created, or if limit_iops is set to -1, then the folder has no IOPS limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. limit_mbps : Throughput limit for this folder in MB/s. If limit_mbps is not specified when a folder is created, or if limit_mbps is set to -1, then the folder has no throughput limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. access_protocol : Access protocol of the folder. This attribute is used by the VASA Provider to determine the access protocol of the bind request. If not specified in the creation request, it will be the access protocol supported by the group. If the group supports multiple protocols, the default will be Fibre Channel. This field is meaningful only to VVol folder. tenant_id : Tenant ID of the folder. This is used to determine what tenant context the folder belongs to. set_dedupe \u00b6 | set_dedupe(dedupe_enabled, **kwargs) Set dedupe enabled/disabled for all applicable volumes inside a folder. Parameters dedupe_enabled : Enable/disable dedupe. id : Folder containing the volumes to enable/disable dedupe on. FolderList \u00b6 class FolderList(Collection) set_dedupe \u00b6 | set_dedupe(id, dedupe_enabled, **kwargs) Set dedupe enabled/disabled for all applicable volumes inside a folder. Parameters dedupe_enabled : Enable/disable dedupe. id : Folder containing the volumes to enable/disable dedupe on.","title":"folders"},{"location":"api/folders.html#table_of_contents","text":"nimbleclient.v1.api.folders Folder set_dedupe FolderList set_dedupe","title":"Table of Contents"},{"location":"api/folders.html#nimbleclientv1apifolders","text":"","title":"nimbleclient.v1.api.folders"},{"location":"api/folders.html#folder","text":"class Folder(Resource) Folders are a way to group volumes, as well as a way to apply space constraints to them. Parameters id : Identifier for the folder. name : Name of folder. fqn : Fully qualified name of folder in the pool. full_name : Fully qualified name of folder in the group. search_name : Name of folder used for object search. description : Text description of folder. pool_name : Name of the pool where the folder resides. pool_id : ID of the pool where the folder resides. limit_bytes_specified : Indicates whether the folder has a limit. limit_bytes : Folder limit size in bytes. By default, a folder (except SMIS and VVol types) does not have a limit. If limit_bytes is not specified when a folder is created, or if limit_bytes is set to the largest possible 64-bit signed integer (9223372036854775807), then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. On output, if the folder has a limit, the limit_bytes_specified attribute will be true and limit_bytes will be the limit. If the folder does not have a limit, the limit_bytes_specified attribute will be false and limit_bytes will be interpreted based on the value of the usage_valid attribute. If the usage_valid attribute is true, limits_byte will be the capacity of the pool. Otherwise, limits_bytes is not meaningful and can be null. SMIS and VVol folders require a size limit. This attribute is superseded by limit_size_bytes. limit_size_bytes : Folder size limit in bytes. If limit_size_bytes is not specified when a folder is created, or if limit_size_bytes is set to -1, then the folder has no limit. Otherwise, a limit smaller than the capacity of the pool can be set. Folders with an agent_type of 'smis' or 'vvol' must have a size limit. provisioned_limit_size_bytes : Limit on the provisioned size of volumes in a folder. If provisioned_limit_size_bytes is not specified when a folder is created, or if provisioned_limit_size_bytes is set to -1, then the folder has no provisioned size limit. overdraft_limit_pct : Amount of space to consider as overdraft range for this folder as a percentage of folder used limit. Valid values are from 0% - 200%. This is the limit above the folder usage limit beyond which enforcement action(volume offline/non-writable) is issued. capacity_bytes : Capacity of the folder in bytes. If the folder's size has a usage limit, capacity_bytes will be the folder's usage limit. If the folder's size does not have a usage limit, capacity_bytes will be the pool's capacity. This field is meaningful only when the usage_valid attribute is true. free_space_bytes : Free space in the folder in bytes. If the folder has a usage limit, free_space_bytes will be the folder's free space (the folder's usage limit minus the folder's space usage). If the folder does not have a usage limit, free_space_bytes will be the pool's free space. This field is meaningful only when the usage_valid attribute is true. provisioned_bytes : Sum of provisioned size of volumes in the folder. usage_bytes : Sum of mapped usage and snapshot uncompressed usage of volumes in the folder. volume_mapped_bytes : Sum of mapped usage of volumes in the folder. usage_valid : Indicate whether the space usage attributes of folder are valid. agent_type : External management agent type. inherited_vol_perfpol_id : Identifier of the default performance policy for a newly created volume. inherited_vol_perfpol_name : Name of the default performance policy for a newly created volume. unused_reserve_bytes : Unused reserve of volumes in the folder in bytes. This field is meaningful only when the usage_valid attribute is true. unused_snap_reserve_bytes : Unused reserve of snapshots of volumes in the folder in bytes. This field is meaningful only when the usage_valid attribute is true. compressed_vol_usage_bytes : Compressed usage of volumes in the folder. This field is meaningful only when the usage_valid attribute is true. compressed_snap_usage_bytes : Compressed usage of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true. uncompressed_vol_usage_bytes : Uncompressed usage of volumes in the folder. This field is meaningful only when the usage_valid attribute is true. uncompressed_snap_usage_bytes : Uncompressed usage of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true. vol_compression_ratio : Compression ratio of volumes in the folder. This field is meaningful only when the usage_valid attribute is true. snap_compression_ratio : Compression ratio of snapshots in the folder. This field is meaningful only when the usage_valid attribute is true. compression_ratio : Compression savings for the folder expressed as ratio. This field is meaningful only when the usage_valid attribute is true. creation_time : Time when this folder was created. last_modified : Time when this folder was last modified. num_snaps : Number of snapshots inside the folder. This attribute is deprecated and has no meaningful value. num_snapcolls : Number of snapshot collections inside the folder. This attribute is deprecated and has no meaningful value. app_uuid : Application identifier of the folder. volume_list : List of volumes contained by the folder. appserver_id : Identifier of the application server associated with the folder. appserver_name : Name of the application server associated with the folder. folset_id : Identifier of the folder set associated with the folder. Only VVol folder can be associated with the folder set. The folder and the containing folder set must be associated with the same application server. folset_name : Name of the folder set associated with the folder. Only VVol folder can be associated with the folder set. The folder and the containing folder set must be associated with the same application server. limit_iops : IOPS limit for this folder. If limit_iops is not specified when a folder is created, or if limit_iops is set to -1, then the folder has no IOPS limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. limit_mbps : Throughput limit for this folder in MB/s. If limit_mbps is not specified when a folder is created, or if limit_mbps is set to -1, then the folder has no throughput limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. access_protocol : Access protocol of the folder. This attribute is used by the VASA Provider to determine the access protocol of the bind request. If not specified in the creation request, it will be the access protocol supported by the group. If the group supports multiple protocols, the default will be Fibre Channel. This field is meaningful only to VVol folder. tenant_id : Tenant ID of the folder. This is used to determine what tenant context the folder belongs to.","title":"Folder"},{"location":"api/folders.html#set_dedupe","text":"| set_dedupe(dedupe_enabled, **kwargs) Set dedupe enabled/disabled for all applicable volumes inside a folder. Parameters dedupe_enabled : Enable/disable dedupe. id : Folder containing the volumes to enable/disable dedupe on.","title":"set_dedupe"},{"location":"api/folders.html#folderlist","text":"class FolderList(Collection)","title":"FolderList"},{"location":"api/folders.html#set_dedupe_1","text":"| set_dedupe(id, dedupe_enabled, **kwargs) Set dedupe enabled/disabled for all applicable volumes inside a folder. Parameters dedupe_enabled : Enable/disable dedupe. id : Folder containing the volumes to enable/disable dedupe on.","title":"set_dedupe"},{"location":"api/groups.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.groups Group reboot halt test_alert software_update_precheck software_update_start software_download software_cancel_download software_update_resume get_group_discovered_list validate_merge merge get_eula check_migrate migrate get_timezone_list GroupList reboot halt test_alert software_update_precheck software_update_start software_download software_cancel_download software_update_resume get_group_discovered_list validate_merge merge get_eula check_migrate migrate get_timezone_list nimbleclient.v1.api.groups \u00b6 Group \u00b6 class Group(Resource) Group is a collection of arrays operating together organized into storage pools. Parameters id : Identifier of the group. name : Name of the group. smtp_server : Hostname or IP Address of SMTP Server. smtp_port : Port number of SMTP Server. smtp_auth_enabled : Whether SMTP Server requires authentication. smtp_auth_username : Username to authenticate with SMTP Server. smtp_auth_password : Password to authenticate with SMTP Server. smtp_encrypt_type : Level of encryption for SMTP. Requires use of SMTP Authentication if encryption is enabled. autosupport_enabled : Whether to send autosupport. allow_analytics_gui : Specify whether to allow HPE Nimble Storage to use Google Analytics in the GUI. HPE Nimble Storage uses Google Analytics to gather data related to GUI usage. The data gathered is used to evaluate and improve the product. allow_support_tunnel : Whether to allow support tunnel. proxy_server : Hostname or IP Address of HTTP Proxy Server. Setting this attribute to an empty string will unset all proxy settings. proxy_port : Proxy Port of HTTP Proxy Server. proxy_username : Username to authenticate with HTTP Proxy Server. proxy_password : Password to authenticate with HTTP Proxy Server. alert_to_email_addrs : Comma-separated list of email addresss to receive emails. send_alert_to_support : Whether to send alert to Support. alert_from_email_addr : From email address to use while sending emails. alert_min_level : Minimum level of alert to be notified. isns_enabled : Whether iSNS is enabled. isns_server : Hostname or IP Address of iSNS Server. isns_port : Port number for iSNS Server. snmp_trap_enabled : Whether to enable SNMP traps. snmp_trap_host : Hostname or IP Address to send SNMP traps. snmp_trap_port : Port number of SNMP trap host. snmp_get_enabled : Whether to accept SNMP get commands. snmp_community : Community string to be used with SNMP. snmp_get_port : Port number to which SNMP get requests should be sent. snmp_sys_contact : Name of the SNMP administrator. snmp_sys_location : Location of the group. domain_name : Domain name for this group. dns_servers : IP addresses for this group's dns servers. ntp_server : Either IP address or hostname of the NTP server for this group. timezone : Timezone in which this group is located. user_inactivity_timeout : The amount of time in seconds that the user session is inactive before timing out. syslogd_enabled : Is syslogd enabled on this system. syslogd_server : Hostname of the syslogd server. syslogd_port : Port number for syslogd server. syslogd_servers : Hostname and/or port of the syslogd servers. vvol_enabled : Are vvols enabled on this group. iscsi_enabled : Whether iSCSI is enabled on this group. fc_enabled : Whether FC is enabled on this group. unique_name_enabled : Are new volume and volume collection names transformed on this group. access_protocol_list : Protocol used to access this group. group_target_enabled : Is group_target enabled on this group. default_iscsi_target_scope : Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target. tdz_enabled : Is Target Driven Zoning (TDZ) enabled on this group. tdz_prefix : Target Driven Zoning (TDZ) prefix for peer zones created by TDZ. group_target_name : Iscsi target name for this group. default_volume_reserve : Amount of space to reserve for a volume as a percentage of volume size. default_volume_warn_level : Default threshold for volume space usage as a percentage of volume size above which an alert is raised. default_volume_limit : Default limit for a volume space usage as a percentage of volume size. Volume will be taken offline/made non-writable on exceeding its limit. default_snap_reserve : Amount of space to reserve for snapshots of a volume as a percentage of volume size. default_snap_warn_level : Default threshold for snapshot space usage of a volume as a percentage of volume size above which an alert is raised. default_snap_limit : This attribute is deprecated. The array does not limit a volume's snapshot space usage. The attribute is ignored on input and returns max int64 value on output. default_snap_limit_percent : This attribute is deprecated. The array does not limit a volume's snapshot space usage. The attribute is ignored on input and returns -1 on output. alarms_enabled : Whether alarm feature is enabled. vss_validation_timeout : The amount of time in seconds to validate Microsoft VSS application synchronization before timing out. auto_switchover_enabled : Whether automatic switchover of Group management services feature is enabled. software_subscription_enabled : Whether software subscription of Group management services feature is enabled. auto_switchover_messages : List of validation messages for automatic switchover of Group Management. This will be empty when there are no conflicts found. merge_state : State of group merge. merge_group_name : Group that we're being merged with. tlsv1_enabled : Enable or disable TLSv1.0 and TLSv1.1. cc_mode_enabled : Enable or disable Common Criteria mode. group_snapshot_ttl : Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL. autoclean_unmanaged_snapshots_ttl_unit : Unit for unmanaged snapshot time to live. autoclean_unmanaged_snapshots_enabled : Whether autoclean unmanaged snapshots feature is enabled. leader_array_name : Name of the array where the group Management Service is running. leader_array_serial : Serial number of the array where the group Management Service is running. management_service_backup_array_name : Name of the array where backup the group Management Service is running. management_service_backup_status : HA status of the group Management Service. failover_mode : Failover mode of the group Management Service. witness_status : Witness status from group Management Service array and group Management Service backup array. member_list : Members of this group. compressed_vol_usage_bytes : Compressed usage of volumes in the group. compressed_snap_usage_bytes : Compressed usage of snapshots in the group. uncompressed_vol_usage_bytes : Uncompressed usage of volumes in the group. uncompressed_snap_usage_bytes : Uncompressed usage of snapshots in the group. usable_capacity_bytes : Usable capacity bytes of the group. usage : Used space of the group in bytes. raw_capacity : Total capacity of the group. usable_cache_capacity : Usable cache capacity of the group. raw_cache_capacity : Total cache capacity of the group. snap_usage_populated : Total snapshot usage as if each snapshot is deep copy of the volume. pending_deletes : Usage for blocks that are not yet deleted. num_connections : Number of connections to the group. vol_compression_ratio : Compression ratio of volumes in the group. snap_compression_ratio : Compression ratio of snapshots in the group. compression_ratio : Compression savings for the group expressed as ratio. dedupe_ratio : Dedupe savings for the group expressed as ratio. clone_ratio : Clone savings for the group expressed as ratio. vol_thin_provisioning_ratio : Thin provisioning savings for volumes in the group expressed as ratio. savings_ratio : Overall savings in the group expressed as ratio. data_reduction_ratio : Space savings in the group that does not include thin-provisioning savings expressed as ratio. savings_dedupe : Space usage savings in the group due to deduplication. savings_compression : Space usage savings in the group due to compression. savings_clone : Space usage savings in the group due to cloning of volumes. savings_vol_thin_provisioning : Space usage savings in the group due to thin provisioning of volumes. savings_data_reduction : Space usage savings in the group that does not include thin-provisioning savings. savings : Overall space usage savings in the group. free_space : Free space of the pool in bytes. unused_reserve_bytes : Reserved space that is not utilized. usage_valid : Indicates whether the usage of group is valid. space_info_valid : Is space info for this group valid. version_current : Version of software running on the group. version_target : Desired software version for the group. version_rollback : Rollback software version for the group. update_state : Group update state. update_start_time : Start time of last update. update_end_time : End time of last update. update_array_names : Arrays in the group undergoing update. update_progress_msg : Group update detailed progress message. update_error_code : If the software update has failed, this indicates the error code corresponding to the failure. update_downloading : Is software update package currently downloading. update_download_error_code : If the software download has failed, this indicates the error code corresponding to the failure. update_download_start_time : Start time of last update. update_download_end_time : End time of last update. iscsi_automatic_connection_method : Is iscsi reconnection automatic. iscsi_connection_rebalancing : Does iscsi automatically rebalance connections. repl_throttled_bandwidth : Current bandwidth throttle for replication, expressed either as megabits per second or as -1 to indicate that there is no throttle. repl_throttled_bandwidth_kbps : Current bandwidth throttle for replication, expressed either as kilobits per second or as -1 to indicate that there is no throttle. repl_throttle_list : All the replication bandwidth limits on the system. volume_migration_status : Status of data migration activity related to volumes being relocated to different pools. array_unassign_migration_status : Data migration status for arrays being removed from their pool. data_rebalance_status : Status of data rebalancing operations for pools in the group. scsi_vendor_id : SCSI vendor ID. encryption_config : How encryption is configured for this group. last_login : Time and user of last login to this group. num_snaps : Number of snapshots in the group. num_snapcolls : Number of snapshot collections in this group. date : Unix epoch time local to the group. login_banner_message : The message for the login banner that is displayed during user login activity. login_banner_after_auth : Should the banner be displayed before the user credentials are prompted or after prompting the user credentials. login_banner_reset : This will reset the banner to the version of the installed NOS. When login_banner_after_auth is specified, login_banner_reset can not be set to true. snap_retn_meter_high : Threshold for considering a volume as high retention. snap_retn_meter_very_high : Threshold for considering a volume as very high retention. reboot \u00b6 | reboot(**kwargs) Reboot all arrays in the group. Parameters id : ID of the group to reboot. job_timeout : Job timeout in seconds. halt \u00b6 | halt(**kwargs) Halt all arrays in the group. Parameters id : ID of the group to halt. force : Halt remaining arrays when one or more is unreachable. job_timeout : Job timeout in seconds. test_alert \u00b6 | test_alert(level, **kwargs) Generate a test alert. Parameters id : ID of the group. level : Level of the test alert. software_update_precheck \u00b6 | software_update_precheck(**kwargs) Run software update precheck. Parameters id : ID of the group. skip_precheck_mask : Flag to allow skipping certain types of prechecks. software_update_start \u00b6 | software_update_start(**kwargs) Update the group software to the downloaded version. Parameters id : ID of the group. skip_start_check_mask : Flag to allow skipping certain types of checks. software_download \u00b6 | software_download(version, **kwargs) Download software update package. Parameters id : ID of the group. version : Version string to download. force : Flag to force download. software_cancel_download \u00b6 | software_cancel_download(**kwargs) Cancel ongoing download of software. Parameters id : ID of the group. software_update_resume \u00b6 | software_update_resume(**kwargs) Resume stopped software update. Parameters id : ID of the group. get_group_discovered_list \u00b6 | get_group_discovered_list(**kwargs) Get list of discovered groups with arrays that are initialized. Parameters id : ID of the group. group_name : Name of the group requested to be discovered. validate_merge \u00b6 | validate_merge(src_group_ip, src_group_name, src_password, src_username, **kwargs) Perform group merge validation. Parameters id : ID of the group. src_group_name : Name of the source group. src_group_ip : IP address of the source group. src_username : Username of the source group. src_password : Password of the source group. src_passphrase : Source group encryption passphrase. skip_secondary_mgmt_ip : Skip check for secondary management IP address. merge \u00b6 | merge(src_group_ip, src_group_name, src_password, src_username, **kwargs) Perform group merge with the specified group. Parameters id : ID of the group. src_group_name : Name of the source group. src_group_ip : IP address of the source group. src_username : Username of the source group. src_password : Password of the source group. src_passphrase : Source group encryption passphrase. force : Ignore warnings and forcibly merge specified group with this group. skip_secondary_mgmt_ip : Skip check for secondary management IP address. job_timeout : Job timeout in seconds. get_eula \u00b6 | get_eula(**kwargs) Get URL to download EULA contents. Parameters id : ID of the group. locale : Locale of EULA contents. Default is en. format : Format of EULA contents. Default is HTML. phase : Phase of EULA contents. Default is setup. force : Flag to force EULA. check_migrate \u00b6 | check_migrate(**kwargs) Check if the group Management Service can be migrated to the group Management Service backup array. Parameters id : ID of the group. migrate \u00b6 | migrate(**kwargs) Migrate the group Management Service to the current group Management Service backup array. Parameters id : ID of the group. get_timezone_list \u00b6 | get_timezone_list(**kwargs) Get list of group timezones. Parameters id : ID of the group. GroupList \u00b6 class GroupList(Collection) reboot \u00b6 | reboot(id, **kwargs) Reboot all arrays in the group. Parameters id : ID of the group to reboot. job_timeout : Job timeout in seconds. halt \u00b6 | halt(id, **kwargs) Halt all arrays in the group. Parameters id : ID of the group to halt. force : Halt remaining arrays when one or more is unreachable. job_timeout : Job timeout in seconds. test_alert \u00b6 | test_alert(id, level, **kwargs) Generate a test alert. Parameters id : ID of the group. level : Level of the test alert. software_update_precheck \u00b6 | software_update_precheck(id, **kwargs) Run software update precheck. Parameters id : ID of the group. skip_precheck_mask : Flag to allow skipping certain types of prechecks. software_update_start \u00b6 | software_update_start(id, **kwargs) Update the group software to the downloaded version. Parameters id : ID of the group. skip_start_check_mask : Flag to allow skipping certain types of checks. software_download \u00b6 | software_download(id, version, **kwargs) Download software update package. Parameters id : ID of the group. version : Version string to download. force : Flag to force download. software_cancel_download \u00b6 | software_cancel_download(id, **kwargs) Cancel ongoing download of software. Parameters id : ID of the group. software_update_resume \u00b6 | software_update_resume(id, **kwargs) Resume stopped software update. Parameters id : ID of the group. get_group_discovered_list \u00b6 | get_group_discovered_list(id, **kwargs) Get list of discovered groups with arrays that are initialized. Parameters id : ID of the group. group_name : Name of the group requested to be discovered. validate_merge \u00b6 | validate_merge(id, src_group_ip, src_group_name, src_password, src_username, **kwargs) Perform group merge validation. Parameters id : ID of the group. src_group_name : Name of the source group. src_group_ip : IP address of the source group. src_username : Username of the source group. src_password : Password of the source group. src_passphrase : Source group encryption passphrase. skip_secondary_mgmt_ip : Skip check for secondary management IP address. merge \u00b6 | merge(id, src_group_ip, src_group_name, src_password, src_username, **kwargs) Perform group merge with the specified group. Parameters id : ID of the group. src_group_name : Name of the source group. src_group_ip : IP address of the source group. src_username : Username of the source group. src_password : Password of the source group. src_passphrase : Source group encryption passphrase. force : Ignore warnings and forcibly merge specified group with this group. skip_secondary_mgmt_ip : Skip check for secondary management IP address. job_timeout : Job timeout in seconds. get_eula \u00b6 | get_eula(id, **kwargs) Get URL to download EULA contents. Parameters id : ID of the group. locale : Locale of EULA contents. Default is en. format : Format of EULA contents. Default is HTML. phase : Phase of EULA contents. Default is setup. force : Flag to force EULA. check_migrate \u00b6 | check_migrate(id, **kwargs) Check if the group Management Service can be migrated to the group Management Service backup array. Parameters id : ID of the group. migrate \u00b6 | migrate(id, **kwargs) Migrate the group Management Service to the current group Management Service backup array. Parameters id : ID of the group. get_timezone_list \u00b6 | get_timezone_list(id, **kwargs) Get list of group timezones. Parameters id : ID of the group.","title":"groups"},{"location":"api/groups.html#table_of_contents","text":"nimbleclient.v1.api.groups Group reboot halt test_alert software_update_precheck software_update_start software_download software_cancel_download software_update_resume get_group_discovered_list validate_merge merge get_eula check_migrate migrate get_timezone_list GroupList reboot halt test_alert software_update_precheck software_update_start software_download software_cancel_download software_update_resume get_group_discovered_list validate_merge merge get_eula check_migrate migrate get_timezone_list","title":"Table of Contents"},{"location":"api/groups.html#nimbleclientv1apigroups","text":"","title":"nimbleclient.v1.api.groups"},{"location":"api/groups.html#group","text":"class Group(Resource) Group is a collection of arrays operating together organized into storage pools. Parameters id : Identifier of the group. name : Name of the group. smtp_server : Hostname or IP Address of SMTP Server. smtp_port : Port number of SMTP Server. smtp_auth_enabled : Whether SMTP Server requires authentication. smtp_auth_username : Username to authenticate with SMTP Server. smtp_auth_password : Password to authenticate with SMTP Server. smtp_encrypt_type : Level of encryption for SMTP. Requires use of SMTP Authentication if encryption is enabled. autosupport_enabled : Whether to send autosupport. allow_analytics_gui : Specify whether to allow HPE Nimble Storage to use Google Analytics in the GUI. HPE Nimble Storage uses Google Analytics to gather data related to GUI usage. The data gathered is used to evaluate and improve the product. allow_support_tunnel : Whether to allow support tunnel. proxy_server : Hostname or IP Address of HTTP Proxy Server. Setting this attribute to an empty string will unset all proxy settings. proxy_port : Proxy Port of HTTP Proxy Server. proxy_username : Username to authenticate with HTTP Proxy Server. proxy_password : Password to authenticate with HTTP Proxy Server. alert_to_email_addrs : Comma-separated list of email addresss to receive emails. send_alert_to_support : Whether to send alert to Support. alert_from_email_addr : From email address to use while sending emails. alert_min_level : Minimum level of alert to be notified. isns_enabled : Whether iSNS is enabled. isns_server : Hostname or IP Address of iSNS Server. isns_port : Port number for iSNS Server. snmp_trap_enabled : Whether to enable SNMP traps. snmp_trap_host : Hostname or IP Address to send SNMP traps. snmp_trap_port : Port number of SNMP trap host. snmp_get_enabled : Whether to accept SNMP get commands. snmp_community : Community string to be used with SNMP. snmp_get_port : Port number to which SNMP get requests should be sent. snmp_sys_contact : Name of the SNMP administrator. snmp_sys_location : Location of the group. domain_name : Domain name for this group. dns_servers : IP addresses for this group's dns servers. ntp_server : Either IP address or hostname of the NTP server for this group. timezone : Timezone in which this group is located. user_inactivity_timeout : The amount of time in seconds that the user session is inactive before timing out. syslogd_enabled : Is syslogd enabled on this system. syslogd_server : Hostname of the syslogd server. syslogd_port : Port number for syslogd server. syslogd_servers : Hostname and/or port of the syslogd servers. vvol_enabled : Are vvols enabled on this group. iscsi_enabled : Whether iSCSI is enabled on this group. fc_enabled : Whether FC is enabled on this group. unique_name_enabled : Are new volume and volume collection names transformed on this group. access_protocol_list : Protocol used to access this group. group_target_enabled : Is group_target enabled on this group. default_iscsi_target_scope : Newly created volumes are exported under iSCSI Group Target or iSCSI Volume Target. tdz_enabled : Is Target Driven Zoning (TDZ) enabled on this group. tdz_prefix : Target Driven Zoning (TDZ) prefix for peer zones created by TDZ. group_target_name : Iscsi target name for this group. default_volume_reserve : Amount of space to reserve for a volume as a percentage of volume size. default_volume_warn_level : Default threshold for volume space usage as a percentage of volume size above which an alert is raised. default_volume_limit : Default limit for a volume space usage as a percentage of volume size. Volume will be taken offline/made non-writable on exceeding its limit. default_snap_reserve : Amount of space to reserve for snapshots of a volume as a percentage of volume size. default_snap_warn_level : Default threshold for snapshot space usage of a volume as a percentage of volume size above which an alert is raised. default_snap_limit : This attribute is deprecated. The array does not limit a volume's snapshot space usage. The attribute is ignored on input and returns max int64 value on output. default_snap_limit_percent : This attribute is deprecated. The array does not limit a volume's snapshot space usage. The attribute is ignored on input and returns -1 on output. alarms_enabled : Whether alarm feature is enabled. vss_validation_timeout : The amount of time in seconds to validate Microsoft VSS application synchronization before timing out. auto_switchover_enabled : Whether automatic switchover of Group management services feature is enabled. software_subscription_enabled : Whether software subscription of Group management services feature is enabled. auto_switchover_messages : List of validation messages for automatic switchover of Group Management. This will be empty when there are no conflicts found. merge_state : State of group merge. merge_group_name : Group that we're being merged with. tlsv1_enabled : Enable or disable TLSv1.0 and TLSv1.1. cc_mode_enabled : Enable or disable Common Criteria mode. group_snapshot_ttl : Snapshot Time-to-live(TTL) configured at group level for automatic deletion of unmanaged snapshots. Value 0 indicates unlimited TTL. autoclean_unmanaged_snapshots_ttl_unit : Unit for unmanaged snapshot time to live. autoclean_unmanaged_snapshots_enabled : Whether autoclean unmanaged snapshots feature is enabled. leader_array_name : Name of the array where the group Management Service is running. leader_array_serial : Serial number of the array where the group Management Service is running. management_service_backup_array_name : Name of the array where backup the group Management Service is running. management_service_backup_status : HA status of the group Management Service. failover_mode : Failover mode of the group Management Service. witness_status : Witness status from group Management Service array and group Management Service backup array. member_list : Members of this group. compressed_vol_usage_bytes : Compressed usage of volumes in the group. compressed_snap_usage_bytes : Compressed usage of snapshots in the group. uncompressed_vol_usage_bytes : Uncompressed usage of volumes in the group. uncompressed_snap_usage_bytes : Uncompressed usage of snapshots in the group. usable_capacity_bytes : Usable capacity bytes of the group. usage : Used space of the group in bytes. raw_capacity : Total capacity of the group. usable_cache_capacity : Usable cache capacity of the group. raw_cache_capacity : Total cache capacity of the group. snap_usage_populated : Total snapshot usage as if each snapshot is deep copy of the volume. pending_deletes : Usage for blocks that are not yet deleted. num_connections : Number of connections to the group. vol_compression_ratio : Compression ratio of volumes in the group. snap_compression_ratio : Compression ratio of snapshots in the group. compression_ratio : Compression savings for the group expressed as ratio. dedupe_ratio : Dedupe savings for the group expressed as ratio. clone_ratio : Clone savings for the group expressed as ratio. vol_thin_provisioning_ratio : Thin provisioning savings for volumes in the group expressed as ratio. savings_ratio : Overall savings in the group expressed as ratio. data_reduction_ratio : Space savings in the group that does not include thin-provisioning savings expressed as ratio. savings_dedupe : Space usage savings in the group due to deduplication. savings_compression : Space usage savings in the group due to compression. savings_clone : Space usage savings in the group due to cloning of volumes. savings_vol_thin_provisioning : Space usage savings in the group due to thin provisioning of volumes. savings_data_reduction : Space usage savings in the group that does not include thin-provisioning savings. savings : Overall space usage savings in the group. free_space : Free space of the pool in bytes. unused_reserve_bytes : Reserved space that is not utilized. usage_valid : Indicates whether the usage of group is valid. space_info_valid : Is space info for this group valid. version_current : Version of software running on the group. version_target : Desired software version for the group. version_rollback : Rollback software version for the group. update_state : Group update state. update_start_time : Start time of last update. update_end_time : End time of last update. update_array_names : Arrays in the group undergoing update. update_progress_msg : Group update detailed progress message. update_error_code : If the software update has failed, this indicates the error code corresponding to the failure. update_downloading : Is software update package currently downloading. update_download_error_code : If the software download has failed, this indicates the error code corresponding to the failure. update_download_start_time : Start time of last update. update_download_end_time : End time of last update. iscsi_automatic_connection_method : Is iscsi reconnection automatic. iscsi_connection_rebalancing : Does iscsi automatically rebalance connections. repl_throttled_bandwidth : Current bandwidth throttle for replication, expressed either as megabits per second or as -1 to indicate that there is no throttle. repl_throttled_bandwidth_kbps : Current bandwidth throttle for replication, expressed either as kilobits per second or as -1 to indicate that there is no throttle. repl_throttle_list : All the replication bandwidth limits on the system. volume_migration_status : Status of data migration activity related to volumes being relocated to different pools. array_unassign_migration_status : Data migration status for arrays being removed from their pool. data_rebalance_status : Status of data rebalancing operations for pools in the group. scsi_vendor_id : SCSI vendor ID. encryption_config : How encryption is configured for this group. last_login : Time and user of last login to this group. num_snaps : Number of snapshots in the group. num_snapcolls : Number of snapshot collections in this group. date : Unix epoch time local to the group. login_banner_message : The message for the login banner that is displayed during user login activity. login_banner_after_auth : Should the banner be displayed before the user credentials are prompted or after prompting the user credentials. login_banner_reset : This will reset the banner to the version of the installed NOS. When login_banner_after_auth is specified, login_banner_reset can not be set to true. snap_retn_meter_high : Threshold for considering a volume as high retention. snap_retn_meter_very_high : Threshold for considering a volume as very high retention.","title":"Group"},{"location":"api/groups.html#reboot","text":"| reboot(**kwargs) Reboot all arrays in the group. Parameters id : ID of the group to reboot. job_timeout : Job timeout in seconds.","title":"reboot"},{"location":"api/groups.html#halt","text":"| halt(**kwargs) Halt all arrays in the group. Parameters id : ID of the group to halt. force : Halt remaining arrays when one or more is unreachable. job_timeout : Job timeout in seconds.","title":"halt"},{"location":"api/groups.html#test_alert","text":"| test_alert(level, **kwargs) Generate a test alert. Parameters id : ID of the group. level : Level of the test alert.","title":"test_alert"},{"location":"api/groups.html#software_update_precheck","text":"| software_update_precheck(**kwargs) Run software update precheck. Parameters id : ID of the group. skip_precheck_mask : Flag to allow skipping certain types of prechecks.","title":"software_update_precheck"},{"location":"api/groups.html#software_update_start","text":"| software_update_start(**kwargs) Update the group software to the downloaded version. Parameters id : ID of the group. skip_start_check_mask : Flag to allow skipping certain types of checks.","title":"software_update_start"},{"location":"api/groups.html#software_download","text":"| software_download(version, **kwargs) Download software update package. Parameters id : ID of the group. version : Version string to download. force : Flag to force download.","title":"software_download"},{"location":"api/groups.html#software_cancel_download","text":"| software_cancel_download(**kwargs) Cancel ongoing download of software. Parameters id : ID of the group.","title":"software_cancel_download"},{"location":"api/groups.html#software_update_resume","text":"| software_update_resume(**kwargs) Resume stopped software update. Parameters id : ID of the group.","title":"software_update_resume"},{"location":"api/groups.html#get_group_discovered_list","text":"| get_group_discovered_list(**kwargs) Get list of discovered groups with arrays that are initialized. Parameters id : ID of the group. group_name : Name of the group requested to be discovered.","title":"get_group_discovered_list"},{"location":"api/groups.html#validate_merge","text":"| validate_merge(src_group_ip, src_group_name, src_password, src_username, **kwargs) Perform group merge validation. Parameters id : ID of the group. src_group_name : Name of the source group. src_group_ip : IP address of the source group. src_username : Username of the source group. src_password : Password of the source group. src_passphrase : Source group encryption passphrase. skip_secondary_mgmt_ip : Skip check for secondary management IP address.","title":"validate_merge"},{"location":"api/groups.html#merge","text":"| merge(src_group_ip, src_group_name, src_password, src_username, **kwargs) Perform group merge with the specified group. Parameters id : ID of the group. src_group_name : Name of the source group. src_group_ip : IP address of the source group. src_username : Username of the source group. src_password : Password of the source group. src_passphrase : Source group encryption passphrase. force : Ignore warnings and forcibly merge specified group with this group. skip_secondary_mgmt_ip : Skip check for secondary management IP address. job_timeout : Job timeout in seconds.","title":"merge"},{"location":"api/groups.html#get_eula","text":"| get_eula(**kwargs) Get URL to download EULA contents. Parameters id : ID of the group. locale : Locale of EULA contents. Default is en. format : Format of EULA contents. Default is HTML. phase : Phase of EULA contents. Default is setup. force : Flag to force EULA.","title":"get_eula"},{"location":"api/groups.html#check_migrate","text":"| check_migrate(**kwargs) Check if the group Management Service can be migrated to the group Management Service backup array. Parameters id : ID of the group.","title":"check_migrate"},{"location":"api/groups.html#migrate","text":"| migrate(**kwargs) Migrate the group Management Service to the current group Management Service backup array. Parameters id : ID of the group.","title":"migrate"},{"location":"api/groups.html#get_timezone_list","text":"| get_timezone_list(**kwargs) Get list of group timezones. Parameters id : ID of the group.","title":"get_timezone_list"},{"location":"api/groups.html#grouplist","text":"class GroupList(Collection)","title":"GroupList"},{"location":"api/groups.html#reboot_1","text":"| reboot(id, **kwargs) Reboot all arrays in the group. Parameters id : ID of the group to reboot. job_timeout : Job timeout in seconds.","title":"reboot"},{"location":"api/groups.html#halt_1","text":"| halt(id, **kwargs) Halt all arrays in the group. Parameters id : ID of the group to halt. force : Halt remaining arrays when one or more is unreachable. job_timeout : Job timeout in seconds.","title":"halt"},{"location":"api/groups.html#test_alert_1","text":"| test_alert(id, level, **kwargs) Generate a test alert. Parameters id : ID of the group. level : Level of the test alert.","title":"test_alert"},{"location":"api/groups.html#software_update_precheck_1","text":"| software_update_precheck(id, **kwargs) Run software update precheck. Parameters id : ID of the group. skip_precheck_mask : Flag to allow skipping certain types of prechecks.","title":"software_update_precheck"},{"location":"api/groups.html#software_update_start_1","text":"| software_update_start(id, **kwargs) Update the group software to the downloaded version. Parameters id : ID of the group. skip_start_check_mask : Flag to allow skipping certain types of checks.","title":"software_update_start"},{"location":"api/groups.html#software_download_1","text":"| software_download(id, version, **kwargs) Download software update package. Parameters id : ID of the group. version : Version string to download. force : Flag to force download.","title":"software_download"},{"location":"api/groups.html#software_cancel_download_1","text":"| software_cancel_download(id, **kwargs) Cancel ongoing download of software. Parameters id : ID of the group.","title":"software_cancel_download"},{"location":"api/groups.html#software_update_resume_1","text":"| software_update_resume(id, **kwargs) Resume stopped software update. Parameters id : ID of the group.","title":"software_update_resume"},{"location":"api/groups.html#get_group_discovered_list_1","text":"| get_group_discovered_list(id, **kwargs) Get list of discovered groups with arrays that are initialized. Parameters id : ID of the group. group_name : Name of the group requested to be discovered.","title":"get_group_discovered_list"},{"location":"api/groups.html#validate_merge_1","text":"| validate_merge(id, src_group_ip, src_group_name, src_password, src_username, **kwargs) Perform group merge validation. Parameters id : ID of the group. src_group_name : Name of the source group. src_group_ip : IP address of the source group. src_username : Username of the source group. src_password : Password of the source group. src_passphrase : Source group encryption passphrase. skip_secondary_mgmt_ip : Skip check for secondary management IP address.","title":"validate_merge"},{"location":"api/groups.html#merge_1","text":"| merge(id, src_group_ip, src_group_name, src_password, src_username, **kwargs) Perform group merge with the specified group. Parameters id : ID of the group. src_group_name : Name of the source group. src_group_ip : IP address of the source group. src_username : Username of the source group. src_password : Password of the source group. src_passphrase : Source group encryption passphrase. force : Ignore warnings and forcibly merge specified group with this group. skip_secondary_mgmt_ip : Skip check for secondary management IP address. job_timeout : Job timeout in seconds.","title":"merge"},{"location":"api/groups.html#get_eula_1","text":"| get_eula(id, **kwargs) Get URL to download EULA contents. Parameters id : ID of the group. locale : Locale of EULA contents. Default is en. format : Format of EULA contents. Default is HTML. phase : Phase of EULA contents. Default is setup. force : Flag to force EULA.","title":"get_eula"},{"location":"api/groups.html#check_migrate_1","text":"| check_migrate(id, **kwargs) Check if the group Management Service can be migrated to the group Management Service backup array. Parameters id : ID of the group.","title":"check_migrate"},{"location":"api/groups.html#migrate_1","text":"| migrate(id, **kwargs) Migrate the group Management Service to the current group Management Service backup array. Parameters id : ID of the group.","title":"migrate"},{"location":"api/groups.html#get_timezone_list_1","text":"| get_timezone_list(id, **kwargs) Get list of group timezones. Parameters id : ID of the group.","title":"get_timezone_list"},{"location":"api/initiator_groups.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.initiator_groups InitiatorGroup suggest_lun validate_lun InitiatorGroupList suggest_lun validate_lun nimbleclient.v1.api.initiator_groups \u00b6 InitiatorGroup \u00b6 class InitiatorGroup(Resource) Manage initiator groups for initiator authentication. An initiator group is a set of initiators that can be configured as part of your ACL to access a specific volume through group membership. Parameters id : Identifier for initiator group. name : Name of initiator group. full_name : Initiator group's full name. search_name : Initiator group name used for search. description : Text description of initiator group. access_protocol : Initiator group access protocol. host_type : Initiator group host type. Available options are auto and hpux. The default option is auto. This attribute will be applied to all the initiators in the initiator group. Initiators with different host OSes should not be kept in the same initiator group having a non-default host type attribute. fc_tdz_ports : List of target Fibre Channel ports with Target Driven Zoning configured on this initiator group. target_subnets : List of target subnet labels. If specified, discovery and access to volumes will be restricted to the specified subnets. iscsi_initiators : List of iSCSI initiators. When create/update iscsi_initiators, either iqn or ip_address is always required with label. fc_initiators : List of FC initiators. When create/update fc_initiators, wwpn is required. creation_time : Time when this initiator group was created. last_modified : Time when this initiator group was last modified. vp_override : Flag to allow modifying VP created initiator groups. When set to true, user can add this initiator to a VP created initiator group. app_uuid : Application identifier of initiator group. volume_count : Number of volumes that are accessible by the initiator group. volume_list : List of volumes that are accessible by the initiator group. num_connections : Total number of connections from initiators in the initiator group. metadata : Key-value pairs that augment an initiator group's attributes. suggest_lun \u00b6 | suggest_lun(**kwargs) Suggest an LU number for the volume and initiator group combination. Parameters id : ID of the initiator group. vol_id : ID of the volume. validate_lun \u00b6 | validate_lun(lun, **kwargs) Validate an LU number for the volume and initiator group combination. Parameters id : ID of the initiator group. vol_id : ID of the volume. lun : LU number to validate in decimal. InitiatorGroupList \u00b6 class InitiatorGroupList(Collection) suggest_lun \u00b6 | suggest_lun(id, **kwargs) Suggest an LU number for the volume and initiator group combination. Parameters id : ID of the initiator group. vol_id : ID of the volume. validate_lun \u00b6 | validate_lun(id, lun, **kwargs) Validate an LU number for the volume and initiator group combination. Parameters id : ID of the initiator group. vol_id : ID of the volume. lun : LU number to validate in decimal.","title":"initiator_groups"},{"location":"api/initiator_groups.html#table_of_contents","text":"nimbleclient.v1.api.initiator_groups InitiatorGroup suggest_lun validate_lun InitiatorGroupList suggest_lun validate_lun","title":"Table of Contents"},{"location":"api/initiator_groups.html#nimbleclientv1apiinitiator_groups","text":"","title":"nimbleclient.v1.api.initiator_groups"},{"location":"api/initiator_groups.html#initiatorgroup","text":"class InitiatorGroup(Resource) Manage initiator groups for initiator authentication. An initiator group is a set of initiators that can be configured as part of your ACL to access a specific volume through group membership. Parameters id : Identifier for initiator group. name : Name of initiator group. full_name : Initiator group's full name. search_name : Initiator group name used for search. description : Text description of initiator group. access_protocol : Initiator group access protocol. host_type : Initiator group host type. Available options are auto and hpux. The default option is auto. This attribute will be applied to all the initiators in the initiator group. Initiators with different host OSes should not be kept in the same initiator group having a non-default host type attribute. fc_tdz_ports : List of target Fibre Channel ports with Target Driven Zoning configured on this initiator group. target_subnets : List of target subnet labels. If specified, discovery and access to volumes will be restricted to the specified subnets. iscsi_initiators : List of iSCSI initiators. When create/update iscsi_initiators, either iqn or ip_address is always required with label. fc_initiators : List of FC initiators. When create/update fc_initiators, wwpn is required. creation_time : Time when this initiator group was created. last_modified : Time when this initiator group was last modified. vp_override : Flag to allow modifying VP created initiator groups. When set to true, user can add this initiator to a VP created initiator group. app_uuid : Application identifier of initiator group. volume_count : Number of volumes that are accessible by the initiator group. volume_list : List of volumes that are accessible by the initiator group. num_connections : Total number of connections from initiators in the initiator group. metadata : Key-value pairs that augment an initiator group's attributes.","title":"InitiatorGroup"},{"location":"api/initiator_groups.html#suggest_lun","text":"| suggest_lun(**kwargs) Suggest an LU number for the volume and initiator group combination. Parameters id : ID of the initiator group. vol_id : ID of the volume.","title":"suggest_lun"},{"location":"api/initiator_groups.html#validate_lun","text":"| validate_lun(lun, **kwargs) Validate an LU number for the volume and initiator group combination. Parameters id : ID of the initiator group. vol_id : ID of the volume. lun : LU number to validate in decimal.","title":"validate_lun"},{"location":"api/initiator_groups.html#initiatorgrouplist","text":"class InitiatorGroupList(Collection)","title":"InitiatorGroupList"},{"location":"api/initiator_groups.html#suggest_lun_1","text":"| suggest_lun(id, **kwargs) Suggest an LU number for the volume and initiator group combination. Parameters id : ID of the initiator group. vol_id : ID of the volume.","title":"suggest_lun"},{"location":"api/initiator_groups.html#validate_lun_1","text":"| validate_lun(id, lun, **kwargs) Validate an LU number for the volume and initiator group combination. Parameters id : ID of the initiator group. vol_id : ID of the volume. lun : LU number to validate in decimal.","title":"validate_lun"},{"location":"api/initiators.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.initiators Initiator nimbleclient.v1.api.initiators \u00b6 Initiator \u00b6 class Initiator(Resource) Manage initiators in initiator groups. An initiator group has a set of initiators that can be configured as part of your ACL to access a specific volume through group membership. Parameters id : Identifier for initiator. access_protocol : Access protocol used by the initiator. Valid values are 'iscsi' and 'fc'. initiator_group_id : Identifier of the initiator group that this initiator is assigned to. initiator_group_name : Name of the initiator group that this initiator is assigned to. label : Unique Identifier of the iSCSI initiator. Label is required when creating iSCSI initiator. iqn : IQN name of the iSCSI initiator. Each initiator IQN name must have an associated IP address specified using the 'ip_address' attribute. You can choose not to enter the IP address for an initiator if you prefer not to authenticate using both name and IP address, in this case the IP address will be returned as '*'. ip_address : IP address of the iSCSI initiator. Each initiator IP address must have an associated name specified using 'name' attribute. You can choose not to enter the name for an initiator if you prefer not to authenticate using both name and IP address, in this case the IQN name will be returned as '*'. alias : Alias of the Fibre Channel initiator. Maximum alias length is 32 characters. Each initiator alias must have an associated WWPN specified using the 'wwpn' attribute. You can choose not to enter the WWPN for an initiator when using previously saved initiator alias. chapuser_id : Identifier for the CHAP user. wwpn : WWPN (World Wide Port Name) of the Fibre Channel initiator. WWPN is required when creating a Fibre Channel initiator. Each initiator WWPN can have an associated alias specified using the 'alias' attribute. You can choose not to enter the alias for an initiator if you prefer not to assign an initiator alias. vp_override : Flag to allow modifying VP created initiator groups. When set to true, user can add this initiator to a VP created initiator group. creation_time : Time when this initiator group was created. last_modified : Time when this initiator group was last modified. override_existing_alias : Forcibly add Fibre Channel initiator to initiator group by updating or removing conflicting Fibre Channel initiator aliases.","title":"initiators"},{"location":"api/initiators.html#table_of_contents","text":"nimbleclient.v1.api.initiators Initiator","title":"Table of Contents"},{"location":"api/initiators.html#nimbleclientv1apiinitiators","text":"","title":"nimbleclient.v1.api.initiators"},{"location":"api/initiators.html#initiator","text":"class Initiator(Resource) Manage initiators in initiator groups. An initiator group has a set of initiators that can be configured as part of your ACL to access a specific volume through group membership. Parameters id : Identifier for initiator. access_protocol : Access protocol used by the initiator. Valid values are 'iscsi' and 'fc'. initiator_group_id : Identifier of the initiator group that this initiator is assigned to. initiator_group_name : Name of the initiator group that this initiator is assigned to. label : Unique Identifier of the iSCSI initiator. Label is required when creating iSCSI initiator. iqn : IQN name of the iSCSI initiator. Each initiator IQN name must have an associated IP address specified using the 'ip_address' attribute. You can choose not to enter the IP address for an initiator if you prefer not to authenticate using both name and IP address, in this case the IP address will be returned as '*'. ip_address : IP address of the iSCSI initiator. Each initiator IP address must have an associated name specified using 'name' attribute. You can choose not to enter the name for an initiator if you prefer not to authenticate using both name and IP address, in this case the IQN name will be returned as '*'. alias : Alias of the Fibre Channel initiator. Maximum alias length is 32 characters. Each initiator alias must have an associated WWPN specified using the 'wwpn' attribute. You can choose not to enter the WWPN for an initiator when using previously saved initiator alias. chapuser_id : Identifier for the CHAP user. wwpn : WWPN (World Wide Port Name) of the Fibre Channel initiator. WWPN is required when creating a Fibre Channel initiator. Each initiator WWPN can have an associated alias specified using the 'alias' attribute. You can choose not to enter the alias for an initiator if you prefer not to assign an initiator alias. vp_override : Flag to allow modifying VP created initiator groups. When set to true, user can add this initiator to a VP created initiator group. creation_time : Time when this initiator group was created. last_modified : Time when this initiator group was last modified. override_existing_alias : Forcibly add Fibre Channel initiator to initiator group by updating or removing conflicting Fibre Channel initiator aliases.","title":"Initiator"},{"location":"api/jobs.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.jobs Job nimbleclient.v1.api.jobs \u00b6 Job \u00b6 class Job(Resource) Jobs are operations in progress in the system. Parameters completion_time : Completion time of the job. creation_time : Time when this job was created. current_phase : Phase number of the job in progress. current_phase_description : Description of the current phase of the job. description : Description of the job. id : Identifier for job. name : Name of the job. last_modified : Time of the last update from the job. object_id : Identifier for object being acted upon. op_type : Type of operation. type : Job type. parent_job_id : Identifier of parent job. percent_complete : Progress of the job as a percentage. request : Original request that the job is responsible for. response : Response from the operation as the job executes. state : Status of the job. result : Result of the job. total_phases : Total number of phases of the job.","title":"jobs"},{"location":"api/jobs.html#table_of_contents","text":"nimbleclient.v1.api.jobs Job","title":"Table of Contents"},{"location":"api/jobs.html#nimbleclientv1apijobs","text":"","title":"nimbleclient.v1.api.jobs"},{"location":"api/jobs.html#job","text":"class Job(Resource) Jobs are operations in progress in the system. Parameters completion_time : Completion time of the job. creation_time : Time when this job was created. current_phase : Phase number of the job in progress. current_phase_description : Description of the current phase of the job. description : Description of the job. id : Identifier for job. name : Name of the job. last_modified : Time of the last update from the job. object_id : Identifier for object being acted upon. op_type : Type of operation. type : Job type. parent_job_id : Identifier of parent job. percent_complete : Progress of the job as a percentage. request : Original request that the job is responsible for. response : Response from the operation as the job executes. state : Status of the job. result : Result of the job. total_phases : Total number of phases of the job.","title":"Job"},{"location":"api/key_managers.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.key_managers KeyManager remove migrate_keys KeyManagerList remove migrate_keys nimbleclient.v1.api.key_managers \u00b6 KeyManager \u00b6 class KeyManager(Resource) Key Manager stores encryption keys for the array volumes / dedupe domains. Parameters id : Identifier for External Key Manager. name : Name of external key manager. description : Description of external key manager. hostname : Hostname or IP Address for the External Key Manager. port : Port number for the External Key Manager. protocol : KMIP protocol supported by External Key Manager. username : External Key Manager username. String up to 255 printable characters. password : External Key Manager user password. String up to 255 printable characters. active : Whether the given key manager is active or not. status : Connection status of a given external key manager. vendor : KMIP vendor name. remove \u00b6 | remove(**kwargs) Remove external key manager. You must migrate the keys to an inactive external key manager before removing the active key manager. If you remove the active external key manager the passphrase is used to enable the internal key manager. Parameters id : ID of the external key manager. passphrase : Passphrase used to protect the master key, required during deletion of external key manager. migrate_keys \u00b6 | migrate_keys(**kwargs) Migrate volume encryption keys from the active key manager to the destination id given in the input. After successfully migrating the encryption keys, the destination key manager is made the active key manager. Parameters id : ID of the destination external key manager. KeyManagerList \u00b6 class KeyManagerList(Collection) remove \u00b6 | remove(id, **kwargs) Remove external key manager. You must migrate the keys to an inactive external key manager before removing the active key manager. If you remove the active external key manager the passphrase is used to enable the internal key manager. Parameters id : ID of the external key manager. passphrase : Passphrase used to protect the master key, required during deletion of external key manager. migrate_keys \u00b6 | migrate_keys(id, **kwargs) Migrate volume encryption keys from the active key manager to the destination id given in the input. After successfully migrating the encryption keys, the destination key manager is made the active key manager. Parameters id : ID of the destination external key manager.","title":"key_managers"},{"location":"api/key_managers.html#table_of_contents","text":"nimbleclient.v1.api.key_managers KeyManager remove migrate_keys KeyManagerList remove migrate_keys","title":"Table of Contents"},{"location":"api/key_managers.html#nimbleclientv1apikey_managers","text":"","title":"nimbleclient.v1.api.key_managers"},{"location":"api/key_managers.html#keymanager","text":"class KeyManager(Resource) Key Manager stores encryption keys for the array volumes / dedupe domains. Parameters id : Identifier for External Key Manager. name : Name of external key manager. description : Description of external key manager. hostname : Hostname or IP Address for the External Key Manager. port : Port number for the External Key Manager. protocol : KMIP protocol supported by External Key Manager. username : External Key Manager username. String up to 255 printable characters. password : External Key Manager user password. String up to 255 printable characters. active : Whether the given key manager is active or not. status : Connection status of a given external key manager. vendor : KMIP vendor name.","title":"KeyManager"},{"location":"api/key_managers.html#remove","text":"| remove(**kwargs) Remove external key manager. You must migrate the keys to an inactive external key manager before removing the active key manager. If you remove the active external key manager the passphrase is used to enable the internal key manager. Parameters id : ID of the external key manager. passphrase : Passphrase used to protect the master key, required during deletion of external key manager.","title":"remove"},{"location":"api/key_managers.html#migrate_keys","text":"| migrate_keys(**kwargs) Migrate volume encryption keys from the active key manager to the destination id given in the input. After successfully migrating the encryption keys, the destination key manager is made the active key manager. Parameters id : ID of the destination external key manager.","title":"migrate_keys"},{"location":"api/key_managers.html#keymanagerlist","text":"class KeyManagerList(Collection)","title":"KeyManagerList"},{"location":"api/key_managers.html#remove_1","text":"| remove(id, **kwargs) Remove external key manager. You must migrate the keys to an inactive external key manager before removing the active key manager. If you remove the active external key manager the passphrase is used to enable the internal key manager. Parameters id : ID of the external key manager. passphrase : Passphrase used to protect the master key, required during deletion of external key manager.","title":"remove"},{"location":"api/key_managers.html#migrate_keys_1","text":"| migrate_keys(id, **kwargs) Migrate volume encryption keys from the active key manager to the destination id given in the input. After successfully migrating the encryption keys, the destination key manager is made the active key manager. Parameters id : ID of the destination external key manager.","title":"migrate_keys"},{"location":"api/ldap_domains.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.ldap_domains LdapDomain test_user test_group report_status LdapDomainList test_user test_group report_status nimbleclient.v1.api.ldap_domains \u00b6 LdapDomain \u00b6 class LdapDomain(Resource) Manages the storage array's membership with LDAP servers. Parameters id : Identifier for the LDAP Domain. domain_name : Domain name. domain_description : Description of the domain. domain_enabled : Indicates whether the LDAP domain is currently active or not. server_uri_list : A set of up to 3 LDAP URIs. bind_user : Full Distinguished Name of LDAP admin user. If empty, attempt to bind anonymously. bind_password : Password for the Full Distinguished Name of LDAP admin user. This parameter is mandatory if the bind_user is given. base_dn : The Distinguished Name of the base object from which to start all searches. user_search_filter : Limit the results returned based on specific search criteria. user_search_base_list : A set of upto 10 Relative Distinguished Names, relative to the Base DN, from which to search for User objects. group_search_filter : Limit the results returned based on specific search criteria. group_search_base_list : A set of upto 10 Relative Distinguished Names, relative to the Base DN, from which to search for Group objects. schema_type : Enum values are OpenLDAP or AD. test_user \u00b6 | test_user(user, **kwargs) Tests whether the user exist in the given LDAP Domain. Parameters id : Unique identifier for the LDAP Domain. user : Name of the LDAP Domain user. test_group \u00b6 | test_group(group, **kwargs) Tests whether the user group exist in the given LDAP Domain. Parameters id : Unique identifier for the LDAP Domain. group : Name of the group. report_status \u00b6 | report_status(**kwargs) Reports the LDAP connectivity status of the given LDAP ID. Parameters id : Unique identifier for the LDAP Domain. LdapDomainList \u00b6 class LdapDomainList(Collection) test_user \u00b6 | test_user(id, user, **kwargs) Tests whether the user exist in the given LDAP Domain. Parameters id : Unique identifier for the LDAP Domain. user : Name of the LDAP Domain user. test_group \u00b6 | test_group(id, group, **kwargs) Tests whether the user group exist in the given LDAP Domain. Parameters id : Unique identifier for the LDAP Domain. group : Name of the group. report_status \u00b6 | report_status(id, **kwargs) Reports the LDAP connectivity status of the given LDAP ID. Parameters id : Unique identifier for the LDAP Domain.","title":"ldap_domains"},{"location":"api/ldap_domains.html#table_of_contents","text":"nimbleclient.v1.api.ldap_domains LdapDomain test_user test_group report_status LdapDomainList test_user test_group report_status","title":"Table of Contents"},{"location":"api/ldap_domains.html#nimbleclientv1apildap_domains","text":"","title":"nimbleclient.v1.api.ldap_domains"},{"location":"api/ldap_domains.html#ldapdomain","text":"class LdapDomain(Resource) Manages the storage array's membership with LDAP servers. Parameters id : Identifier for the LDAP Domain. domain_name : Domain name. domain_description : Description of the domain. domain_enabled : Indicates whether the LDAP domain is currently active or not. server_uri_list : A set of up to 3 LDAP URIs. bind_user : Full Distinguished Name of LDAP admin user. If empty, attempt to bind anonymously. bind_password : Password for the Full Distinguished Name of LDAP admin user. This parameter is mandatory if the bind_user is given. base_dn : The Distinguished Name of the base object from which to start all searches. user_search_filter : Limit the results returned based on specific search criteria. user_search_base_list : A set of upto 10 Relative Distinguished Names, relative to the Base DN, from which to search for User objects. group_search_filter : Limit the results returned based on specific search criteria. group_search_base_list : A set of upto 10 Relative Distinguished Names, relative to the Base DN, from which to search for Group objects. schema_type : Enum values are OpenLDAP or AD.","title":"LdapDomain"},{"location":"api/ldap_domains.html#test_user","text":"| test_user(user, **kwargs) Tests whether the user exist in the given LDAP Domain. Parameters id : Unique identifier for the LDAP Domain. user : Name of the LDAP Domain user.","title":"test_user"},{"location":"api/ldap_domains.html#test_group","text":"| test_group(group, **kwargs) Tests whether the user group exist in the given LDAP Domain. Parameters id : Unique identifier for the LDAP Domain. group : Name of the group.","title":"test_group"},{"location":"api/ldap_domains.html#report_status","text":"| report_status(**kwargs) Reports the LDAP connectivity status of the given LDAP ID. Parameters id : Unique identifier for the LDAP Domain.","title":"report_status"},{"location":"api/ldap_domains.html#ldapdomainlist","text":"class LdapDomainList(Collection)","title":"LdapDomainList"},{"location":"api/ldap_domains.html#test_user_1","text":"| test_user(id, user, **kwargs) Tests whether the user exist in the given LDAP Domain. Parameters id : Unique identifier for the LDAP Domain. user : Name of the LDAP Domain user.","title":"test_user"},{"location":"api/ldap_domains.html#test_group_1","text":"| test_group(id, group, **kwargs) Tests whether the user group exist in the given LDAP Domain. Parameters id : Unique identifier for the LDAP Domain. group : Name of the group.","title":"test_group"},{"location":"api/ldap_domains.html#report_status_1","text":"| report_status(id, **kwargs) Reports the LDAP connectivity status of the given LDAP ID. Parameters id : Unique identifier for the LDAP Domain.","title":"report_status"},{"location":"api/master_key.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.master_key MasterKey purge_inactive MasterKeyList purge_inactive nimbleclient.v1.api.master_key \u00b6 MasterKey \u00b6 class MasterKey(Resource) Manage the master key. Data encryption keys for volumes are encrypted by using a master key that must be initialized before encrypted volumes can be created. The master key in turn is protected by a passphrase that is set when the master key is created. The passphrase may have to be entered to enable the master key when it is not available, for example, after an array reboot. Parameters id : Identifier of the master key. name : Name of the master key. The only allowed value is \"default\". passphrase : Passphrase used to protect the master key, required during creation, enabling/disabling the key and change the passphrase to a new value. halfkey : When changing the passphrase, this authenticates the change operation, for support use only. new_passphrase : When changing the passphrase, this attribute specifies the new value of the passphrase. active : Whether the master key is active or not. purge_age : Default minimum age (in hours) of inactive encryption keys to be purged. '0' indicates to purge keys immediately. purge_inactive \u00b6 | purge_inactive(**kwargs) Purges encryption keys that have been inactive for the age or longer. If you do not specify an age, the keys will be purged immediately. Parameters id : Identifier for the master key. age : Minimum age (in hours) of inactive encryption keys to be purged. '0' indicates to purge the keys immediately. MasterKeyList \u00b6 class MasterKeyList(Collection) purge_inactive \u00b6 | purge_inactive(id, **kwargs) Purges encryption keys that have been inactive for the age or longer. If you do not specify an age, the keys will be purged immediately. Parameters id : Identifier for the master key. age : Minimum age (in hours) of inactive encryption keys to be purged. '0' indicates to purge the keys immediately.","title":"master_key"},{"location":"api/master_key.html#table_of_contents","text":"nimbleclient.v1.api.master_key MasterKey purge_inactive MasterKeyList purge_inactive","title":"Table of Contents"},{"location":"api/master_key.html#nimbleclientv1apimaster_key","text":"","title":"nimbleclient.v1.api.master_key"},{"location":"api/master_key.html#masterkey","text":"class MasterKey(Resource) Manage the master key. Data encryption keys for volumes are encrypted by using a master key that must be initialized before encrypted volumes can be created. The master key in turn is protected by a passphrase that is set when the master key is created. The passphrase may have to be entered to enable the master key when it is not available, for example, after an array reboot. Parameters id : Identifier of the master key. name : Name of the master key. The only allowed value is \"default\". passphrase : Passphrase used to protect the master key, required during creation, enabling/disabling the key and change the passphrase to a new value. halfkey : When changing the passphrase, this authenticates the change operation, for support use only. new_passphrase : When changing the passphrase, this attribute specifies the new value of the passphrase. active : Whether the master key is active or not. purge_age : Default minimum age (in hours) of inactive encryption keys to be purged. '0' indicates to purge keys immediately.","title":"MasterKey"},{"location":"api/master_key.html#purge_inactive","text":"| purge_inactive(**kwargs) Purges encryption keys that have been inactive for the age or longer. If you do not specify an age, the keys will be purged immediately. Parameters id : Identifier for the master key. age : Minimum age (in hours) of inactive encryption keys to be purged. '0' indicates to purge the keys immediately.","title":"purge_inactive"},{"location":"api/master_key.html#masterkeylist","text":"class MasterKeyList(Collection)","title":"MasterKeyList"},{"location":"api/master_key.html#purge_inactive_1","text":"| purge_inactive(id, **kwargs) Purges encryption keys that have been inactive for the age or longer. If you do not specify an age, the keys will be purged immediately. Parameters id : Identifier for the master key. age : Minimum age (in hours) of inactive encryption keys to be purged. '0' indicates to purge the keys immediately.","title":"purge_inactive"},{"location":"api/network_configs.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.network_configs NetworkConfig activate_netconfig validate_netconfig NetworkConfigList activate_netconfig validate_netconfig nimbleclient.v1.api.network_configs \u00b6 NetworkConfig \u00b6 class NetworkConfig(Resource) Manage group wide network configuration. The three possible network configurations include active, backup and an optional draft configuration. Parameters id : Identifier for network configuration. name : Name of the network configuration. Use the name 'draft' when creating a draft configuration. mgmt_ip : Management IP address for the Group. secondary_mgmt_ip : Secondary management IP address for the Group. role : Role of network configuration. iscsi_automatic_connection_method : Whether automatic connection method is enabled. Enabling this means means redirecting connections from the specified iSCSI discovery IP address to the best data IP address based on connection counts. iscsi_connection_rebalancing : Whether rebalancing is enabled. Enabling this means rebalancing iSCSI connections by periodically breaking existing connections that are out-of-balance, allowing the host to reconnect to a more appropriate data IP address. route_list : List of static routes. subnet_list : List of subnet configs. array_list : List of array network configs. group_leader_array : Name of the group leader array. creation_time : Time when this net configuration was created. last_modified : Time when this network configuration was last modified. active_since : Start time of activity. last_active : Time of last activity. ignore_validation_mask : Indicates whether to ignore the validation. activate_netconfig \u00b6 | activate_netconfig(ignore_validation_mask, **kwargs) Activate a network configuration. Parameters id : ID of the netconfig to activate. ignore_validation_mask : Whether to ignore validation or not. validate_netconfig \u00b6 | validate_netconfig(ignore_validation_mask, **kwargs) Validate a network configuration. Parameters id : ID of the netconfig to validate. ignore_validation_mask : Whether to ignore validation or not. NetworkConfigList \u00b6 class NetworkConfigList(Collection) activate_netconfig \u00b6 | activate_netconfig(id, ignore_validation_mask, **kwargs) Activate a network configuration. Parameters id : ID of the netconfig to activate. ignore_validation_mask : Whether to ignore validation or not. validate_netconfig \u00b6 | validate_netconfig(id, ignore_validation_mask, **kwargs) Validate a network configuration. Parameters id : ID of the netconfig to validate. ignore_validation_mask : Whether to ignore validation or not.","title":"network_configs"},{"location":"api/network_configs.html#table_of_contents","text":"nimbleclient.v1.api.network_configs NetworkConfig activate_netconfig validate_netconfig NetworkConfigList activate_netconfig validate_netconfig","title":"Table of Contents"},{"location":"api/network_configs.html#nimbleclientv1apinetwork_configs","text":"","title":"nimbleclient.v1.api.network_configs"},{"location":"api/network_configs.html#networkconfig","text":"class NetworkConfig(Resource) Manage group wide network configuration. The three possible network configurations include active, backup and an optional draft configuration. Parameters id : Identifier for network configuration. name : Name of the network configuration. Use the name 'draft' when creating a draft configuration. mgmt_ip : Management IP address for the Group. secondary_mgmt_ip : Secondary management IP address for the Group. role : Role of network configuration. iscsi_automatic_connection_method : Whether automatic connection method is enabled. Enabling this means means redirecting connections from the specified iSCSI discovery IP address to the best data IP address based on connection counts. iscsi_connection_rebalancing : Whether rebalancing is enabled. Enabling this means rebalancing iSCSI connections by periodically breaking existing connections that are out-of-balance, allowing the host to reconnect to a more appropriate data IP address. route_list : List of static routes. subnet_list : List of subnet configs. array_list : List of array network configs. group_leader_array : Name of the group leader array. creation_time : Time when this net configuration was created. last_modified : Time when this network configuration was last modified. active_since : Start time of activity. last_active : Time of last activity. ignore_validation_mask : Indicates whether to ignore the validation.","title":"NetworkConfig"},{"location":"api/network_configs.html#activate_netconfig","text":"| activate_netconfig(ignore_validation_mask, **kwargs) Activate a network configuration. Parameters id : ID of the netconfig to activate. ignore_validation_mask : Whether to ignore validation or not.","title":"activate_netconfig"},{"location":"api/network_configs.html#validate_netconfig","text":"| validate_netconfig(ignore_validation_mask, **kwargs) Validate a network configuration. Parameters id : ID of the netconfig to validate. ignore_validation_mask : Whether to ignore validation or not.","title":"validate_netconfig"},{"location":"api/network_configs.html#networkconfiglist","text":"class NetworkConfigList(Collection)","title":"NetworkConfigList"},{"location":"api/network_configs.html#activate_netconfig_1","text":"| activate_netconfig(id, ignore_validation_mask, **kwargs) Activate a network configuration. Parameters id : ID of the netconfig to activate. ignore_validation_mask : Whether to ignore validation or not.","title":"activate_netconfig"},{"location":"api/network_configs.html#validate_netconfig_1","text":"| validate_netconfig(id, ignore_validation_mask, **kwargs) Validate a network configuration. Parameters id : ID of the netconfig to validate. ignore_validation_mask : Whether to ignore validation or not.","title":"validate_netconfig"},{"location":"api/network_interfaces.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.network_interfaces NetworkInterface nimbleclient.v1.api.network_interfaces \u00b6 NetworkInterface \u00b6 class NetworkInterface(Resource) Manage per array network interface configuration. Parameters id : Identifier for the interface. array_name_or_serial : Name or serial of the array where the interface is hosted. partial_response_ok : Indicate that it is ok to provide partially available response. array_id : Identifier for the array. controller_name : Name (A or B) of the controller where the interface is hosted. controller_id : Identifier of the controller where the interface is hosted. name : Name of the interface. mac : MAC address of the interface. is_present : Whether this interface is present on this controller. link_speed : Speed of the link. link_status : Status of the link. mtu : MTU on the link. port : Port number for this interface. slot : Slot number for this interface. max_link_speed : Maximum speed of the link. nic_type : Interface type. ip_list : List of IP addresses assigned to this network interface.","title":"network_interfaces"},{"location":"api/network_interfaces.html#table_of_contents","text":"nimbleclient.v1.api.network_interfaces NetworkInterface","title":"Table of Contents"},{"location":"api/network_interfaces.html#nimbleclientv1apinetwork_interfaces","text":"","title":"nimbleclient.v1.api.network_interfaces"},{"location":"api/network_interfaces.html#networkinterface","text":"class NetworkInterface(Resource) Manage per array network interface configuration. Parameters id : Identifier for the interface. array_name_or_serial : Name or serial of the array where the interface is hosted. partial_response_ok : Indicate that it is ok to provide partially available response. array_id : Identifier for the array. controller_name : Name (A or B) of the controller where the interface is hosted. controller_id : Identifier of the controller where the interface is hosted. name : Name of the interface. mac : MAC address of the interface. is_present : Whether this interface is present on this controller. link_speed : Speed of the link. link_status : Status of the link. mtu : MTU on the link. port : Port number for this interface. slot : Slot number for this interface. max_link_speed : Maximum speed of the link. nic_type : Interface type. ip_list : List of IP addresses assigned to this network interface.","title":"NetworkInterface"},{"location":"api/performance_policies.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.performance_policies PerformancePolicy nimbleclient.v1.api.performance_policies \u00b6 PerformancePolicy \u00b6 class PerformancePolicy(Resource) Manage performance policies. A performance policy is a set of optimizations including block size, compression, and caching, to ensure that the volume's performance is the best configuration for its intended use like databases or log files. By default, a volume uses the \\\"default\\\" performance policy, which is set to use 4096 byte blocks with full compression and caching enabled. For replicated volumes, the same performance policy must exist on each replication partner. Parameters id : Unique Identifier for the Performance Policy. name : Name of the Performance Policy. full_name : Fully qualified name of the Performance Policy. search_name : Name of the Performance Policy used for object search. description : Description of a performance policy. block_size : Block Size in bytes to be used by the volumes created with this specific performance policy. Supported block sizes are 4096 bytes (4 KB), 8192 bytes (8 KB), 16384 bytes(16 KB), and 32768 bytes (32 KB). Block size of a performance policy cannot be changed once the performance policy is created. compress : Flag denoting if data in the associated volume should be compressed. cache : Flag denoting if data in the associated volume should be cached. cache_policy : Specifies how data of associated volume should be cached. Supports two policies, 'normal' and 'aggressive'. 'normal' policy caches data but skips in certain conditions such as sequential I/O. 'aggressive' policy will accelerate caching of all data belonging to this volume, regardless of sequentiality. space_policy : Specifies the state of the volume upon space constraint violation such as volume limit violation or volumes above their volume reserve, if the pool free space is exhausted. Supports two policies, 'offline' and 'non_writable'. app_category : Specifies the application category of the associated volume. dedupe_enabled : Specifies if dedupe is enabled for volumes created with this performance policy. deprecated : Specifies if this performance policy is deprecated. predefined : Specifies if this performance policy is predefined (read-only). creation_time : Time when the performance policy was created. last_modified : Time when the performance policy's configurations were last modified. sample_rate : Sample rate value. volume_count : Number of volumes using this performance policy. dedupe_override_pools : List of pools that override performance policy's dedupe setting.","title":"performance_policies"},{"location":"api/performance_policies.html#table_of_contents","text":"nimbleclient.v1.api.performance_policies PerformancePolicy","title":"Table of Contents"},{"location":"api/performance_policies.html#nimbleclientv1apiperformance_policies","text":"","title":"nimbleclient.v1.api.performance_policies"},{"location":"api/performance_policies.html#performancepolicy","text":"class PerformancePolicy(Resource) Manage performance policies. A performance policy is a set of optimizations including block size, compression, and caching, to ensure that the volume's performance is the best configuration for its intended use like databases or log files. By default, a volume uses the \\\"default\\\" performance policy, which is set to use 4096 byte blocks with full compression and caching enabled. For replicated volumes, the same performance policy must exist on each replication partner. Parameters id : Unique Identifier for the Performance Policy. name : Name of the Performance Policy. full_name : Fully qualified name of the Performance Policy. search_name : Name of the Performance Policy used for object search. description : Description of a performance policy. block_size : Block Size in bytes to be used by the volumes created with this specific performance policy. Supported block sizes are 4096 bytes (4 KB), 8192 bytes (8 KB), 16384 bytes(16 KB), and 32768 bytes (32 KB). Block size of a performance policy cannot be changed once the performance policy is created. compress : Flag denoting if data in the associated volume should be compressed. cache : Flag denoting if data in the associated volume should be cached. cache_policy : Specifies how data of associated volume should be cached. Supports two policies, 'normal' and 'aggressive'. 'normal' policy caches data but skips in certain conditions such as sequential I/O. 'aggressive' policy will accelerate caching of all data belonging to this volume, regardless of sequentiality. space_policy : Specifies the state of the volume upon space constraint violation such as volume limit violation or volumes above their volume reserve, if the pool free space is exhausted. Supports two policies, 'offline' and 'non_writable'. app_category : Specifies the application category of the associated volume. dedupe_enabled : Specifies if dedupe is enabled for volumes created with this performance policy. deprecated : Specifies if this performance policy is deprecated. predefined : Specifies if this performance policy is predefined (read-only). creation_time : Time when the performance policy was created. last_modified : Time when the performance policy's configurations were last modified. sample_rate : Sample rate value. volume_count : Number of volumes using this performance policy. dedupe_override_pools : List of pools that override performance policy's dedupe setting.","title":"PerformancePolicy"},{"location":"api/pools.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.pools Pool merge PoolList merge nimbleclient.v1.api.pools \u00b6 Pool \u00b6 class Pool(Resource) Manage pools. Pools are an aggregation of arrays. Parameters id : Identifier for the pool. name : Name of pool. full_name : Fully qualified name of pool. search_name : Name of pool used for object search. description : Text description of pool. creation_time : Time when this pool was created. last_modified : Time when this pool was last modified. capacity : Total storage space of the pool in bytes. usage : Used space of the pool in bytes. savings : Overall space usage savings in the pool. savings_data_reduction : Space usage savings in the pool that does not include thin-provisioning savings. savings_compression : Space usage savings in the pool due to compression. savings_dedupe : Space usage savings in the pool due to deduplication. savings_clone : Space usage savings in the pool due to cloning of volumes. savings_vol_thin_provisioning : Space usage savings in the pool due to thin provisioning of volumes. reserve : Reserved space of the pool in bytes. Sum of volume reserve in the pool. unused_reserve : Unused reserve space of the pool in bytes. free_space : Free space of the pool in bytes. cache_capacity : Total usable cache capacity of the pool in bytes. pinnable_cache_capacity : Total pinnable cache capacity of the pool in bytes. pinned_cache_capacity : Total pinned cache capacity of the pool in bytes. dedupe_capacity_bytes : The dedupe capacity of a hybrid pool. Does not apply to all-flash pools. dedupe_usage_bytes : The dedupe usage of a hybrid pool. Does not apply to all-flash pools. savings_ratio : Overall space usage savings in the pool expressed as ratio. data_reduction_ratio : Space usage savings in the pool expressed as ratio that does not include thin-provisioning savings. compression_ratio : Compression savings for the pool expressed as ratio. dedupe_ratio : Dedupe savings for the pool expressed as ratio. clone_ratio : Clone savings for the pool expressed as ratio. vol_thin_provisioning_ratio : Thin provisioning savings for volumes in the pool expressed as ratio. snapcoll_count : Snapshot collection count. snap_count : Snapshot count. array_count : Number of arrays in the pool. vol_count : Number of volumes assigned to the pool. array_list : List of arrays in the pool with detailed information. When create/update array list, only arrays' ID is required. unassigned_array_list : List of arrays being unassigned from the pool. vol_list : The list of volumes in the pool. pinned_vol_list : The list of pinned volumes in the pool. folder_list : The list of fully qualified names of folders in the pool. force : Forcibly delete the specified pool even if it contains deleted volumes whose space is being reclaimed. Forcibly remove an array from array_list via an update operation even if the array is not reachable. There should no volumes currently in the pool for the forced update operation to succeed. usage_valid : Indicates whether the usage of pool is valid. uncompressed_vol_usage_bytes : Uncompressed usage of volumes in the pool. uncompressed_snap_usage_bytes : Uncompressed usage of snapshots in the pool. all_flash : Indicate whether the pool is an all_flash pool. dedupe_capable : Indicates whether the pool is capable of hosting deduped volumes. dedupe_all_volumes_capable : Indicates whether the pool can enable dedupe by default. dedupe_all_volumes : Indicates if dedupe is enabled by default for new volumes on this pool. is_default : Indicates if this is the default pool. merge \u00b6 | merge(target_pool_id, **kwargs) Merge the specified pool into the target pool. All volumes on the specified pool are moved to the target pool and the specified pool is then deleted. All the arrays in the pool are assigned to the target pool. Parameters id : ID of the specified pool. target_pool_id : ID of the target pool. force : Forcibly merge the specified pool into target pool. PoolList \u00b6 class PoolList(Collection) merge \u00b6 | merge(id, target_pool_id, **kwargs) Merge the specified pool into the target pool. All volumes on the specified pool are moved to the target pool and the specified pool is then deleted. All the arrays in the pool are assigned to the target pool. Parameters id : ID of the specified pool. target_pool_id : ID of the target pool. force : Forcibly merge the specified pool into target pool.","title":"pools"},{"location":"api/pools.html#table_of_contents","text":"nimbleclient.v1.api.pools Pool merge PoolList merge","title":"Table of Contents"},{"location":"api/pools.html#nimbleclientv1apipools","text":"","title":"nimbleclient.v1.api.pools"},{"location":"api/pools.html#pool","text":"class Pool(Resource) Manage pools. Pools are an aggregation of arrays. Parameters id : Identifier for the pool. name : Name of pool. full_name : Fully qualified name of pool. search_name : Name of pool used for object search. description : Text description of pool. creation_time : Time when this pool was created. last_modified : Time when this pool was last modified. capacity : Total storage space of the pool in bytes. usage : Used space of the pool in bytes. savings : Overall space usage savings in the pool. savings_data_reduction : Space usage savings in the pool that does not include thin-provisioning savings. savings_compression : Space usage savings in the pool due to compression. savings_dedupe : Space usage savings in the pool due to deduplication. savings_clone : Space usage savings in the pool due to cloning of volumes. savings_vol_thin_provisioning : Space usage savings in the pool due to thin provisioning of volumes. reserve : Reserved space of the pool in bytes. Sum of volume reserve in the pool. unused_reserve : Unused reserve space of the pool in bytes. free_space : Free space of the pool in bytes. cache_capacity : Total usable cache capacity of the pool in bytes. pinnable_cache_capacity : Total pinnable cache capacity of the pool in bytes. pinned_cache_capacity : Total pinned cache capacity of the pool in bytes. dedupe_capacity_bytes : The dedupe capacity of a hybrid pool. Does not apply to all-flash pools. dedupe_usage_bytes : The dedupe usage of a hybrid pool. Does not apply to all-flash pools. savings_ratio : Overall space usage savings in the pool expressed as ratio. data_reduction_ratio : Space usage savings in the pool expressed as ratio that does not include thin-provisioning savings. compression_ratio : Compression savings for the pool expressed as ratio. dedupe_ratio : Dedupe savings for the pool expressed as ratio. clone_ratio : Clone savings for the pool expressed as ratio. vol_thin_provisioning_ratio : Thin provisioning savings for volumes in the pool expressed as ratio. snapcoll_count : Snapshot collection count. snap_count : Snapshot count. array_count : Number of arrays in the pool. vol_count : Number of volumes assigned to the pool. array_list : List of arrays in the pool with detailed information. When create/update array list, only arrays' ID is required. unassigned_array_list : List of arrays being unassigned from the pool. vol_list : The list of volumes in the pool. pinned_vol_list : The list of pinned volumes in the pool. folder_list : The list of fully qualified names of folders in the pool. force : Forcibly delete the specified pool even if it contains deleted volumes whose space is being reclaimed. Forcibly remove an array from array_list via an update operation even if the array is not reachable. There should no volumes currently in the pool for the forced update operation to succeed. usage_valid : Indicates whether the usage of pool is valid. uncompressed_vol_usage_bytes : Uncompressed usage of volumes in the pool. uncompressed_snap_usage_bytes : Uncompressed usage of snapshots in the pool. all_flash : Indicate whether the pool is an all_flash pool. dedupe_capable : Indicates whether the pool is capable of hosting deduped volumes. dedupe_all_volumes_capable : Indicates whether the pool can enable dedupe by default. dedupe_all_volumes : Indicates if dedupe is enabled by default for new volumes on this pool. is_default : Indicates if this is the default pool.","title":"Pool"},{"location":"api/pools.html#merge","text":"| merge(target_pool_id, **kwargs) Merge the specified pool into the target pool. All volumes on the specified pool are moved to the target pool and the specified pool is then deleted. All the arrays in the pool are assigned to the target pool. Parameters id : ID of the specified pool. target_pool_id : ID of the target pool. force : Forcibly merge the specified pool into target pool.","title":"merge"},{"location":"api/pools.html#poollist","text":"class PoolList(Collection)","title":"PoolList"},{"location":"api/pools.html#merge_1","text":"| merge(id, target_pool_id, **kwargs) Merge the specified pool into the target pool. All volumes on the specified pool are moved to the target pool and the specified pool is then deleted. All the arrays in the pool are assigned to the target pool. Parameters id : ID of the specified pool. target_pool_id : ID of the target pool. force : Forcibly merge the specified pool into target pool.","title":"merge"},{"location":"api/protection_schedules.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.protection_schedules ProtectionSchedule nimbleclient.v1.api.protection_schedules \u00b6 ProtectionSchedule \u00b6 class ProtectionSchedule(Resource) Manage protection schedules used in protection templates. Parameters id : Identifier for protection schedule. name : Name of snapshot schedule to create. description : Description of the schedule. volcoll_or_prottmpl_type : Type of the protection policy this schedule is attached to. Valid values are protection_template and volume_collection. volcoll_or_prottmpl_id : Identifier of the protection policy (protection_template or volume_collection) in which this protection schedule is attached to. period : Repeat interval for snapshots with respect to the period_unit. For example, a value of 2 with the 'period_unit' of 'hours' results in one snapshot every 2 hours. period_unit : Time unit over which to take the number of snapshots specified in 'period'. For example, a value of 'days' with a 'period' of '1' results in one snapshot every day. at_time : Time of day when snapshot should be taken. In case repeat frequency specifies more than one snapshot in a day then the until_time option specifies until what time of day to take snapshots. until_time : Time of day to stop taking snapshots. Applicable only when repeat frequency specifies more than one snapshot in a day. days : Specifies which days snapshots should be taken. num_retain : Number of snapshots to retain. If replication is enabled on this schedule the array will always retain the latest replicated snapshot, which may exceed the specified retention value. This is necessary to ensure efficient replication performance. downstream_partner : Specifies the partner name if snapshots created by this schedule should be replicated. downstream_partner_name : Specifies the partner name if snapshots created by this schedule should be replicated. downstream_partner_id : Specifies the partner ID if snapshots created by this schedule should be replicated. In an update operation, if snapshots should be replicated, set this attribute to the ID of the replication partner. If snapshots should not be replicated, set this attribute to the empty string. upstream_partner_name : Specifies the partner name from which snapshots created by this schedule are replicated. upstream_partner_id : Specifies the partner ID from which snapshots created by this schedule are replicated. replicate_every : Specifies which snapshots should be replicated. If snapshots are replicated and this option is not specified, every snapshot is replicated. num_retain_replica : Number of snapshots to retain on the replica. repl_alert_thres : Replication alert threshold in seconds. If the replication of a snapshot takes more than this amount of time to complete an alert will be generated. Enter 0 to disable this alert. snap_verify : Run verification tool on snapshot created by this schedule. This option can only be used with snapshot schedules of a protection template that has application synchronization. The tool used to verify snapshot depends on the type of application. For example, if application synchronization is VSS and the application ID is Exchange, eseutil tool is run on the snapshots. If verification fails, the logs are not truncated. skip_db_consistency_check : Skip consistency check for database files on snapshots created by this schedule. This option only applies to snapshot schedules of a protection template with application synchronization set to VSS, application ID set to MS Exchange 2010 or later w/DAG, this schedule's snap_verify option set to yes, and its disable_appsync option set to false. Skipping consistency checks is only recommended if each database in a DAG has multiple copies. disable_appsync : Disables application synchronized snapshots and creates crash consistent snapshots instead. schedule_type : Normal schedules have internal timers which drive snapshot creation. An externally driven schedule has no internal timers. All snapshot activity is driven by an external trigger. In other words, these schedules are used only for externally driven manual snapshots. active : A schedule is active only if it is owned by the same owner as the volume collection. Only active schedules of a volume collection participate in the creation of snapshots and replication. creation_time : Time when this protection schedule was created. last_modified : Time when this protection schedule was last modified. last_mod_sched_time : Time when the timing of the protection schedule was last modified. last_replicated_snapcoll_name : Specifies the name of last replicated snapshot collection. last_replicated_snapcoll_id : Specifies the snapshot collection ID of last replicated snapshot collection. last_replicated_at_time : Time when last snapshot collection was replicated. last_snap_time : Time when last snapshot was taken. next_snap_time : Time when next snapshot will be taken. next_repl_snap_time : Time when next snapshot will be replicated. snap_counter : This is only used by custom read handler for internal calculations. sched_owner_id : Identifier of the group that owns this schedule. sched_owner_name : Name of the group that owns this schedule. last_config_change_time : The last timing configutation changed. currently_replicating_snapcoll_name : The name of the currently replicating snapshot collection if one exists, the empty string otherwise. vol_status_list : The list of the replication status of volumes undergoing replication. sync_repl_vol_status_list : A list of the replication status of volumes undergoing synchronous replication. use_downstream_for_DR : Break synchronous replication for the specified volume collection and present downstream volumes to host(s). Downstream volumes in the volume collection will be set to online and presented to the host(s) using new serial and LUN numbers. No changes will be made to the upstream volumes, their serial and LUN numbers, and their online state. The existing ACLs on the upstream volumes will be copied to the downstream volumes. Use this in conjunction with an empty downstream_partner_id. This unconfigures synchronous replication when the partner is removed from the last replicating schedule in the specified volume collection and presents the downstream volumes to host(s). Host(s) will need to be configured to access the new volumes with the newly assigned serial and LUN numbers. Use this option to expose downstream volumes in a synchronously replicated volume collection to host(s) only when the upstream partner is confirmed to be down and there is no communication between partners. Do not execute this operation if a previous Group Management Service takeover has been performed on a different array. Do not perform a subsequent Group Management Service takeover on a different array as it will lead to irreconcilable conflicts. This limitation is cleared once the Group management service backup array has successfully synchronized after reconnection.","title":"protection_schedules"},{"location":"api/protection_schedules.html#table_of_contents","text":"nimbleclient.v1.api.protection_schedules ProtectionSchedule","title":"Table of Contents"},{"location":"api/protection_schedules.html#nimbleclientv1apiprotection_schedules","text":"","title":"nimbleclient.v1.api.protection_schedules"},{"location":"api/protection_schedules.html#protectionschedule","text":"class ProtectionSchedule(Resource) Manage protection schedules used in protection templates. Parameters id : Identifier for protection schedule. name : Name of snapshot schedule to create. description : Description of the schedule. volcoll_or_prottmpl_type : Type of the protection policy this schedule is attached to. Valid values are protection_template and volume_collection. volcoll_or_prottmpl_id : Identifier of the protection policy (protection_template or volume_collection) in which this protection schedule is attached to. period : Repeat interval for snapshots with respect to the period_unit. For example, a value of 2 with the 'period_unit' of 'hours' results in one snapshot every 2 hours. period_unit : Time unit over which to take the number of snapshots specified in 'period'. For example, a value of 'days' with a 'period' of '1' results in one snapshot every day. at_time : Time of day when snapshot should be taken. In case repeat frequency specifies more than one snapshot in a day then the until_time option specifies until what time of day to take snapshots. until_time : Time of day to stop taking snapshots. Applicable only when repeat frequency specifies more than one snapshot in a day. days : Specifies which days snapshots should be taken. num_retain : Number of snapshots to retain. If replication is enabled on this schedule the array will always retain the latest replicated snapshot, which may exceed the specified retention value. This is necessary to ensure efficient replication performance. downstream_partner : Specifies the partner name if snapshots created by this schedule should be replicated. downstream_partner_name : Specifies the partner name if snapshots created by this schedule should be replicated. downstream_partner_id : Specifies the partner ID if snapshots created by this schedule should be replicated. In an update operation, if snapshots should be replicated, set this attribute to the ID of the replication partner. If snapshots should not be replicated, set this attribute to the empty string. upstream_partner_name : Specifies the partner name from which snapshots created by this schedule are replicated. upstream_partner_id : Specifies the partner ID from which snapshots created by this schedule are replicated. replicate_every : Specifies which snapshots should be replicated. If snapshots are replicated and this option is not specified, every snapshot is replicated. num_retain_replica : Number of snapshots to retain on the replica. repl_alert_thres : Replication alert threshold in seconds. If the replication of a snapshot takes more than this amount of time to complete an alert will be generated. Enter 0 to disable this alert. snap_verify : Run verification tool on snapshot created by this schedule. This option can only be used with snapshot schedules of a protection template that has application synchronization. The tool used to verify snapshot depends on the type of application. For example, if application synchronization is VSS and the application ID is Exchange, eseutil tool is run on the snapshots. If verification fails, the logs are not truncated. skip_db_consistency_check : Skip consistency check for database files on snapshots created by this schedule. This option only applies to snapshot schedules of a protection template with application synchronization set to VSS, application ID set to MS Exchange 2010 or later w/DAG, this schedule's snap_verify option set to yes, and its disable_appsync option set to false. Skipping consistency checks is only recommended if each database in a DAG has multiple copies. disable_appsync : Disables application synchronized snapshots and creates crash consistent snapshots instead. schedule_type : Normal schedules have internal timers which drive snapshot creation. An externally driven schedule has no internal timers. All snapshot activity is driven by an external trigger. In other words, these schedules are used only for externally driven manual snapshots. active : A schedule is active only if it is owned by the same owner as the volume collection. Only active schedules of a volume collection participate in the creation of snapshots and replication. creation_time : Time when this protection schedule was created. last_modified : Time when this protection schedule was last modified. last_mod_sched_time : Time when the timing of the protection schedule was last modified. last_replicated_snapcoll_name : Specifies the name of last replicated snapshot collection. last_replicated_snapcoll_id : Specifies the snapshot collection ID of last replicated snapshot collection. last_replicated_at_time : Time when last snapshot collection was replicated. last_snap_time : Time when last snapshot was taken. next_snap_time : Time when next snapshot will be taken. next_repl_snap_time : Time when next snapshot will be replicated. snap_counter : This is only used by custom read handler for internal calculations. sched_owner_id : Identifier of the group that owns this schedule. sched_owner_name : Name of the group that owns this schedule. last_config_change_time : The last timing configutation changed. currently_replicating_snapcoll_name : The name of the currently replicating snapshot collection if one exists, the empty string otherwise. vol_status_list : The list of the replication status of volumes undergoing replication. sync_repl_vol_status_list : A list of the replication status of volumes undergoing synchronous replication. use_downstream_for_DR : Break synchronous replication for the specified volume collection and present downstream volumes to host(s). Downstream volumes in the volume collection will be set to online and presented to the host(s) using new serial and LUN numbers. No changes will be made to the upstream volumes, their serial and LUN numbers, and their online state. The existing ACLs on the upstream volumes will be copied to the downstream volumes. Use this in conjunction with an empty downstream_partner_id. This unconfigures synchronous replication when the partner is removed from the last replicating schedule in the specified volume collection and presents the downstream volumes to host(s). Host(s) will need to be configured to access the new volumes with the newly assigned serial and LUN numbers. Use this option to expose downstream volumes in a synchronously replicated volume collection to host(s) only when the upstream partner is confirmed to be down and there is no communication between partners. Do not execute this operation if a previous Group Management Service takeover has been performed on a different array. Do not perform a subsequent Group Management Service takeover on a different array as it will lead to irreconcilable conflicts. This limitation is cleared once the Group management service backup array has successfully synchronized after reconnection.","title":"ProtectionSchedule"},{"location":"api/protection_templates.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.protection_templates ProtectionTemplate nimbleclient.v1.api.protection_templates \u00b6 ProtectionTemplate \u00b6 class ProtectionTemplate(Resource) Manage protection templates. Protection templates are sets of snapshot schedules, replication schedules, and retention limits that can be used to prefill the protection information when creating new volume collections. A volume collection, once created, is not affected by edits to the protection template that was used to create it. All the volumes assigned to a volume collection use the same settings. You cannot edit or delete the predefined protection templates provided by storage array, but you can create custom protection templates as needed. Parameters id : Identifier for protection template. name : User provided identifier. full_name : Fully qualified name of protection template. search_name : Name of protection template used for object search. description : Text description of protection template. repl_priority : Replication priority for the protection template with the following choices: {normal | high}. app_sync : Application synchronization ({none|vss|vmware|generic}). app_server : Application server hostname. app_id : Application ID running on the server. Application ID can only be specified if application synchronization is VSS. app_cluster_name : If the application is running within a Windows cluster environment then this is the cluster name. app_service_name : If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. vcenter_hostname : VMware vCenter hostname. Custom port number can be specified with vCenter hostname using :. vcenter_username : VMware vCenter username. vcenter_password : VMware vCenter password. agent_hostname : Generic Backup agent hostname. Custom port number can be specified with agent hostname using \\\":\\\". agent_username : Generic Backup agent username. agent_password : Generic Backup agent password. creation_time : Time when this protection template was created. last_modified : Time when this protection template was last modified. schedule_list : List of schedules for this protection policy.","title":"protection_templates"},{"location":"api/protection_templates.html#table_of_contents","text":"nimbleclient.v1.api.protection_templates ProtectionTemplate","title":"Table of Contents"},{"location":"api/protection_templates.html#nimbleclientv1apiprotection_templates","text":"","title":"nimbleclient.v1.api.protection_templates"},{"location":"api/protection_templates.html#protectiontemplate","text":"class ProtectionTemplate(Resource) Manage protection templates. Protection templates are sets of snapshot schedules, replication schedules, and retention limits that can be used to prefill the protection information when creating new volume collections. A volume collection, once created, is not affected by edits to the protection template that was used to create it. All the volumes assigned to a volume collection use the same settings. You cannot edit or delete the predefined protection templates provided by storage array, but you can create custom protection templates as needed. Parameters id : Identifier for protection template. name : User provided identifier. full_name : Fully qualified name of protection template. search_name : Name of protection template used for object search. description : Text description of protection template. repl_priority : Replication priority for the protection template with the following choices: {normal | high}. app_sync : Application synchronization ({none|vss|vmware|generic}). app_server : Application server hostname. app_id : Application ID running on the server. Application ID can only be specified if application synchronization is VSS. app_cluster_name : If the application is running within a Windows cluster environment then this is the cluster name. app_service_name : If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. vcenter_hostname : VMware vCenter hostname. Custom port number can be specified with vCenter hostname using :. vcenter_username : VMware vCenter username. vcenter_password : VMware vCenter password. agent_hostname : Generic Backup agent hostname. Custom port number can be specified with agent hostname using \\\":\\\". agent_username : Generic Backup agent username. agent_password : Generic Backup agent password. creation_time : Time when this protection template was created. last_modified : Time when this protection template was last modified. schedule_list : List of schedules for this protection policy.","title":"ProtectionTemplate"},{"location":"api/protocol_endpoints.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.protocol_endpoints ProtocolEndpoint nimbleclient.v1.api.protocol_endpoints \u00b6 ProtocolEndpoint \u00b6 class ProtocolEndpoint(Resource) Protocol endpoints are administrative logical units (LUs) in an LU conglomerate to be used with VMware Virtual Volumes. Parameters id : Identifier for the protocol endpoint. name : Name of the protocol endpoint. description : Text description of the protocol endpoint. pool_name : Name of the pool where the protocol endpoint resides. If pool option is not specified, protocol endpoint is assigned to the default pool. pool_id : Identifier associated with the pool in the storage pool table. state : Operational state of protocol endpoint. serial_number : Identifier associated with the protocol endpoint for the SCSI protocol. target_name : The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target protocol endpoint. group_specific_ids : External UID is used to compute the serial number and IQN which never change even if the running group changes (e.g. after group merge). Group-specific IDs determine whether external UID is used for computing serial number and IQN. creation_time : Time when this protocol endpoint was created. last_modified : Time when this protocol endpoint was last modified. num_connections : Number of connections via this protocol endpoint. num_iscsi_connections : Number of iSCSI connections via this protocol endpoint. num_fc_connections : Number of FC connections via this protocol endpoint. access_control_records : List of access control records that apply to this protocol endpoint. iscsi_sessions : List of iSCSI sessions connected to this protocol endpoint. fc_sessions : List of FC sessions connected to this protocol endpoint. access_protocol : Access protocol of the protocol endpoint. Only initiator groups with the same access protocol can access the protocol endpoint. If not specified in the creation request, it will be the access protocol supported by the group. If the group supports multiple protocols, the default will be Fibre Channel.","title":"protocol_endpoints"},{"location":"api/protocol_endpoints.html#table_of_contents","text":"nimbleclient.v1.api.protocol_endpoints ProtocolEndpoint","title":"Table of Contents"},{"location":"api/protocol_endpoints.html#nimbleclientv1apiprotocol_endpoints","text":"","title":"nimbleclient.v1.api.protocol_endpoints"},{"location":"api/protocol_endpoints.html#protocolendpoint","text":"class ProtocolEndpoint(Resource) Protocol endpoints are administrative logical units (LUs) in an LU conglomerate to be used with VMware Virtual Volumes. Parameters id : Identifier for the protocol endpoint. name : Name of the protocol endpoint. description : Text description of the protocol endpoint. pool_name : Name of the pool where the protocol endpoint resides. If pool option is not specified, protocol endpoint is assigned to the default pool. pool_id : Identifier associated with the pool in the storage pool table. state : Operational state of protocol endpoint. serial_number : Identifier associated with the protocol endpoint for the SCSI protocol. target_name : The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target protocol endpoint. group_specific_ids : External UID is used to compute the serial number and IQN which never change even if the running group changes (e.g. after group merge). Group-specific IDs determine whether external UID is used for computing serial number and IQN. creation_time : Time when this protocol endpoint was created. last_modified : Time when this protocol endpoint was last modified. num_connections : Number of connections via this protocol endpoint. num_iscsi_connections : Number of iSCSI connections via this protocol endpoint. num_fc_connections : Number of FC connections via this protocol endpoint. access_control_records : List of access control records that apply to this protocol endpoint. iscsi_sessions : List of iSCSI sessions connected to this protocol endpoint. fc_sessions : List of FC sessions connected to this protocol endpoint. access_protocol : Access protocol of the protocol endpoint. Only initiator groups with the same access protocol can access the protocol endpoint. If not specified in the creation request, it will be the access protocol supported by the group. If the group supports multiple protocols, the default will be Fibre Channel.","title":"ProtocolEndpoint"},{"location":"api/replication_partners.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.replication_partners ReplicationPartner pause resume test ReplicationPartnerList pause resume test nimbleclient.v1.api.replication_partners \u00b6 ReplicationPartner \u00b6 class ReplicationPartner(Resource) Manage replication partner. Replication partners let one storage array talk to another for replication purposes. The two arrays must be able to communicate over a network, and use ports 4213 and 4214. Replication partners have the same name as the remote group. Replication partners can be reciprocal, upstream (the source of replicas), or downstream (the receiver of replicas) partners. Parameters id : Identifier for a replication partner. name : Name of replication partner. full_name : Fully qualified name of replication partner. search_name : Name of replication partner used for object search. description : Description of replication partner. partner_type : Replication partner type. Possible values are group or pool. alias : Name this group uses to identify itself to this partner. secret : Replication partner shared secret, used for mutual authentication of the partners. creation_time : Time when this replication partner was created. last_modified : Time when this replication partner was last modified. control_port : Port number of partner control interface. hostname : IP address or hostname of partner interface. This must be the partner's Group Management IP address. port_range_start : For tunnel_endpoint partner types, first port available on the ssh proxy available for reverse forwarding. It must be guaranteed that the proxy has the next N ports reserved for this partner, where N is the count of DSDs in this group. This attribute is only valid for tunnel_endpoint partner type. proxy_hostname : IP address of tunnel endpoint. Only valid for tunnel_endpoint partner types. proxy_user : User to authenticate with tunnel endpoint. Only valid for tunnel_endpoint partner types. repl_hostname : IP address or hostname of partner data interface. data_port : Port number of partner data interface. is_alive : Whether the partner is available, and responding to pings. partner_group_uid : Replication partner group uid. last_keepalive_error : Most recent error while attempting to ping the partner. cfg_sync_status : Indicates whether all volumes and volume collections have been synced to the partner. last_sync_error : Most recent error seen while attempting to sync objects to the partner. array_serial : Serial number of group leader array of the partner. version : Replication version of the partner. pool_id : The pool ID where volumes replicated from this partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. pool_name : The pool name where volumes replicated from this partner will be created. folder_id : The Folder ID within the pool where volumes replicated from this partner will be created. This is not supported for pool partners. folder_name : The Folder name within the pool where volumes replicated from this partner will be created. match_folder : Indicates whether to match the upstream volume's folder on the downstream. paused : Indicates whether replication traffic from/to this partner has been halted. unique_name : Indicates whether this partner actively mangles object names to avoid name conflicts during replication. subnet_label : Label of the subnet used to replicate to this partner. subnet_type : Type of the subnet used to replicate to this partner. throttles : Throttles used while replicating from/to this partner. throttled_bandwidth : Current bandwidth throttle for this partner, expressed either as megabits per second or as the largest possible 64-bit signed integer (9223372036854775807) to indicate that there is no throttle. This attribute is superseded by throttled_bandwidth_current. throttled_bandwidth_current : Current bandwidth throttle for this partner, expressed either as megabits per second or as -1 to indicate that there is no throttle. throttled_bandwidth_kbps : Current bandwidth throttle for this partner, expressed either as kilobits per second or as the largest possible 64-bit signed integer (9223372036854775807) to indicate that there is no throttle. This attribute is superseded by throttled_bandwidth_current_kbps. throttled_bandwidth_current_kbps : Current bandwidth throttle for this partner, expressed either as kilobits per second or as -1 to indicate that there is no throttle. subnet_network : Subnet used to replicate to this partner. subnet_netmask : Subnet mask used to replicate to this partner. volume_collection_list : List of volume collections that are replicating from/to this partner. volume_collection_list_count : Count of volume collections that are replicating from/to this partner. volume_list : List of volumes that are replicating from/to this partner. volume_list_count : Count of volumes that are replicating from/to this partner. replication_direction : Direction of replication configured with this partner. pause \u00b6 | pause(**kwargs) Pause replication for the specified partner. Parameters id : ID of the partner to pause. resume \u00b6 | resume(**kwargs) Resume replication for the specified partner. Parameters id : ID of the partner to resume. test \u00b6 | test(**kwargs) Test connectivity to the specified partner. Parameters id : ID of the partner to test. ReplicationPartnerList \u00b6 class ReplicationPartnerList(Collection) pause \u00b6 | pause(id, **kwargs) Pause replication for the specified partner. Parameters id : ID of the partner to pause. resume \u00b6 | resume(id, **kwargs) Resume replication for the specified partner. Parameters id : ID of the partner to resume. test \u00b6 | test(id, **kwargs) Test connectivity to the specified partner. Parameters id : ID of the partner to test.","title":"replication_partners"},{"location":"api/replication_partners.html#table_of_contents","text":"nimbleclient.v1.api.replication_partners ReplicationPartner pause resume test ReplicationPartnerList pause resume test","title":"Table of Contents"},{"location":"api/replication_partners.html#nimbleclientv1apireplication_partners","text":"","title":"nimbleclient.v1.api.replication_partners"},{"location":"api/replication_partners.html#replicationpartner","text":"class ReplicationPartner(Resource) Manage replication partner. Replication partners let one storage array talk to another for replication purposes. The two arrays must be able to communicate over a network, and use ports 4213 and 4214. Replication partners have the same name as the remote group. Replication partners can be reciprocal, upstream (the source of replicas), or downstream (the receiver of replicas) partners. Parameters id : Identifier for a replication partner. name : Name of replication partner. full_name : Fully qualified name of replication partner. search_name : Name of replication partner used for object search. description : Description of replication partner. partner_type : Replication partner type. Possible values are group or pool. alias : Name this group uses to identify itself to this partner. secret : Replication partner shared secret, used for mutual authentication of the partners. creation_time : Time when this replication partner was created. last_modified : Time when this replication partner was last modified. control_port : Port number of partner control interface. hostname : IP address or hostname of partner interface. This must be the partner's Group Management IP address. port_range_start : For tunnel_endpoint partner types, first port available on the ssh proxy available for reverse forwarding. It must be guaranteed that the proxy has the next N ports reserved for this partner, where N is the count of DSDs in this group. This attribute is only valid for tunnel_endpoint partner type. proxy_hostname : IP address of tunnel endpoint. Only valid for tunnel_endpoint partner types. proxy_user : User to authenticate with tunnel endpoint. Only valid for tunnel_endpoint partner types. repl_hostname : IP address or hostname of partner data interface. data_port : Port number of partner data interface. is_alive : Whether the partner is available, and responding to pings. partner_group_uid : Replication partner group uid. last_keepalive_error : Most recent error while attempting to ping the partner. cfg_sync_status : Indicates whether all volumes and volume collections have been synced to the partner. last_sync_error : Most recent error seen while attempting to sync objects to the partner. array_serial : Serial number of group leader array of the partner. version : Replication version of the partner. pool_id : The pool ID where volumes replicated from this partner will be created. Replica volumes created as clones ignore this parameter and are always created in the same pool as their parent volume. pool_name : The pool name where volumes replicated from this partner will be created. folder_id : The Folder ID within the pool where volumes replicated from this partner will be created. This is not supported for pool partners. folder_name : The Folder name within the pool where volumes replicated from this partner will be created. match_folder : Indicates whether to match the upstream volume's folder on the downstream. paused : Indicates whether replication traffic from/to this partner has been halted. unique_name : Indicates whether this partner actively mangles object names to avoid name conflicts during replication. subnet_label : Label of the subnet used to replicate to this partner. subnet_type : Type of the subnet used to replicate to this partner. throttles : Throttles used while replicating from/to this partner. throttled_bandwidth : Current bandwidth throttle for this partner, expressed either as megabits per second or as the largest possible 64-bit signed integer (9223372036854775807) to indicate that there is no throttle. This attribute is superseded by throttled_bandwidth_current. throttled_bandwidth_current : Current bandwidth throttle for this partner, expressed either as megabits per second or as -1 to indicate that there is no throttle. throttled_bandwidth_kbps : Current bandwidth throttle for this partner, expressed either as kilobits per second or as the largest possible 64-bit signed integer (9223372036854775807) to indicate that there is no throttle. This attribute is superseded by throttled_bandwidth_current_kbps. throttled_bandwidth_current_kbps : Current bandwidth throttle for this partner, expressed either as kilobits per second or as -1 to indicate that there is no throttle. subnet_network : Subnet used to replicate to this partner. subnet_netmask : Subnet mask used to replicate to this partner. volume_collection_list : List of volume collections that are replicating from/to this partner. volume_collection_list_count : Count of volume collections that are replicating from/to this partner. volume_list : List of volumes that are replicating from/to this partner. volume_list_count : Count of volumes that are replicating from/to this partner. replication_direction : Direction of replication configured with this partner.","title":"ReplicationPartner"},{"location":"api/replication_partners.html#pause","text":"| pause(**kwargs) Pause replication for the specified partner. Parameters id : ID of the partner to pause.","title":"pause"},{"location":"api/replication_partners.html#resume","text":"| resume(**kwargs) Resume replication for the specified partner. Parameters id : ID of the partner to resume.","title":"resume"},{"location":"api/replication_partners.html#test","text":"| test(**kwargs) Test connectivity to the specified partner. Parameters id : ID of the partner to test.","title":"test"},{"location":"api/replication_partners.html#replicationpartnerlist","text":"class ReplicationPartnerList(Collection)","title":"ReplicationPartnerList"},{"location":"api/replication_partners.html#pause_1","text":"| pause(id, **kwargs) Pause replication for the specified partner. Parameters id : ID of the partner to pause.","title":"pause"},{"location":"api/replication_partners.html#resume_1","text":"| resume(id, **kwargs) Resume replication for the specified partner. Parameters id : ID of the partner to resume.","title":"resume"},{"location":"api/replication_partners.html#test_1","text":"| test(id, **kwargs) Test connectivity to the specified partner. Parameters id : ID of the partner to test.","title":"test"},{"location":"api/shelves.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.shelves Shelf identify evacuate ShelfList identify evacuate nimbleclient.v1.api.shelves \u00b6 Shelf \u00b6 class Shelf(Resource) Disk shelf and head unit houses disks and controller. Parameters id : ID of shelf. array_name : Name of array the shelf belongs to. array_id : ID of array the shelf belongs to. partial_response_ok : Indicate that it is okay to provide partially available response. chassis_type : Chassis type. ctrlrs : List of ctrlr info. serial : The serial number of the chassis. model : Model of the shelf or head unit. model_ext : Extended model of the shelf or head unit. chassis_sensors : List of chassis sensor readings. psu_overall_status : The overall status for the PSUs. fan_overall_status : The overall status for the fans on both controllers. temp_overall_status : The overall status for the temperature on both controllers. disk_sets : Attributes for the disk sets in this shelf. activated : Activated state for shelf or disk set means it is available to store date on. An activated shelf may not be deactivated. driveset : Driveset to activate. force : Forcibly activate shelf. accept_foreign : Accept the removal of data on the shelf disks and activate foreign shelf. accept_dedupe_impact : Accept the reduction or elimination of deduplication capability on the system as a result of activating a shelf that does not meet the necessary deduplication requirements. last_request : Indicates this is the last request in a series of shelf add requests. identify \u00b6 | identify(cid, status, **kwargs) Turn on chassis identifier for a controller. Parameters id : ID of shelf. cid : Possible values: 'A', 'B'. status : Status value of identifier to set. evacuate \u00b6 | evacuate(driveset, **kwargs) Perform shelf evacuation. Parameters id : ID of shelf. driveset : Driveset to evacuate. dry_run : Argument to perform a dry run, not the actual shelf evacuation. start : Argument to perform the shelf evacuation. cancel : Argument to cancel the shelf evacuation. pause : Argument to pause the shelf evacuation. resume : Argument to resume the shelf evacuation. ShelfList \u00b6 class ShelfList(Collection) identify \u00b6 | identify(id, cid, status, **kwargs) Turn on chassis identifier for a controller. Parameters id : ID of shelf. cid : Possible values: 'A', 'B'. status : Status value of identifier to set. evacuate \u00b6 | evacuate(id, driveset, **kwargs) Perform shelf evacuation. Parameters id : ID of shelf. driveset : Driveset to evacuate. dry_run : Argument to perform a dry run, not the actual shelf evacuation. start : Argument to perform the shelf evacuation. cancel : Argument to cancel the shelf evacuation. pause : Argument to pause the shelf evacuation. resume : Argument to resume the shelf evacuation.","title":"shelves"},{"location":"api/shelves.html#table_of_contents","text":"nimbleclient.v1.api.shelves Shelf identify evacuate ShelfList identify evacuate","title":"Table of Contents"},{"location":"api/shelves.html#nimbleclientv1apishelves","text":"","title":"nimbleclient.v1.api.shelves"},{"location":"api/shelves.html#shelf","text":"class Shelf(Resource) Disk shelf and head unit houses disks and controller. Parameters id : ID of shelf. array_name : Name of array the shelf belongs to. array_id : ID of array the shelf belongs to. partial_response_ok : Indicate that it is okay to provide partially available response. chassis_type : Chassis type. ctrlrs : List of ctrlr info. serial : The serial number of the chassis. model : Model of the shelf or head unit. model_ext : Extended model of the shelf or head unit. chassis_sensors : List of chassis sensor readings. psu_overall_status : The overall status for the PSUs. fan_overall_status : The overall status for the fans on both controllers. temp_overall_status : The overall status for the temperature on both controllers. disk_sets : Attributes for the disk sets in this shelf. activated : Activated state for shelf or disk set means it is available to store date on. An activated shelf may not be deactivated. driveset : Driveset to activate. force : Forcibly activate shelf. accept_foreign : Accept the removal of data on the shelf disks and activate foreign shelf. accept_dedupe_impact : Accept the reduction or elimination of deduplication capability on the system as a result of activating a shelf that does not meet the necessary deduplication requirements. last_request : Indicates this is the last request in a series of shelf add requests.","title":"Shelf"},{"location":"api/shelves.html#identify","text":"| identify(cid, status, **kwargs) Turn on chassis identifier for a controller. Parameters id : ID of shelf. cid : Possible values: 'A', 'B'. status : Status value of identifier to set.","title":"identify"},{"location":"api/shelves.html#evacuate","text":"| evacuate(driveset, **kwargs) Perform shelf evacuation. Parameters id : ID of shelf. driveset : Driveset to evacuate. dry_run : Argument to perform a dry run, not the actual shelf evacuation. start : Argument to perform the shelf evacuation. cancel : Argument to cancel the shelf evacuation. pause : Argument to pause the shelf evacuation. resume : Argument to resume the shelf evacuation.","title":"evacuate"},{"location":"api/shelves.html#shelflist","text":"class ShelfList(Collection)","title":"ShelfList"},{"location":"api/shelves.html#identify_1","text":"| identify(id, cid, status, **kwargs) Turn on chassis identifier for a controller. Parameters id : ID of shelf. cid : Possible values: 'A', 'B'. status : Status value of identifier to set.","title":"identify"},{"location":"api/shelves.html#evacuate_1","text":"| evacuate(id, driveset, **kwargs) Perform shelf evacuation. Parameters id : ID of shelf. driveset : Driveset to evacuate. dry_run : Argument to perform a dry run, not the actual shelf evacuation. start : Argument to perform the shelf evacuation. cancel : Argument to cancel the shelf evacuation. pause : Argument to pause the shelf evacuation. resume : Argument to resume the shelf evacuation.","title":"evacuate"},{"location":"api/snapshot_collections.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.snapshot_collections SnapshotCollection nimbleclient.v1.api.snapshot_collections \u00b6 SnapshotCollection \u00b6 class SnapshotCollection(Resource) Snapshot collections are collections of scheduled snapshots that are taken from volumes sharing a volume collection. Snapshot collections are replicated in the order that the collections were taken. Parameters id : Identifier for snapshot collection. name : Name of snapshot collection. description : Text description of snapshot collection. volcoll_name : Volume collection name. volcoll_id : Parent volume collection ID. origin_name : Origination group name/ID. is_replica : Indicates if snapshot collection was created as a replica. srep_owner_name : Name of the partner where the snapshots in this snapshot collection reside. srep_owner_id : ID of the partner where snapshots for this snapshot collection reside which were created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. peer_snapcoll_id : ID of the peer snapshot collection created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. num_snaps : Current number of live, non-hidden snaps in this collection. is_complete : Is complete. is_manual : Is manual. is_external_trigger : Is externally triggered. is_unmanaged : Indicates whether a snapshot collection is unmanaged. This is based on the state of individual snapshots. is_manually_managed : Indicates whether a snapshot collection is managed. repl_status : Replication status. repl_start_time : Replication start time. repl_complete_time : Replication complete time. repl_bytes_transferred : Number of bytes transferred after replication completes. creation_time : Time when this snapshot collection was created. last_modified : Time when this snapshot collection was last modified. online_status : Online status of snapcoll. This is based on the online status of the individual snapshots. vol_snap_attr_list : List of snapshot attributes for snapshots being created as part of snapshot collection creation. snapshots_list : List of snapshots in the snapshot collection. replicate : True if this snapshot collection has been marked for replication. This attribute cannot be updated for synchronous replication. replicate_to : Specifies the partner name that the snapshots in this snapshot collection are replicated to. start_online : Start with snapshot set online. allow_writes : Allow applications to write to created snapshot(s). Mandatory and must be set to 'true' for VSS application synchronized snapshots. disable_appsync : Do not perform application synchronization for this snapshot, create a crash-consistent snapshot instead. snap_verify : Run verification tool on this snapshot. This option can only be used with a volume collection that has application synchronization. skip_db_consistency_check : Skip consistency check for database files on this snapshot. This option only applies to volume collections with application synchronization set to VSS, application ID set to MS Exchange 2010 or later with Database Availability Group (DAG), snap_verify option set to true, and disable_appsync option set to false. sched_id : ID of protection schedule of snapshot collection. sched_name : Name of protection schedule of snapshot collection. invoke_on_upstream_partner : Invoke snapshot request on upstream partner. This operation is not supported for synchronous replication volume vollections. agent_type : External management agent type for snapshots being created as part of snapshot collection. expiry_after : Number of seconds after which this snapcoll is considered expired by the snapshot TTL. A value of 0 indicates that the snapshot never expires, 1 indicates that the snapshot uses a group-level configured TTL value and any other value indicates the number of seconds. metadata : Key-value pairs that augment a snapshot collection's attributes. force : Forcibly delete the specified snapshot collection even if it is the last replicated snapshot. Doing so could lead to full re-seeding at the next replication.","title":"snapshot_collections"},{"location":"api/snapshot_collections.html#table_of_contents","text":"nimbleclient.v1.api.snapshot_collections SnapshotCollection","title":"Table of Contents"},{"location":"api/snapshot_collections.html#nimbleclientv1apisnapshot_collections","text":"","title":"nimbleclient.v1.api.snapshot_collections"},{"location":"api/snapshot_collections.html#snapshotcollection","text":"class SnapshotCollection(Resource) Snapshot collections are collections of scheduled snapshots that are taken from volumes sharing a volume collection. Snapshot collections are replicated in the order that the collections were taken. Parameters id : Identifier for snapshot collection. name : Name of snapshot collection. description : Text description of snapshot collection. volcoll_name : Volume collection name. volcoll_id : Parent volume collection ID. origin_name : Origination group name/ID. is_replica : Indicates if snapshot collection was created as a replica. srep_owner_name : Name of the partner where the snapshots in this snapshot collection reside. srep_owner_id : ID of the partner where snapshots for this snapshot collection reside which were created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. peer_snapcoll_id : ID of the peer snapshot collection created by synchronous replication. Field will be null if no peer snapshot_collection was created by synchronous replication. num_snaps : Current number of live, non-hidden snaps in this collection. is_complete : Is complete. is_manual : Is manual. is_external_trigger : Is externally triggered. is_unmanaged : Indicates whether a snapshot collection is unmanaged. This is based on the state of individual snapshots. is_manually_managed : Indicates whether a snapshot collection is managed. repl_status : Replication status. repl_start_time : Replication start time. repl_complete_time : Replication complete time. repl_bytes_transferred : Number of bytes transferred after replication completes. creation_time : Time when this snapshot collection was created. last_modified : Time when this snapshot collection was last modified. online_status : Online status of snapcoll. This is based on the online status of the individual snapshots. vol_snap_attr_list : List of snapshot attributes for snapshots being created as part of snapshot collection creation. snapshots_list : List of snapshots in the snapshot collection. replicate : True if this snapshot collection has been marked for replication. This attribute cannot be updated for synchronous replication. replicate_to : Specifies the partner name that the snapshots in this snapshot collection are replicated to. start_online : Start with snapshot set online. allow_writes : Allow applications to write to created snapshot(s). Mandatory and must be set to 'true' for VSS application synchronized snapshots. disable_appsync : Do not perform application synchronization for this snapshot, create a crash-consistent snapshot instead. snap_verify : Run verification tool on this snapshot. This option can only be used with a volume collection that has application synchronization. skip_db_consistency_check : Skip consistency check for database files on this snapshot. This option only applies to volume collections with application synchronization set to VSS, application ID set to MS Exchange 2010 or later with Database Availability Group (DAG), snap_verify option set to true, and disable_appsync option set to false. sched_id : ID of protection schedule of snapshot collection. sched_name : Name of protection schedule of snapshot collection. invoke_on_upstream_partner : Invoke snapshot request on upstream partner. This operation is not supported for synchronous replication volume vollections. agent_type : External management agent type for snapshots being created as part of snapshot collection. expiry_after : Number of seconds after which this snapcoll is considered expired by the snapshot TTL. A value of 0 indicates that the snapshot never expires, 1 indicates that the snapshot uses a group-level configured TTL value and any other value indicates the number of seconds. metadata : Key-value pairs that augment a snapshot collection's attributes. force : Forcibly delete the specified snapshot collection even if it is the last replicated snapshot. Doing so could lead to full re-seeding at the next replication.","title":"SnapshotCollection"},{"location":"api/snapshots.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.snapshots Snapshot bulk_create SnapshotList bulk_create nimbleclient.v1.api.snapshots \u00b6 Snapshot \u00b6 class Snapshot(Resource) Snapshots are point-in-time copies of a volume. Snapshots are managed the same way you manage volumes. In reality, snapshots are volumes: they can be accessed by initiators, are subject to the same controls, can be modified, and have the same restrictions as volumes. Snapshots can be cloned and replicated. The initial snapshot uses no space: it shares the original data with the source volume. Each successive snapshot captures the changes that have occurred on the volume. The changed blocks are compressed. Parameters id : Identifier for the snapshot. name : Name of snapshot. description : Text description of snapshot. size : Size of volume at time of snapshot (in bytes). vol_name : Name of the parent volume in which the snapshot belongs to. pool_name : Name of the pool in which the parent volume belongs to. vol_id : Parent volume ID. snap_collection_name : Name of snapshot collection. snap_collection_id : Identifier of snapshot collection. online : Online state for a snapshot means it could be mounted for data restore. writable : Allow snapshot to be writable. Mandatory and must be set to 'true' for VSS application synchronized snapshots. offline_reason : Snapshot offline reason - possible entries: one of 'user', 'recovery', 'replica', 'over_volume_limit', 'over_snapshot_limit', 'over_volume_reserve', 'nvram_loss_recovery', 'pool_free_space_exhausted' . expiry_time : Unix timestamp indicating that the snapshot is considered expired by Snapshot Time-to-live(TTL). A value of 0 indicates that snapshot never expires. expiry_after : Number of seconds after which this snapshot is considered expired by snapshot TTL. A value of 0 indicates that snapshot never expires, 1 indicates that snapshot uses group-level configured TTL value and any other value indicates number of seconds. origin_name : Origination group name. is_replica : Snapshot is a replica from upstream replication partner. is_unmanaged : Indicates whether the snapshot is unmanaged. The snapshot will not be deleted automatically unless the unmanaged cleanup feature is enabled. is_manually_managed : Is snapshot manually managed, i.e., snapshot is manually or third party created or created by system at the time of volume restore or resize. replication_status : Replication status. access_control_records : List of access control records that apply to this snapshot. serial_number : Identifier for the SCSI protocol. target_name : The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target snapshot. creation_time : Time when this snapshot was created. last_modified : Time when this snapshort was last modified. schedule_name : Name of protection schedule. schedule_id : Identifier of protection schedule. app_uuid : Application identifier of snapshots. metadata : Key-value pairs that augment a snapshot's attributes. new_data_valid : Indicate the usage infomation is valid. new_data_compressed_bytes : The bytes of compressed new data. new_data_uncompressed_bytes : The bytes of uncompressed new data. agent_type : External management agent type. vpd_t10 : The snapshot's T10 Vendor ID-based identifier. vpd_ieee0 : The first 64 bits of the snapshots's EUI-64 identifier, encoded as a hexadecimal string. vpd_ieee1 : The last 64 bits of the snapshots's EUI-64 identifier, encoded as a hexadecimal string. force : Forcibly delete the specified snapshot even if it is the last replicated collection. Doing so could lead to full re-seeding at the next replication. bulk_create \u00b6 | bulk_create(replicate, snap_vol_list, vss_snap, **kwargs) Create snapshots on the given set of volumes. Parameters snap_vol_list : List of volumes to snapshot and corresponding snapshot creation attributes. VSS application-synchronized snapshot must specify the 'writable' parameter and set it to true. replicate : Allow snapshot to be replicated. vss_snap : VSS app-synchronized snapshot; we don't support creation of non app-synchronized sanpshots through this interface; must be set to true. SnapshotList \u00b6 class SnapshotList(Collection) bulk_create \u00b6 | bulk_create(replicate, snap_vol_list, vss_snap, **kwargs) Create snapshots on the given set of volumes. Parameters snap_vol_list : List of volumes to snapshot and corresponding snapshot creation attributes. VSS application-synchronized snapshot must specify the 'writable' parameter and set it to true. replicate : Allow snapshot to be replicated. vss_snap : VSS app-synchronized snapshot; we don't support creation of non app-synchronized sanpshots through this interface; must be set to true.","title":"snapshots"},{"location":"api/snapshots.html#table_of_contents","text":"nimbleclient.v1.api.snapshots Snapshot bulk_create SnapshotList bulk_create","title":"Table of Contents"},{"location":"api/snapshots.html#nimbleclientv1apisnapshots","text":"","title":"nimbleclient.v1.api.snapshots"},{"location":"api/snapshots.html#snapshot","text":"class Snapshot(Resource) Snapshots are point-in-time copies of a volume. Snapshots are managed the same way you manage volumes. In reality, snapshots are volumes: they can be accessed by initiators, are subject to the same controls, can be modified, and have the same restrictions as volumes. Snapshots can be cloned and replicated. The initial snapshot uses no space: it shares the original data with the source volume. Each successive snapshot captures the changes that have occurred on the volume. The changed blocks are compressed. Parameters id : Identifier for the snapshot. name : Name of snapshot. description : Text description of snapshot. size : Size of volume at time of snapshot (in bytes). vol_name : Name of the parent volume in which the snapshot belongs to. pool_name : Name of the pool in which the parent volume belongs to. vol_id : Parent volume ID. snap_collection_name : Name of snapshot collection. snap_collection_id : Identifier of snapshot collection. online : Online state for a snapshot means it could be mounted for data restore. writable : Allow snapshot to be writable. Mandatory and must be set to 'true' for VSS application synchronized snapshots. offline_reason : Snapshot offline reason - possible entries: one of 'user', 'recovery', 'replica', 'over_volume_limit', 'over_snapshot_limit', 'over_volume_reserve', 'nvram_loss_recovery', 'pool_free_space_exhausted' . expiry_time : Unix timestamp indicating that the snapshot is considered expired by Snapshot Time-to-live(TTL). A value of 0 indicates that snapshot never expires. expiry_after : Number of seconds after which this snapshot is considered expired by snapshot TTL. A value of 0 indicates that snapshot never expires, 1 indicates that snapshot uses group-level configured TTL value and any other value indicates number of seconds. origin_name : Origination group name. is_replica : Snapshot is a replica from upstream replication partner. is_unmanaged : Indicates whether the snapshot is unmanaged. The snapshot will not be deleted automatically unless the unmanaged cleanup feature is enabled. is_manually_managed : Is snapshot manually managed, i.e., snapshot is manually or third party created or created by system at the time of volume restore or resize. replication_status : Replication status. access_control_records : List of access control records that apply to this snapshot. serial_number : Identifier for the SCSI protocol. target_name : The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target snapshot. creation_time : Time when this snapshot was created. last_modified : Time when this snapshort was last modified. schedule_name : Name of protection schedule. schedule_id : Identifier of protection schedule. app_uuid : Application identifier of snapshots. metadata : Key-value pairs that augment a snapshot's attributes. new_data_valid : Indicate the usage infomation is valid. new_data_compressed_bytes : The bytes of compressed new data. new_data_uncompressed_bytes : The bytes of uncompressed new data. agent_type : External management agent type. vpd_t10 : The snapshot's T10 Vendor ID-based identifier. vpd_ieee0 : The first 64 bits of the snapshots's EUI-64 identifier, encoded as a hexadecimal string. vpd_ieee1 : The last 64 bits of the snapshots's EUI-64 identifier, encoded as a hexadecimal string. force : Forcibly delete the specified snapshot even if it is the last replicated collection. Doing so could lead to full re-seeding at the next replication.","title":"Snapshot"},{"location":"api/snapshots.html#bulk_create","text":"| bulk_create(replicate, snap_vol_list, vss_snap, **kwargs) Create snapshots on the given set of volumes. Parameters snap_vol_list : List of volumes to snapshot and corresponding snapshot creation attributes. VSS application-synchronized snapshot must specify the 'writable' parameter and set it to true. replicate : Allow snapshot to be replicated. vss_snap : VSS app-synchronized snapshot; we don't support creation of non app-synchronized sanpshots through this interface; must be set to true.","title":"bulk_create"},{"location":"api/snapshots.html#snapshotlist","text":"class SnapshotList(Collection)","title":"SnapshotList"},{"location":"api/snapshots.html#bulk_create_1","text":"| bulk_create(replicate, snap_vol_list, vss_snap, **kwargs) Create snapshots on the given set of volumes. Parameters snap_vol_list : List of volumes to snapshot and corresponding snapshot creation attributes. VSS application-synchronized snapshot must specify the 'writable' parameter and set it to true. replicate : Allow snapshot to be replicated. vss_snap : VSS app-synchronized snapshot; we don't support creation of non app-synchronized sanpshots through this interface; must be set to true.","title":"bulk_create"},{"location":"api/software_versions.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.software_versions SoftwareVersion nimbleclient.v1.api.software_versions \u00b6 SoftwareVersion \u00b6 class SoftwareVersion(Resource) Show the software version. Parameters version : Software version, used as identifier in URL. signature : Keyed hash of download package. name : Name of version. status : Status of version. total_bytes : Size of version. downloaded_bytes : Number of bytes downloaded for the version. blacklist_reason : Reason for blacklisting the version. Empty if version is not blacklisted. release_date : Date when software version was released. is_manually_downloaded : Whether or not the version was downloaded manually. release_status : Release status of software version. no_partial_response : Indicate that it is not ok to provide partially available response.","title":"software_versions"},{"location":"api/software_versions.html#table_of_contents","text":"nimbleclient.v1.api.software_versions SoftwareVersion","title":"Table of Contents"},{"location":"api/software_versions.html#nimbleclientv1apisoftware_versions","text":"","title":"nimbleclient.v1.api.software_versions"},{"location":"api/software_versions.html#softwareversion","text":"class SoftwareVersion(Resource) Show the software version. Parameters version : Software version, used as identifier in URL. signature : Keyed hash of download package. name : Name of version. status : Status of version. total_bytes : Size of version. downloaded_bytes : Number of bytes downloaded for the version. blacklist_reason : Reason for blacklisting the version. Empty if version is not blacklisted. release_date : Date when software version was released. is_manually_downloaded : Whether or not the version was downloaded manually. release_status : Release status of software version. no_partial_response : Indicate that it is not ok to provide partially available response.","title":"SoftwareVersion"},{"location":"api/space_domains.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.space_domains SpaceDomain nimbleclient.v1.api.space_domains \u00b6 SpaceDomain \u00b6 class SpaceDomain(Resource) A space domain is created for each application category and block size for each each pool. Parameters id : Identifier for the space domain. pool_id : Identifier associated with the pool in the storage pool table. pool_name : Name of the pool containing the space domain. app_category_id : Identifier of the application category associated with the space domain. app_category_name : Name of the application category associated with the space domain. perf_policy_names : Name of the performance policies associated with the space domain. sample_rate : Sample rate value. volume_count : Number of volumes belonging to the space domain. deduped_volume_count : Number of deduplicated volumes belonging to the space domain. volumes : Volumes belonging to the space domain. block_size : Block size in bytes of volumes belonging to the space domain. deduped : Volumes in space domain are deduplicated by default. encrypted : Volumes in space domain are encrypted. usage : Physical space usage of volumes in the space domain. vol_logical_usage : Logical usage of volumes in the space domain. snap_logical_usage : Logical usage of snapshots in the space domain. vol_mapped_usage : Mapped usage of volumes in the space domain, useful for computing clone savings. logical_dedupe_usage : Logical space usage of volumes when deduped. physical_dedupe_usage : Physical space usage of volumes including snapshots when deduped. savings_compression : Space usage savings in the space domain due to compression. savings_dedupe : Space usage savings in the space domain due to deduplication. savings_clone : Space usage savings in the space domain due to cloning of volumes. compressed_usage_bytes : Compressed usage of volumes and snapshots in the space domain. uncompressed_usage_bytes : Uncompressed usage of volumes and snapshots in the space domain. compression_ratio : Compression savings for the space domain expressed as ratio. dedupe_ratio : Deduplication savings for the space domain expressed as ratio. clone_ratio : Clone savings for the space domain expressed as ratio.","title":"space_domains"},{"location":"api/space_domains.html#table_of_contents","text":"nimbleclient.v1.api.space_domains SpaceDomain","title":"Table of Contents"},{"location":"api/space_domains.html#nimbleclientv1apispace_domains","text":"","title":"nimbleclient.v1.api.space_domains"},{"location":"api/space_domains.html#spacedomain","text":"class SpaceDomain(Resource) A space domain is created for each application category and block size for each each pool. Parameters id : Identifier for the space domain. pool_id : Identifier associated with the pool in the storage pool table. pool_name : Name of the pool containing the space domain. app_category_id : Identifier of the application category associated with the space domain. app_category_name : Name of the application category associated with the space domain. perf_policy_names : Name of the performance policies associated with the space domain. sample_rate : Sample rate value. volume_count : Number of volumes belonging to the space domain. deduped_volume_count : Number of deduplicated volumes belonging to the space domain. volumes : Volumes belonging to the space domain. block_size : Block size in bytes of volumes belonging to the space domain. deduped : Volumes in space domain are deduplicated by default. encrypted : Volumes in space domain are encrypted. usage : Physical space usage of volumes in the space domain. vol_logical_usage : Logical usage of volumes in the space domain. snap_logical_usage : Logical usage of snapshots in the space domain. vol_mapped_usage : Mapped usage of volumes in the space domain, useful for computing clone savings. logical_dedupe_usage : Logical space usage of volumes when deduped. physical_dedupe_usage : Physical space usage of volumes including snapshots when deduped. savings_compression : Space usage savings in the space domain due to compression. savings_dedupe : Space usage savings in the space domain due to deduplication. savings_clone : Space usage savings in the space domain due to cloning of volumes. compressed_usage_bytes : Compressed usage of volumes and snapshots in the space domain. uncompressed_usage_bytes : Uncompressed usage of volumes and snapshots in the space domain. compression_ratio : Compression savings for the space domain expressed as ratio. dedupe_ratio : Deduplication savings for the space domain expressed as ratio. clone_ratio : Clone savings for the space domain expressed as ratio.","title":"SpaceDomain"},{"location":"api/subnets.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.subnets Subnet nimbleclient.v1.api.subnets \u00b6 Subnet \u00b6 class Subnet(Resource) Search subnets information. Many networking tasks require that objects such as replication partners are either on the same network or have a route to a secondary network. Subnets let you create logical addressing for selective routing. Parameters id : Identifier for the initiator group. name : Name of subnet configuration. network : Subnet network address. netmask : Subnet netmask address. type : Subnet type. Options include 'mgmt', 'data', and 'mgmt,data'. allow_iscsi : Subnet type. allow_group : Subnet type. discovery_ip : Subnet network address. mtu : MTU for specified subnet. Valid MTU's are in the 512-16000 range. netzone_type : Specify Network Affinity Zone type for iSCSI enabled subnets. Valid types are Single, Bisect, and EvenOdd for iSCSI subnets. vlan_id : VLAN ID for specified subnet. Valid ID's are in the 1-4094 range. creation_time : Time when this subnet configuration was created. last_modified : Time when this subnet configuration was last modified. failover : Failover setting of the subnet. failover_enable_time : Failover for this subnet will be enabled again at the time specified by failover_enable_time.","title":"subnets"},{"location":"api/subnets.html#table_of_contents","text":"nimbleclient.v1.api.subnets Subnet","title":"Table of Contents"},{"location":"api/subnets.html#nimbleclientv1apisubnets","text":"","title":"nimbleclient.v1.api.subnets"},{"location":"api/subnets.html#subnet","text":"class Subnet(Resource) Search subnets information. Many networking tasks require that objects such as replication partners are either on the same network or have a route to a secondary network. Subnets let you create logical addressing for selective routing. Parameters id : Identifier for the initiator group. name : Name of subnet configuration. network : Subnet network address. netmask : Subnet netmask address. type : Subnet type. Options include 'mgmt', 'data', and 'mgmt,data'. allow_iscsi : Subnet type. allow_group : Subnet type. discovery_ip : Subnet network address. mtu : MTU for specified subnet. Valid MTU's are in the 512-16000 range. netzone_type : Specify Network Affinity Zone type for iSCSI enabled subnets. Valid types are Single, Bisect, and EvenOdd for iSCSI subnets. vlan_id : VLAN ID for specified subnet. Valid ID's are in the 1-4094 range. creation_time : Time when this subnet configuration was created. last_modified : Time when this subnet configuration was last modified. failover : Failover setting of the subnet. failover_enable_time : Failover for this subnet will be enabled again at the time specified by failover_enable_time.","title":"Subnet"},{"location":"api/subscribers.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.subscribers Subscriber nimbleclient.v1.api.subscribers \u00b6 Subscriber \u00b6 class Subscriber(Resource) Subscribers are websocket based notification clients that can subscribe to interesting operations and events and recieve notifications whenever the subscribed to operations and events happen on the array. Parameters id : Identifier for subscriber. type : This is generally used to indicate the type of subscriber e.g. SMIS/GUI/ThirdParty etc. This is free form and doesn't need to be unique. renew_interval : The interval in seconds within which the subscriber is expected to send a renew message over the websocket channel in case there is no traffic on the websocket channel. renew_response_timeout : The interval in seconds after the subscriber sends a renew message within which the subscriber expects to get a response. is_connected : True if the subscriber has an active websocket connection. notification_count : Number of notifications sent to subscriber. force : Forcibly modify a connected subscriber.","title":"subscribers"},{"location":"api/subscribers.html#table_of_contents","text":"nimbleclient.v1.api.subscribers Subscriber","title":"Table of Contents"},{"location":"api/subscribers.html#nimbleclientv1apisubscribers","text":"","title":"nimbleclient.v1.api.subscribers"},{"location":"api/subscribers.html#subscriber","text":"class Subscriber(Resource) Subscribers are websocket based notification clients that can subscribe to interesting operations and events and recieve notifications whenever the subscribed to operations and events happen on the array. Parameters id : Identifier for subscriber. type : This is generally used to indicate the type of subscriber e.g. SMIS/GUI/ThirdParty etc. This is free form and doesn't need to be unique. renew_interval : The interval in seconds within which the subscriber is expected to send a renew message over the websocket channel in case there is no traffic on the websocket channel. renew_response_timeout : The interval in seconds after the subscriber sends a renew message within which the subscriber expects to get a response. is_connected : True if the subscriber has an active websocket connection. notification_count : Number of notifications sent to subscriber. force : Forcibly modify a connected subscriber.","title":"Subscriber"},{"location":"api/subscriptions.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.subscriptions Subscription nimbleclient.v1.api.subscriptions \u00b6 Subscription \u00b6 class Subscription(Resource) Subscriptions represent the list of object types or alerts that a websocket client is interested in getting notifications for. Each subscription belongs to a single notification client. Parameters id : Identifier for subscription. subscriber_id : Identifier for subscriber (notification client) that this subscription belongs to. notification_type : This indicates the type of notification being subscribed for. object_type : The object type that the notification subscriber is interested in. This is relevant for and required only for audit log based notifications. object_id : The object that the notification subscriber is interested in. Applies only to audit log based notifications. operation : The operation that the notification subscriber is interested in. Applies only to audit log based notifications. event_target_type : The kind of events or alerts that the notification subscriber is interested in. Applies only to events based notifications. event_severity : The severity of events that the notification subscriber is interested in. Applies only to events based notifications.","title":"subscriptions"},{"location":"api/subscriptions.html#table_of_contents","text":"nimbleclient.v1.api.subscriptions Subscription","title":"Table of Contents"},{"location":"api/subscriptions.html#nimbleclientv1apisubscriptions","text":"","title":"nimbleclient.v1.api.subscriptions"},{"location":"api/subscriptions.html#subscription","text":"class Subscription(Resource) Subscriptions represent the list of object types or alerts that a websocket client is interested in getting notifications for. Each subscription belongs to a single notification client. Parameters id : Identifier for subscription. subscriber_id : Identifier for subscriber (notification client) that this subscription belongs to. notification_type : This indicates the type of notification being subscribed for. object_type : The object type that the notification subscriber is interested in. This is relevant for and required only for audit log based notifications. object_id : The object that the notification subscriber is interested in. Applies only to audit log based notifications. operation : The operation that the notification subscriber is interested in. Applies only to audit log based notifications. event_target_type : The kind of events or alerts that the notification subscriber is interested in. Applies only to events based notifications. event_severity : The severity of events that the notification subscriber is interested in. Applies only to events based notifications.","title":"Subscription"},{"location":"api/tokens.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.tokens Token report_user_details TokenList report_user_details nimbleclient.v1.api.tokens \u00b6 Token \u00b6 class Token(Resource) Manage user's session information. Parameters \u00b6 id : Object identifier for the session token. session_token : Token used for authentication. username : User name for the session. password : Password for the user. A password is required for creating a token. app_name : Application name. sdk_name : SDK name. source_ip : IP address from which the session originates. creation_time : Time when this token was created. last_modified : Time when this token was last modified. expiry_time : Time when this token will expire. server_uuid : Non mandatory 36 character uuid returned by the server. Currently only the witness REST server returns one. grant_type : OAuth grant type, currently only support 'urn:ietf:params:oauth:grant-type:jwt-bearer'. assertion : OAuth assertion, currently expecting a JWT token. report_user_details \u00b6 | report_user_details(**kwargs) Reports the user details for this token. Parameters id : ID for the session token. TokenList \u00b6 class TokenList(Collection) report_user_details \u00b6 | report_user_details(id, **kwargs) Reports the user details for this token. Parameters id : ID for the session token.","title":"tokens"},{"location":"api/tokens.html#table_of_contents","text":"nimbleclient.v1.api.tokens Token report_user_details TokenList report_user_details","title":"Table of Contents"},{"location":"api/tokens.html#nimbleclientv1apitokens","text":"","title":"nimbleclient.v1.api.tokens"},{"location":"api/tokens.html#token","text":"class Token(Resource) Manage user's session information.","title":"Token"},{"location":"api/tokens.html#parameters","text":"id : Object identifier for the session token. session_token : Token used for authentication. username : User name for the session. password : Password for the user. A password is required for creating a token. app_name : Application name. sdk_name : SDK name. source_ip : IP address from which the session originates. creation_time : Time when this token was created. last_modified : Time when this token was last modified. expiry_time : Time when this token will expire. server_uuid : Non mandatory 36 character uuid returned by the server. Currently only the witness REST server returns one. grant_type : OAuth grant type, currently only support 'urn:ietf:params:oauth:grant-type:jwt-bearer'. assertion : OAuth assertion, currently expecting a JWT token.","title":"Parameters"},{"location":"api/tokens.html#report_user_details","text":"| report_user_details(**kwargs) Reports the user details for this token. Parameters id : ID for the session token.","title":"report_user_details"},{"location":"api/tokens.html#tokenlist","text":"class TokenList(Collection)","title":"TokenList"},{"location":"api/tokens.html#report_user_details_1","text":"| report_user_details(id, **kwargs) Reports the user details for this token. Parameters id : ID for the session token.","title":"report_user_details"},{"location":"api/trusted_oauth_issuers.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.trusted_oauth_issuers TrustedOauthIssuer nimbleclient.v1.api.trusted_oauth_issuers \u00b6 TrustedOauthIssuer \u00b6 class TrustedOauthIssuer(Resource) Oauth Credential Issuers that this device will trust. Parameters id : Identifier for the trusted oauth issuer record. name : Issuer ID string. jwks_url : The URL from which the device will download the public key set for signature verification. key_set : List of public keys for verifying signatures.","title":"trusted_oauth_issuers"},{"location":"api/trusted_oauth_issuers.html#table_of_contents","text":"nimbleclient.v1.api.trusted_oauth_issuers TrustedOauthIssuer","title":"Table of Contents"},{"location":"api/trusted_oauth_issuers.html#nimbleclientv1apitrusted_oauth_issuers","text":"","title":"nimbleclient.v1.api.trusted_oauth_issuers"},{"location":"api/trusted_oauth_issuers.html#trustedoauthissuer","text":"class TrustedOauthIssuer(Resource) Oauth Credential Issuers that this device will trust. Parameters id : Identifier for the trusted oauth issuer record. name : Issuer ID string. jwks_url : The URL from which the device will download the public key set for signature verification. key_set : List of public keys for verifying signatures.","title":"TrustedOauthIssuer"},{"location":"api/user_groups.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.user_groups UserGroup nimbleclient.v1.api.user_groups \u00b6 UserGroup \u00b6 class UserGroup(Resource) Represents Active Directory groups configured to manage the system. Parameters id : Identifier for the user group. name : Name of the user group. description : Description of the user group. role_id : Identifier for the user group's role. role : Role of the user. inactivity_timeout : The amount of time that the user session is inactive before timing out. A value of 0 indicates that the timeout is taken from the group setting. creation_time : Time when this user was created. last_modified : Time when this user was last modified. disabled : User is currently disabled. external_id : External ID of the user group. In Active Directory, it is the group's SID (Security Identifier). domain_id : Identifier of the domain this user group belongs to. domain_name : Role of the user.","title":"user_groups"},{"location":"api/user_groups.html#table_of_contents","text":"nimbleclient.v1.api.user_groups UserGroup","title":"Table of Contents"},{"location":"api/user_groups.html#nimbleclientv1apiuser_groups","text":"","title":"nimbleclient.v1.api.user_groups"},{"location":"api/user_groups.html#usergroup","text":"class UserGroup(Resource) Represents Active Directory groups configured to manage the system. Parameters id : Identifier for the user group. name : Name of the user group. description : Description of the user group. role_id : Identifier for the user group's role. role : Role of the user. inactivity_timeout : The amount of time that the user session is inactive before timing out. A value of 0 indicates that the timeout is taken from the group setting. creation_time : Time when this user was created. last_modified : Time when this user was last modified. disabled : User is currently disabled. external_id : External ID of the user group. In Active Directory, it is the group's SID (Security Identifier). domain_id : Identifier of the domain this user group belongs to. domain_name : Role of the user.","title":"UserGroup"},{"location":"api/user_policies.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.user_policies UserPolicy nimbleclient.v1.api.user_policies \u00b6 UserPolicy \u00b6 class UserPolicy(Resource) Manages the password policies configured for the group. Parameters id : Identifier for the security policy. allowed_attempts : Number of authentication attempts allowed before the user account is locked. Allowed range is [1, 10] inclusive. '0' indicates no limit. min_length : Minimum length for user passwords. Allowed range is [8, 255] inclusive. upper : Number of uppercase characters required in user passwords. Allowed range is [0, 255] inclusive. lower : Number of lowercase characters required in user passwords. Allowed range is [0, 255] inclusive. digit : Number of numerical characters required in user passwords. Allowed range is [0, 255] inclusive. special : Number of special characters required in user passwords. Allowed range is [0, 255] inclusive. previous_diff : Number of characters that must be different from the previous password. Allowed range is [1, 255] inclusive. no_reuse : Number of times that a password must change before you can reuse a previous password. Allowed range is [1,20] inclusive. max_sessions : Maximum number of sessions allowed for a group. Allowed range is [10, 1000] inclusive. '0' indicates no limit.","title":"user_policies"},{"location":"api/user_policies.html#table_of_contents","text":"nimbleclient.v1.api.user_policies UserPolicy","title":"Table of Contents"},{"location":"api/user_policies.html#nimbleclientv1apiuser_policies","text":"","title":"nimbleclient.v1.api.user_policies"},{"location":"api/user_policies.html#userpolicy","text":"class UserPolicy(Resource) Manages the password policies configured for the group. Parameters id : Identifier for the security policy. allowed_attempts : Number of authentication attempts allowed before the user account is locked. Allowed range is [1, 10] inclusive. '0' indicates no limit. min_length : Minimum length for user passwords. Allowed range is [8, 255] inclusive. upper : Number of uppercase characters required in user passwords. Allowed range is [0, 255] inclusive. lower : Number of lowercase characters required in user passwords. Allowed range is [0, 255] inclusive. digit : Number of numerical characters required in user passwords. Allowed range is [0, 255] inclusive. special : Number of special characters required in user passwords. Allowed range is [0, 255] inclusive. previous_diff : Number of characters that must be different from the previous password. Allowed range is [1, 255] inclusive. no_reuse : Number of times that a password must change before you can reuse a previous password. Allowed range is [1,20] inclusive. max_sessions : Maximum number of sessions allowed for a group. Allowed range is [10, 1000] inclusive. '0' indicates no limit.","title":"UserPolicy"},{"location":"api/users.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.users User unlock UserList unlock nimbleclient.v1.api.users \u00b6 User \u00b6 class User(Resource) Represents users configured to manage the system. Parameters id : Identifier for the user. name : Name of the user. search_name : Name of the user used for object search. description : Description of the user. role_id : Identifier for the user's role. role : Role of the user. password : User's login password. auth_password : Authorization password for changing password. inactivity_timeout : The amount of time that the user session is inactive before timing out. A value of 0 indicates that the timeout is taken from the group setting. creation_time : Time when this user was created. last_modified : Time when this user was last modified. full_name : Fully qualified name of the user. email_addr : Email address of the user. tenant_id : Identifier for the tenant. tenant_key : Tenant secret key for encrypting the password. disabled : User is currently disabled. auth_lock : User was locked due to failed logins. last_login : Last login time. last_logout : Last logout time. logged_in : User is currently logged in. unlock \u00b6 | unlock(**kwargs) Unlocks user account locked due to failed logins. Parameters id : ID for the user. UserList \u00b6 class UserList(Collection) unlock \u00b6 | unlock(id, **kwargs) Unlocks user account locked due to failed logins. Parameters id : ID for the user.","title":"users"},{"location":"api/users.html#table_of_contents","text":"nimbleclient.v1.api.users User unlock UserList unlock","title":"Table of Contents"},{"location":"api/users.html#nimbleclientv1apiusers","text":"","title":"nimbleclient.v1.api.users"},{"location":"api/users.html#user","text":"class User(Resource) Represents users configured to manage the system. Parameters id : Identifier for the user. name : Name of the user. search_name : Name of the user used for object search. description : Description of the user. role_id : Identifier for the user's role. role : Role of the user. password : User's login password. auth_password : Authorization password for changing password. inactivity_timeout : The amount of time that the user session is inactive before timing out. A value of 0 indicates that the timeout is taken from the group setting. creation_time : Time when this user was created. last_modified : Time when this user was last modified. full_name : Fully qualified name of the user. email_addr : Email address of the user. tenant_id : Identifier for the tenant. tenant_key : Tenant secret key for encrypting the password. disabled : User is currently disabled. auth_lock : User was locked due to failed logins. last_login : Last login time. last_logout : Last logout time. logged_in : User is currently logged in.","title":"User"},{"location":"api/users.html#unlock","text":"| unlock(**kwargs) Unlocks user account locked due to failed logins. Parameters id : ID for the user.","title":"unlock"},{"location":"api/users.html#userlist","text":"class UserList(Collection)","title":"UserList"},{"location":"api/users.html#unlock_1","text":"| unlock(id, **kwargs) Unlocks user account locked due to failed logins. Parameters id : ID for the user.","title":"unlock"},{"location":"api/versions.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.versions Version nimbleclient.v1.api.versions \u00b6 Version \u00b6 class Version(Resource) Show the API version. Parameters name : API version number. software_version : Software version of the group.","title":"versions"},{"location":"api/versions.html#table_of_contents","text":"nimbleclient.v1.api.versions Version","title":"Table of Contents"},{"location":"api/versions.html#nimbleclientv1apiversions","text":"","title":"nimbleclient.v1.api.versions"},{"location":"api/versions.html#version","text":"class Version(Resource) Show the API version. Parameters name : API version number. software_version : Software version of the group.","title":"Version"},{"location":"api/volume_collections.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.volume_collections VolumeCollection promote demote handover abort_handover validate VolumeCollectionList promote demote handover abort_handover validate nimbleclient.v1.api.volume_collections \u00b6 VolumeCollection \u00b6 class VolumeCollection(Resource) Manage volume collections. Volume collections are logical groups of volumes that share protection characteristics such as snapshot and replication schedules. Volume collections can be created from scratch or based on predefined protection templates. Parameters id : Identifier for volume collection. prottmpl_id : Identifier of the protection template whose attributes will be used to create this volume collection. This attribute is only used for input when creating a volume collection and is not outputed. name : Name of volume collection. full_name : Fully qualified name of volume collection. search_name : Name of volume collection used for object search. description : Text description of volume collection. repl_priority : Replication priority for the volume collection with the following choices: {normal | high}. pol_owner_name : Owner group. replication_type : Type of replication configured for the volume collection. synchronous_replication_type : Type of synchronous replication configured for the volume collection. synchronous_replication_state : State of synchronous replication on the volume collection. app_sync : Application Synchronization. app_server : Application server hostname. app_id : Application ID running on the server. Application ID can only be specified if application synchronization is \\\"vss\\\". app_cluster_name : If the application is running within a Windows cluster environment, this is the cluster name. app_service_name : If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. vcenter_hostname : VMware vCenter hostname. Custom port number can be specified with vCenter hostname using \\\":\\\". vcenter_username : Application VMware vCenter username. vcenter_password : Application VMware vCenter password. agent_hostname : Generic backup agent hostname. Custom port number can be specified with agent hostname using \\\":\\\". agent_username : Generic backup agent username. agent_password : Generic backup agent password. creation_time : Time when this volume collection was created. last_modified_time : Time when this volume collection was last modified. volume_list : List of volumes associated with the volume collection. downstream_volume_list : List of downstream volumes associated with the volume collection. upstream_volume_list : List of upstream volumes associated with the volume collection. volume_count : Count of volumes associated with the volume collection. cache_pinned_volume_list : List of cache pinned volumes associated with volume collection. last_snapcoll : Last snapshot collection on this volume collection. snapcoll_count : Count of snapshot collections associated with volume collection. schedule_list : List of snapshot schedules associated with volume collection. replication_partner : Replication partner for this volume collection. last_replicated_snapcoll : Last replicated snapshot collection on this volume collection. last_replicated_snapcoll_list : List of snapshot collection information for the last replicated snapshot collection per schedule. protection_type : Specifies if volume collection is protected with schedules. If protected, indicated whether replication is setup. lag_time : Replication lag time for volume collection. is_standalone_volcoll : Indicates whether this is a standalone volume collection. total_repl_bytes : Total size of volumes to be replicated for this volume collection. repl_bytes_transferred : Total size of volumes replicated for this volume collection. is_handing_over : Indicates whether a handover operation is in progress on this volume collection. handover_replication_partner : Replication partner to which ownership is being transferred as part of handover operation. metadata : Key-value pairs that augment a volume collection's attributes. srep_last_sync : Time when a synchronously replicated volume collection was last synchronized. srep_resync_percent : Percentage of the resync progress for a synchronously replicated volume collection. promote \u00b6 | promote(**kwargs) Take ownership of the specified volume collection. The volumes associated with the volume collection will be set to online and be available for reading and writing. Replication will be disabled on the affected schedules and must be re-configured if desired. Snapshot retention for the affected schedules will be set to the greater of the current local or replica retention values. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the promoted volume collection. demote \u00b6 | demote(replication_partner_id, **kwargs) Release ownership of the specified volume collection. The volumes associated with the volume collection will set to offline and a snapshot will be created, then full control over the volume collection will be transferred to the new owner. This option can be used following a promote to revert the volume collection back to its prior configured state. This operation does not alter the configuration on the new owner itself, but does require the new owner to be running in order to obtain its identity information. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the demoted volume collection. replication_partner_id : ID of the new owner. If invoke_on_upstream_partner is provided, utilize the ID of the current owner i.e. upstream replication partner. invoke_on_upstream_partner : Invoke demote request on upstream partner. Default: 'false'. This operation is not supported for synchronous replication volume vollections. handover \u00b6 | handover(replication_partner_id, **kwargs) Gracefully transfer ownership of the specified volume collection. This action can be used to pass control of the volume collection to the downstream replication partner. Ownership and full control over the volume collection will be given to the downstream replication partner. The volumes associated with the volume collection will be set to offline prior to the final snapshot being taken and replicated, thus ensuring full data synchronization as part of the transfer. By default, the new owner will automatically begin replicating the volume collection back to this node when the handover completes. Parameters id : ID of the volume collection be handed over to the downstream replication partner. replication_partner_id : ID of the new owner. no_reverse : Do not automatically reverse direction of replication. Using this argument will prevent the new owner from automatically replicating the volume collection to this node when the handover completes. The default behavior is to enable replication back to this node. Default : 'false'. invoke_on_upstream_partner : Invoke handover request on upstream partner. Default: 'false'. This operation is not supported for synchronous replication volume vollections. override_upstream_down : Allow the handover request to proceed even if upstream array is down. The default behavior is to return an error when upstream is down. This option is applicable for synchronous replication only. Default : 'false'. abort_handover \u00b6 | abort_handover(**kwargs) Abort in-progress handover. If for some reason a previously invoked handover request is unable to complete, this action can be used to cancel it. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the volume collection on which to abort handover. validate \u00b6 | validate(**kwargs) Validate a volume collection with either Microsoft VSS or VMware application synchronization. Parameters id : ID of the volume collection that is to be validated. VolumeCollectionList \u00b6 class VolumeCollectionList(Collection) promote \u00b6 | promote(id, **kwargs) Take ownership of the specified volume collection. The volumes associated with the volume collection will be set to online and be available for reading and writing. Replication will be disabled on the affected schedules and must be re-configured if desired. Snapshot retention for the affected schedules will be set to the greater of the current local or replica retention values. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the promoted volume collection. demote \u00b6 | demote(id, replication_partner_id, **kwargs) Release ownership of the specified volume collection. The volumes associated with the volume collection will set to offline and a snapshot will be created, then full control over the volume collection will be transferred to the new owner. This option can be used following a promote to revert the volume collection back to its prior configured state. This operation does not alter the configuration on the new owner itself, but does require the new owner to be running in order to obtain its identity information. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the demoted volume collection. replication_partner_id : ID of the new owner. If invoke_on_upstream_partner is provided, utilize the ID of the current owner i.e. upstream replication partner. invoke_on_upstream_partner : Invoke demote request on upstream partner. Default: 'false'. This operation is not supported for synchronous replication volume vollections. handover \u00b6 | handover(id, replication_partner_id, **kwargs) Gracefully transfer ownership of the specified volume collection. This action can be used to pass control of the volume collection to the downstream replication partner. Ownership and full control over the volume collection will be given to the downstream replication partner. The volumes associated with the volume collection will be set to offline prior to the final snapshot being taken and replicated, thus ensuring full data synchronization as part of the transfer. By default, the new owner will automatically begin replicating the volume collection back to this node when the handover completes. Parameters id : ID of the volume collection be handed over to the downstream replication partner. replication_partner_id : ID of the new owner. no_reverse : Do not automatically reverse direction of replication. Using this argument will prevent the new owner from automatically replicating the volume collection to this node when the handover completes. The default behavior is to enable replication back to this node. Default : 'false'. invoke_on_upstream_partner : Invoke handover request on upstream partner. Default: 'false'. This operation is not supported for synchronous replication volume vollections. override_upstream_down : Allow the handover request to proceed even if upstream array is down. The default behavior is to return an error when upstream is down. This option is applicable for synchronous replication only. Default : 'false'. abort_handover \u00b6 | abort_handover(id, **kwargs) Abort in-progress handover. If for some reason a previously invoked handover request is unable to complete, this action can be used to cancel it. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the volume collection on which to abort handover. validate \u00b6 | validate(id, **kwargs) Validate a volume collection with either Microsoft VSS or VMware application synchronization. Parameters id : ID of the volume collection that is to be validated.","title":"volume_collections"},{"location":"api/volume_collections.html#table_of_contents","text":"nimbleclient.v1.api.volume_collections VolumeCollection promote demote handover abort_handover validate VolumeCollectionList promote demote handover abort_handover validate","title":"Table of Contents"},{"location":"api/volume_collections.html#nimbleclientv1apivolume_collections","text":"","title":"nimbleclient.v1.api.volume_collections"},{"location":"api/volume_collections.html#volumecollection","text":"class VolumeCollection(Resource) Manage volume collections. Volume collections are logical groups of volumes that share protection characteristics such as snapshot and replication schedules. Volume collections can be created from scratch or based on predefined protection templates. Parameters id : Identifier for volume collection. prottmpl_id : Identifier of the protection template whose attributes will be used to create this volume collection. This attribute is only used for input when creating a volume collection and is not outputed. name : Name of volume collection. full_name : Fully qualified name of volume collection. search_name : Name of volume collection used for object search. description : Text description of volume collection. repl_priority : Replication priority for the volume collection with the following choices: {normal | high}. pol_owner_name : Owner group. replication_type : Type of replication configured for the volume collection. synchronous_replication_type : Type of synchronous replication configured for the volume collection. synchronous_replication_state : State of synchronous replication on the volume collection. app_sync : Application Synchronization. app_server : Application server hostname. app_id : Application ID running on the server. Application ID can only be specified if application synchronization is \\\"vss\\\". app_cluster_name : If the application is running within a Windows cluster environment, this is the cluster name. app_service_name : If the application is running within a Windows cluster environment then this is the instance name of the service running within the cluster environment. vcenter_hostname : VMware vCenter hostname. Custom port number can be specified with vCenter hostname using \\\":\\\". vcenter_username : Application VMware vCenter username. vcenter_password : Application VMware vCenter password. agent_hostname : Generic backup agent hostname. Custom port number can be specified with agent hostname using \\\":\\\". agent_username : Generic backup agent username. agent_password : Generic backup agent password. creation_time : Time when this volume collection was created. last_modified_time : Time when this volume collection was last modified. volume_list : List of volumes associated with the volume collection. downstream_volume_list : List of downstream volumes associated with the volume collection. upstream_volume_list : List of upstream volumes associated with the volume collection. volume_count : Count of volumes associated with the volume collection. cache_pinned_volume_list : List of cache pinned volumes associated with volume collection. last_snapcoll : Last snapshot collection on this volume collection. snapcoll_count : Count of snapshot collections associated with volume collection. schedule_list : List of snapshot schedules associated with volume collection. replication_partner : Replication partner for this volume collection. last_replicated_snapcoll : Last replicated snapshot collection on this volume collection. last_replicated_snapcoll_list : List of snapshot collection information for the last replicated snapshot collection per schedule. protection_type : Specifies if volume collection is protected with schedules. If protected, indicated whether replication is setup. lag_time : Replication lag time for volume collection. is_standalone_volcoll : Indicates whether this is a standalone volume collection. total_repl_bytes : Total size of volumes to be replicated for this volume collection. repl_bytes_transferred : Total size of volumes replicated for this volume collection. is_handing_over : Indicates whether a handover operation is in progress on this volume collection. handover_replication_partner : Replication partner to which ownership is being transferred as part of handover operation. metadata : Key-value pairs that augment a volume collection's attributes. srep_last_sync : Time when a synchronously replicated volume collection was last synchronized. srep_resync_percent : Percentage of the resync progress for a synchronously replicated volume collection.","title":"VolumeCollection"},{"location":"api/volume_collections.html#promote","text":"| promote(**kwargs) Take ownership of the specified volume collection. The volumes associated with the volume collection will be set to online and be available for reading and writing. Replication will be disabled on the affected schedules and must be re-configured if desired. Snapshot retention for the affected schedules will be set to the greater of the current local or replica retention values. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the promoted volume collection.","title":"promote"},{"location":"api/volume_collections.html#demote","text":"| demote(replication_partner_id, **kwargs) Release ownership of the specified volume collection. The volumes associated with the volume collection will set to offline and a snapshot will be created, then full control over the volume collection will be transferred to the new owner. This option can be used following a promote to revert the volume collection back to its prior configured state. This operation does not alter the configuration on the new owner itself, but does require the new owner to be running in order to obtain its identity information. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the demoted volume collection. replication_partner_id : ID of the new owner. If invoke_on_upstream_partner is provided, utilize the ID of the current owner i.e. upstream replication partner. invoke_on_upstream_partner : Invoke demote request on upstream partner. Default: 'false'. This operation is not supported for synchronous replication volume vollections.","title":"demote"},{"location":"api/volume_collections.html#handover","text":"| handover(replication_partner_id, **kwargs) Gracefully transfer ownership of the specified volume collection. This action can be used to pass control of the volume collection to the downstream replication partner. Ownership and full control over the volume collection will be given to the downstream replication partner. The volumes associated with the volume collection will be set to offline prior to the final snapshot being taken and replicated, thus ensuring full data synchronization as part of the transfer. By default, the new owner will automatically begin replicating the volume collection back to this node when the handover completes. Parameters id : ID of the volume collection be handed over to the downstream replication partner. replication_partner_id : ID of the new owner. no_reverse : Do not automatically reverse direction of replication. Using this argument will prevent the new owner from automatically replicating the volume collection to this node when the handover completes. The default behavior is to enable replication back to this node. Default : 'false'. invoke_on_upstream_partner : Invoke handover request on upstream partner. Default: 'false'. This operation is not supported for synchronous replication volume vollections. override_upstream_down : Allow the handover request to proceed even if upstream array is down. The default behavior is to return an error when upstream is down. This option is applicable for synchronous replication only. Default : 'false'.","title":"handover"},{"location":"api/volume_collections.html#abort_handover","text":"| abort_handover(**kwargs) Abort in-progress handover. If for some reason a previously invoked handover request is unable to complete, this action can be used to cancel it. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the volume collection on which to abort handover.","title":"abort_handover"},{"location":"api/volume_collections.html#validate","text":"| validate(**kwargs) Validate a volume collection with either Microsoft VSS or VMware application synchronization. Parameters id : ID of the volume collection that is to be validated.","title":"validate"},{"location":"api/volume_collections.html#volumecollectionlist","text":"class VolumeCollectionList(Collection)","title":"VolumeCollectionList"},{"location":"api/volume_collections.html#promote_1","text":"| promote(id, **kwargs) Take ownership of the specified volume collection. The volumes associated with the volume collection will be set to online and be available for reading and writing. Replication will be disabled on the affected schedules and must be re-configured if desired. Snapshot retention for the affected schedules will be set to the greater of the current local or replica retention values. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the promoted volume collection.","title":"promote"},{"location":"api/volume_collections.html#demote_1","text":"| demote(id, replication_partner_id, **kwargs) Release ownership of the specified volume collection. The volumes associated with the volume collection will set to offline and a snapshot will be created, then full control over the volume collection will be transferred to the new owner. This option can be used following a promote to revert the volume collection back to its prior configured state. This operation does not alter the configuration on the new owner itself, but does require the new owner to be running in order to obtain its identity information. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the demoted volume collection. replication_partner_id : ID of the new owner. If invoke_on_upstream_partner is provided, utilize the ID of the current owner i.e. upstream replication partner. invoke_on_upstream_partner : Invoke demote request on upstream partner. Default: 'false'. This operation is not supported for synchronous replication volume vollections.","title":"demote"},{"location":"api/volume_collections.html#handover_1","text":"| handover(id, replication_partner_id, **kwargs) Gracefully transfer ownership of the specified volume collection. This action can be used to pass control of the volume collection to the downstream replication partner. Ownership and full control over the volume collection will be given to the downstream replication partner. The volumes associated with the volume collection will be set to offline prior to the final snapshot being taken and replicated, thus ensuring full data synchronization as part of the transfer. By default, the new owner will automatically begin replicating the volume collection back to this node when the handover completes. Parameters id : ID of the volume collection be handed over to the downstream replication partner. replication_partner_id : ID of the new owner. no_reverse : Do not automatically reverse direction of replication. Using this argument will prevent the new owner from automatically replicating the volume collection to this node when the handover completes. The default behavior is to enable replication back to this node. Default : 'false'. invoke_on_upstream_partner : Invoke handover request on upstream partner. Default: 'false'. This operation is not supported for synchronous replication volume vollections. override_upstream_down : Allow the handover request to proceed even if upstream array is down. The default behavior is to return an error when upstream is down. This option is applicable for synchronous replication only. Default : 'false'.","title":"handover"},{"location":"api/volume_collections.html#abort_handover_1","text":"| abort_handover(id, **kwargs) Abort in-progress handover. If for some reason a previously invoked handover request is unable to complete, this action can be used to cancel it. This operation is not supported for synchronous replication volume collections. Parameters id : ID of the volume collection on which to abort handover.","title":"abort_handover"},{"location":"api/volume_collections.html#validate_1","text":"| validate(id, **kwargs) Validate a volume collection with either Microsoft VSS or VMware application synchronization. Parameters id : ID of the volume collection that is to be validated.","title":"validate"},{"location":"api/volumes.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.volumes Volume restore move bulk_move abort_move bulk_set_dedupe bulk_set_online_and_offline online offline associate dissociate VolumeList restore move bulk_move abort_move bulk_set_dedupe bulk_set_online_and_offline online offline associate dissociate nimbleclient.v1.api.volumes \u00b6 Volume \u00b6 class Volume(Resource) Volumes are the basic storage units from which the total capacity is apportioned. The terms volume and LUN are used interchangeably.The number of volumes per array depends on storage allocation. Parameters id : Identifier for the volume. name : Name of the volume. full_name : Fully qualified name of volume. search_name : Name of volume used for object search. size : Volume size in mebibytes. Size is required for creating a volume but not for cloning an existing volume. description : Text description of volume. perfpolicy_name : Name of performance policy. perfpolicy_id : Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. reserve : Amount of space to reserve for this volume as a percentage of volume size. warn_level : This attribute is deprecated. Alert threshold for the volume's mapped usage, expressed as a percentage of the volume's size. When the volume's mapped usage exceeds warn_level, the array issues an alert. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume. limit : Limit on the volume's mapped usage, expressed as a percentage of the volume's size. When the volume's mapped usage exceeds limit, the volume will be offlined or made non-writable. If this option is not specified, array default volume limit setting is used to decide the limit for this volume. snap_reserve : Amount of space to reserve for snapshots of this volume as a percentage of volume size. snap_warn_level : Threshold for available space as a percentage of volume size below which an alert is raised. snap_limit : This attribute is deprecated. The array does not limit a volume's snapshot space usage. The attribute is ignored on input and returns max int64 on output. snap_limit_percent : This attribute is deprecated. The array does not limit a volume's snapshot space usage. The attribute is ignored on input and returns -1 on output. num_snaps : Number of live, non-hidden snapshots for this volume. projected_num_snaps : Deprecated. Projected number of snapshots (including scheduled and manual) for this volume. online : Online state of volume, available for host initiators to establish connections. owned_by_group : Name of group that currently owns the volume. owned_by_group_id : ID of group that currently owns the volume. multi_initiator : For iSCSI Volume Target, this flag indicates whether the volume and its snapshots can be accessed from multiple initiators at the same time. The default is false. For iSCSI Group Target or FC access protocol, the attribute cannot be modified and always reads as false. iscsi_target_scope : This indicates whether volume is exported under iSCSI Group Target or iSCSI Volume Target. This attribute is only meaningful to iSCSI system. On FC system, all volumes are exported under the FC Group Target. In create operation, the volume's target type will be set by this attribute. If not specified, it will be set as the group-setting. In clone operation, the clone's target type will inherit from the parent' setting. pool_name : Name of the pool where the volume resides. Volume data will be distributed across arrays over which specified pool is defined. If pool option is not specified, volume is assigned to the default pool. pool_id : Identifier associated with the pool in the storage pool table. read_only : Volume is read-only. serial_number : Identifier associated with the volume for the SCSI protocol. secondary_serial_number : Secondary identifier associated with the volume for the SCSI protocol. target_name : The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target volume. block_size : Size in bytes of blocks in the volume. offline_reason : Volume offline reason. clone : Whether this volume is a clone. Use this attribute in combination with name and base_snap_id to create a clone by setting clone = true. parent_vol_name : Name of parent volume. parent_vol_id : Parent volume ID. base_snap_name : Name of base snapshot. base_snap_id : Base snapshot ID. This attribute is required together with name and clone when cloning a volume with the create operation. replication_role : Replication role that this volume performs. volcoll_name : Name of volume collection of which this volume is a member. volcoll_id : ID of volume collection of which this volume is a member. Use this attribute in update operation to associate or dissociate volumes with or from volume collections. When associating, set this attribute to the ID of the volume collection. When dissociating, set this attribute to empty string. agent_type : External management agent type. force : Forcibly offline, reduce size or change read-only status a volume. creation_time : Time when this volume was created. last_modified : Time when this volume was last modified. protection_type : Specifies if volume is protected with schedules. If protected, indicate whether replication is setup. last_snap : Last snapshot for this volume. last_replicated_snap : Last replicated snapshot for this volume. dest_pool_name : Name of the destination pool where the volume is moving to. dest_pool_id : ID of the destination pool where the volume is moving to. move_start_time : The Start time when this volume was moved. move_aborting : This indicates whether the move of the volume is aborting or not. move_bytes_migrated : The bytes of volume which have been moved. move_bytes_remaining : The bytes of volume which have not been moved. move_est_compl_time : The estimated time of completion of a move. usage_valid : This indicates whether usage information of volume and snapshots are valid or not. space_usage_level : Indicates space usage level based on warning level. total_usage_bytes : Sum of volume mapped usage and uncompressed backup data(including pending deletes) in bytes of this volume. vol_usage_compressed_bytes : Compressed data in bytes for this volume. vol_usage_uncompressed_bytes : Uncompressed data in bytes for this volume. vol_usage_mapped_bytes : Mapped data in bytes for this volume. snap_usage_compressed_bytes : Sum of compressed backup data in bytes stored in snapshots of this volume. snap_usage_uncompressed_bytes : Sum of uncompressed unique backup data in bytes stored in snapshots of this volume. snap_usage_populated_bytes : Sum of backup data in bytes stored in snapshots of this volume without accounting for the sharing of data between snapshots. cache_pinned : If set to true, all the contents of this volume are kept in flash cache. This provides for consistent performance guarantees for all types of workloads. The amount of flash needed to pin the volume is equal to the limit for the volume. pinned_cache_size : The amount of flash pinned on the volume. cache_needed_for_pin : The amount of flash needed to pin the volume. upstream_cache_pinned : This indicates whether the upstream volume is cache pinned or not. cache_policy : Cache policy applied to the volume. thinly_provisioned : Set volume's provisioning level to thin. Also advertises volume as thinly provisioned to initiators supporting thin provisioning. For such volumes, soft limit notification is set to initiators when the volume space usage crosses its volume_warn_level. Default is yes. The volume's space is provisioned immediately, but for advertising status, this change takes effect only for new connections to the volume. Initiators must disconnect and reconnect for the new setting to be take effect at the initiator level consistently. vol_state : Status of the volume. online_snaps : The list of online snapshots of this volume. num_connections : Number of connections of this volume. num_iscsi_connections : Number of iscsi connections of this volume. num_fc_connections : Number of Fibre Channel connections of this volume. access_control_records : List of access control records that apply to this volume. inherit_acl : In a volume clone operation, if both the parent and the clone have no external management agent (their agent_type property is \"none\"), then inherit_acl controls whether the clone will inherit a copy of the parent's access control list. If either the parent or the clone have an external management agent, then the clone will not inherit the parent's access control list. encryption_cipher : The encryption cipher of the volume. app_uuid : Application identifier of volume. folder_id : ID of the folder holding this volume. folder_name : Name of the folder holding this volume. It can be empty. metadata : Key-value pairs that augment an volume's attributes. iscsi_sessions : List of iSCSI sessions connected to this volume. fc_sessions : List of Fibre Channel sessions connected to this volume. caching_enabled : Indicate caching the volume is enabled. previously_deduped : Indicate whether dedupe has ever been enabled on this volume. dedupe_enabled : Indicate whether dedupe is enabled. vpd_t10 : The volume's T10 Vendor ID-based identifier. vpd_ieee0 : The first 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. vpd_ieee1 : The last 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. app_category : Application category that the volume belongs to. limit_iops : IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops <= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). limit_mbps : Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops <= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). needs_content_repl : Indicates whether the volume needs content based replication. content_repl_errors_found : Indicates whether the last content based replication had errors. last_content_snap_br_cg_uid : The branch cg uid of the content based snapshot that was last replicated. last_content_snap_br_gid : The branch gid of the content based snapshot that was last replicated. last_content_snap_id : The ID of the content based snapshot that was last replicated. cksum_last_verified : Last checksum verification time. pre_filter : Pre-filtering criteria. avg_stats_last_5mins : Average statistics in last 5 minutes. srep_last_sync : Time when synchronously replicated volume was last synchronized. srep_resync_percent : Percentage of resync progress for synchronously replicated volume. restore \u00b6 | restore(base_snap_id, **kwargs) Restore volume data from a previous snapshot. Parameters id : ID of the restored volume. base_snap_id : ID of the snapshot to which this the volume is restored. move \u00b6 | move(dest_pool_id, **kwargs) Move a volume and its related volumes to another pool. To change a single volume's folder assignment (while remaining in the same pool), use a volume update operation to change the folder_id attribute. Parameters id : ID of the volume to move. dest_pool_id : ID of the destination pool or folder. Specify a pool ID when the volumes should not be in a folder; otherwise, specify a folder ID and the pool will be derived from the folder. force_vvol : Forcibly move a Virtual Volume. Moving Virtual Volume is disruptive to the vCenter, hence it should only be done by the VASA Provider (VP). This flag should only be set by the VP when it calls this API. bulk_move \u00b6 | bulk_move(dest_pool_id, vol_ids, **kwargs) Move volumes and their related volumes to another pool. To change a single volume's folder assignment (while remaining in the same pool), use a volume update operation to change the folder_id attribute. Parameters vol_ids : IDs of the volumes to move. dest_pool_id : ID of the destination pool or folder. Specify a pool ID when the volumes should not be in a folder; otherwise, specify a folder ID and the pool will be derived from the folder. force_vvol : Forcibly move a Virtual Volume. Moving Virtual Volume is disruptive to the vCenter, hence it should only be done by the VASA Provider (VP). This flag should only be set by the VP when it calls this API. abort_move \u00b6 | abort_move(**kwargs) Abort the in-progress move of the specified volume to another pool. Parameters id : ID of the volume to stop moving to a different pool. bulk_set_dedupe \u00b6 | bulk_set_dedupe(dedupe_enabled, vol_ids, **kwargs) Enable or disable dedupe on a list of volumes. If the volumes are not dedupe capable, the operation will fail for the specified volume. Parameters vol_ids : IDs of the volumes to enable/disable dedupe. dedupe_enabled : Dedupe property to be applied to the list of volumes. bulk_set_online_and_offline \u00b6 | bulk_set_online_and_offline(online, vol_ids, **kwargs) Bring a list of volumes online or offline. Parameters vol_ids : IDs of the volumes to set online or offline. online : Desired state of the volumes. \"true\" for online, \"false\" for offline. online \u00b6 | online() Bring volume online. offline \u00b6 | offline() Take volume offline. associate \u00b6 | associate(volcoll) Associate the volume to a volume_collection. dissociate \u00b6 | dissociate() Dissociate the volume from a volume collection. VolumeList \u00b6 class VolumeList(Collection) restore \u00b6 | restore(id, base_snap_id, **kwargs) Restore volume data from a previous snapshot. Parameters id : ID of the restored volume. base_snap_id : ID of the snapshot to which this the volume is restored. move \u00b6 | move(id, dest_pool_id, **kwargs) Move a volume and its related volumes to another pool. To change a single volume's folder assignment (while remaining in the same pool), use a volume update operation to change the folder_id attribute. Parameters id : ID of the volume to move. dest_pool_id : ID of the destination pool or folder. Specify a pool ID when the volumes should not be in a folder; otherwise, specify a folder ID and the pool will be derived from the folder. force_vvol : Forcibly move a Virtual Volume. Moving Virtual Volume is disruptive to the vCenter, hence it should only be done by the VASA Provider (VP). This flag should only be set by the VP when it calls this API. bulk_move \u00b6 | bulk_move(dest_pool_id, vol_ids, **kwargs) Move volumes and their related volumes to another pool. To change a single volume's folder assignment (while remaining in the same pool), use a volume update operation to change the folder_id attribute. Parameters vol_ids : IDs of the volumes to move. dest_pool_id : ID of the destination pool or folder. Specify a pool ID when the volumes should not be in a folder; otherwise, specify a folder ID and the pool will be derived from the folder. force_vvol : Forcibly move a Virtual Volume. Moving Virtual Volume is disruptive to the vCenter, hence it should only be done by the VASA Provider (VP). This flag should only be set by the VP when it calls this API. abort_move \u00b6 | abort_move(id, **kwargs) Abort the in-progress move of the specified volume to another pool. Parameters id : ID of the volume to stop moving to a different pool. bulk_set_dedupe \u00b6 | bulk_set_dedupe(dedupe_enabled, vol_ids, **kwargs) Enable or disable dedupe on a list of volumes. If the volumes are not dedupe capable, the operation will fail for the specified volume. Parameters vol_ids : IDs of the volumes to enable/disable dedupe. dedupe_enabled : Dedupe property to be applied to the list of volumes. bulk_set_online_and_offline \u00b6 | bulk_set_online_and_offline(online, vol_ids, **kwargs) Bring a list of volumes online or offline. Parameters vol_ids : IDs of the volumes to set online or offline. online : Desired state of the volumes. \"true\" for online, \"false\" for offline. online \u00b6 | online(id) Bring volume online. Parameters id : ID of the volume. offline \u00b6 | offline(id) Take volume offline. Parameters id : ID of the volume. associate \u00b6 | associate(id, volcoll) Associate the volume to a volume_collection Parameters id : ID of the volume. dissociate \u00b6 | dissociate(id) Dissociate the volume from a volume collection Parameters id : ID of the volume.","title":"volumes"},{"location":"api/volumes.html#table_of_contents","text":"nimbleclient.v1.api.volumes Volume restore move bulk_move abort_move bulk_set_dedupe bulk_set_online_and_offline online offline associate dissociate VolumeList restore move bulk_move abort_move bulk_set_dedupe bulk_set_online_and_offline online offline associate dissociate","title":"Table of Contents"},{"location":"api/volumes.html#nimbleclientv1apivolumes","text":"","title":"nimbleclient.v1.api.volumes"},{"location":"api/volumes.html#volume","text":"class Volume(Resource) Volumes are the basic storage units from which the total capacity is apportioned. The terms volume and LUN are used interchangeably.The number of volumes per array depends on storage allocation. Parameters id : Identifier for the volume. name : Name of the volume. full_name : Fully qualified name of volume. search_name : Name of volume used for object search. size : Volume size in mebibytes. Size is required for creating a volume but not for cloning an existing volume. description : Text description of volume. perfpolicy_name : Name of performance policy. perfpolicy_id : Identifier of the performance policy. After creating a volume, performance policy for the volume can only be changed to another performance policy with same block size. reserve : Amount of space to reserve for this volume as a percentage of volume size. warn_level : This attribute is deprecated. Alert threshold for the volume's mapped usage, expressed as a percentage of the volume's size. When the volume's mapped usage exceeds warn_level, the array issues an alert. If this option is not specified, array default volume warn level setting is used to decide the warning level for this volume. limit : Limit on the volume's mapped usage, expressed as a percentage of the volume's size. When the volume's mapped usage exceeds limit, the volume will be offlined or made non-writable. If this option is not specified, array default volume limit setting is used to decide the limit for this volume. snap_reserve : Amount of space to reserve for snapshots of this volume as a percentage of volume size. snap_warn_level : Threshold for available space as a percentage of volume size below which an alert is raised. snap_limit : This attribute is deprecated. The array does not limit a volume's snapshot space usage. The attribute is ignored on input and returns max int64 on output. snap_limit_percent : This attribute is deprecated. The array does not limit a volume's snapshot space usage. The attribute is ignored on input and returns -1 on output. num_snaps : Number of live, non-hidden snapshots for this volume. projected_num_snaps : Deprecated. Projected number of snapshots (including scheduled and manual) for this volume. online : Online state of volume, available for host initiators to establish connections. owned_by_group : Name of group that currently owns the volume. owned_by_group_id : ID of group that currently owns the volume. multi_initiator : For iSCSI Volume Target, this flag indicates whether the volume and its snapshots can be accessed from multiple initiators at the same time. The default is false. For iSCSI Group Target or FC access protocol, the attribute cannot be modified and always reads as false. iscsi_target_scope : This indicates whether volume is exported under iSCSI Group Target or iSCSI Volume Target. This attribute is only meaningful to iSCSI system. On FC system, all volumes are exported under the FC Group Target. In create operation, the volume's target type will be set by this attribute. If not specified, it will be set as the group-setting. In clone operation, the clone's target type will inherit from the parent' setting. pool_name : Name of the pool where the volume resides. Volume data will be distributed across arrays over which specified pool is defined. If pool option is not specified, volume is assigned to the default pool. pool_id : Identifier associated with the pool in the storage pool table. read_only : Volume is read-only. serial_number : Identifier associated with the volume for the SCSI protocol. secondary_serial_number : Secondary identifier associated with the volume for the SCSI protocol. target_name : The iSCSI Qualified Name (IQN) or the Fibre Channel World Wide Node Name (WWNN) of the target volume. block_size : Size in bytes of blocks in the volume. offline_reason : Volume offline reason. clone : Whether this volume is a clone. Use this attribute in combination with name and base_snap_id to create a clone by setting clone = true. parent_vol_name : Name of parent volume. parent_vol_id : Parent volume ID. base_snap_name : Name of base snapshot. base_snap_id : Base snapshot ID. This attribute is required together with name and clone when cloning a volume with the create operation. replication_role : Replication role that this volume performs. volcoll_name : Name of volume collection of which this volume is a member. volcoll_id : ID of volume collection of which this volume is a member. Use this attribute in update operation to associate or dissociate volumes with or from volume collections. When associating, set this attribute to the ID of the volume collection. When dissociating, set this attribute to empty string. agent_type : External management agent type. force : Forcibly offline, reduce size or change read-only status a volume. creation_time : Time when this volume was created. last_modified : Time when this volume was last modified. protection_type : Specifies if volume is protected with schedules. If protected, indicate whether replication is setup. last_snap : Last snapshot for this volume. last_replicated_snap : Last replicated snapshot for this volume. dest_pool_name : Name of the destination pool where the volume is moving to. dest_pool_id : ID of the destination pool where the volume is moving to. move_start_time : The Start time when this volume was moved. move_aborting : This indicates whether the move of the volume is aborting or not. move_bytes_migrated : The bytes of volume which have been moved. move_bytes_remaining : The bytes of volume which have not been moved. move_est_compl_time : The estimated time of completion of a move. usage_valid : This indicates whether usage information of volume and snapshots are valid or not. space_usage_level : Indicates space usage level based on warning level. total_usage_bytes : Sum of volume mapped usage and uncompressed backup data(including pending deletes) in bytes of this volume. vol_usage_compressed_bytes : Compressed data in bytes for this volume. vol_usage_uncompressed_bytes : Uncompressed data in bytes for this volume. vol_usage_mapped_bytes : Mapped data in bytes for this volume. snap_usage_compressed_bytes : Sum of compressed backup data in bytes stored in snapshots of this volume. snap_usage_uncompressed_bytes : Sum of uncompressed unique backup data in bytes stored in snapshots of this volume. snap_usage_populated_bytes : Sum of backup data in bytes stored in snapshots of this volume without accounting for the sharing of data between snapshots. cache_pinned : If set to true, all the contents of this volume are kept in flash cache. This provides for consistent performance guarantees for all types of workloads. The amount of flash needed to pin the volume is equal to the limit for the volume. pinned_cache_size : The amount of flash pinned on the volume. cache_needed_for_pin : The amount of flash needed to pin the volume. upstream_cache_pinned : This indicates whether the upstream volume is cache pinned or not. cache_policy : Cache policy applied to the volume. thinly_provisioned : Set volume's provisioning level to thin. Also advertises volume as thinly provisioned to initiators supporting thin provisioning. For such volumes, soft limit notification is set to initiators when the volume space usage crosses its volume_warn_level. Default is yes. The volume's space is provisioned immediately, but for advertising status, this change takes effect only for new connections to the volume. Initiators must disconnect and reconnect for the new setting to be take effect at the initiator level consistently. vol_state : Status of the volume. online_snaps : The list of online snapshots of this volume. num_connections : Number of connections of this volume. num_iscsi_connections : Number of iscsi connections of this volume. num_fc_connections : Number of Fibre Channel connections of this volume. access_control_records : List of access control records that apply to this volume. inherit_acl : In a volume clone operation, if both the parent and the clone have no external management agent (their agent_type property is \"none\"), then inherit_acl controls whether the clone will inherit a copy of the parent's access control list. If either the parent or the clone have an external management agent, then the clone will not inherit the parent's access control list. encryption_cipher : The encryption cipher of the volume. app_uuid : Application identifier of volume. folder_id : ID of the folder holding this volume. folder_name : Name of the folder holding this volume. It can be empty. metadata : Key-value pairs that augment an volume's attributes. iscsi_sessions : List of iSCSI sessions connected to this volume. fc_sessions : List of Fibre Channel sessions connected to this volume. caching_enabled : Indicate caching the volume is enabled. previously_deduped : Indicate whether dedupe has ever been enabled on this volume. dedupe_enabled : Indicate whether dedupe is enabled. vpd_t10 : The volume's T10 Vendor ID-based identifier. vpd_ieee0 : The first 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. vpd_ieee1 : The last 64 bits of the volume's EUI-64 identifier, encoded as a hexadecimal string. app_category : Application category that the volume belongs to. limit_iops : IOPS limit for this volume. If limit_iops is not specified when a volume is created, or if limit_iops is set to -1, then the volume has no IOPS limit. If limit_iops is not specified while creating a clone, IOPS limit of parent volume will be used as limit. IOPS limit should be in range [256, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops <= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). limit_mbps : Throughput limit for this volume in MB/s. If limit_mbps is not specified when a volume is created, or if limit_mbps is set to -1, then the volume has no MBPS limit. MBPS limit should be in range [1, 4294967294] or -1 for unlimited. If both limit_iops and limit_mbps are specified, limit_mbps must not be hit before limit_iops. In other words, IOPS and MBPS limits should honor limit_iops <= ((limit_mbps MB/s * 2^20 B/MB) / block_size B). needs_content_repl : Indicates whether the volume needs content based replication. content_repl_errors_found : Indicates whether the last content based replication had errors. last_content_snap_br_cg_uid : The branch cg uid of the content based snapshot that was last replicated. last_content_snap_br_gid : The branch gid of the content based snapshot that was last replicated. last_content_snap_id : The ID of the content based snapshot that was last replicated. cksum_last_verified : Last checksum verification time. pre_filter : Pre-filtering criteria. avg_stats_last_5mins : Average statistics in last 5 minutes. srep_last_sync : Time when synchronously replicated volume was last synchronized. srep_resync_percent : Percentage of resync progress for synchronously replicated volume.","title":"Volume"},{"location":"api/volumes.html#restore","text":"| restore(base_snap_id, **kwargs) Restore volume data from a previous snapshot. Parameters id : ID of the restored volume. base_snap_id : ID of the snapshot to which this the volume is restored.","title":"restore"},{"location":"api/volumes.html#move","text":"| move(dest_pool_id, **kwargs) Move a volume and its related volumes to another pool. To change a single volume's folder assignment (while remaining in the same pool), use a volume update operation to change the folder_id attribute. Parameters id : ID of the volume to move. dest_pool_id : ID of the destination pool or folder. Specify a pool ID when the volumes should not be in a folder; otherwise, specify a folder ID and the pool will be derived from the folder. force_vvol : Forcibly move a Virtual Volume. Moving Virtual Volume is disruptive to the vCenter, hence it should only be done by the VASA Provider (VP). This flag should only be set by the VP when it calls this API.","title":"move"},{"location":"api/volumes.html#bulk_move","text":"| bulk_move(dest_pool_id, vol_ids, **kwargs) Move volumes and their related volumes to another pool. To change a single volume's folder assignment (while remaining in the same pool), use a volume update operation to change the folder_id attribute. Parameters vol_ids : IDs of the volumes to move. dest_pool_id : ID of the destination pool or folder. Specify a pool ID when the volumes should not be in a folder; otherwise, specify a folder ID and the pool will be derived from the folder. force_vvol : Forcibly move a Virtual Volume. Moving Virtual Volume is disruptive to the vCenter, hence it should only be done by the VASA Provider (VP). This flag should only be set by the VP when it calls this API.","title":"bulk_move"},{"location":"api/volumes.html#abort_move","text":"| abort_move(**kwargs) Abort the in-progress move of the specified volume to another pool. Parameters id : ID of the volume to stop moving to a different pool.","title":"abort_move"},{"location":"api/volumes.html#bulk_set_dedupe","text":"| bulk_set_dedupe(dedupe_enabled, vol_ids, **kwargs) Enable or disable dedupe on a list of volumes. If the volumes are not dedupe capable, the operation will fail for the specified volume. Parameters vol_ids : IDs of the volumes to enable/disable dedupe. dedupe_enabled : Dedupe property to be applied to the list of volumes.","title":"bulk_set_dedupe"},{"location":"api/volumes.html#bulk_set_online_and_offline","text":"| bulk_set_online_and_offline(online, vol_ids, **kwargs) Bring a list of volumes online or offline. Parameters vol_ids : IDs of the volumes to set online or offline. online : Desired state of the volumes. \"true\" for online, \"false\" for offline.","title":"bulk_set_online_and_offline"},{"location":"api/volumes.html#online","text":"| online() Bring volume online.","title":"online"},{"location":"api/volumes.html#offline","text":"| offline() Take volume offline.","title":"offline"},{"location":"api/volumes.html#associate","text":"| associate(volcoll) Associate the volume to a volume_collection.","title":"associate"},{"location":"api/volumes.html#dissociate","text":"| dissociate() Dissociate the volume from a volume collection.","title":"dissociate"},{"location":"api/volumes.html#volumelist","text":"class VolumeList(Collection)","title":"VolumeList"},{"location":"api/volumes.html#restore_1","text":"| restore(id, base_snap_id, **kwargs) Restore volume data from a previous snapshot. Parameters id : ID of the restored volume. base_snap_id : ID of the snapshot to which this the volume is restored.","title":"restore"},{"location":"api/volumes.html#move_1","text":"| move(id, dest_pool_id, **kwargs) Move a volume and its related volumes to another pool. To change a single volume's folder assignment (while remaining in the same pool), use a volume update operation to change the folder_id attribute. Parameters id : ID of the volume to move. dest_pool_id : ID of the destination pool or folder. Specify a pool ID when the volumes should not be in a folder; otherwise, specify a folder ID and the pool will be derived from the folder. force_vvol : Forcibly move a Virtual Volume. Moving Virtual Volume is disruptive to the vCenter, hence it should only be done by the VASA Provider (VP). This flag should only be set by the VP when it calls this API.","title":"move"},{"location":"api/volumes.html#bulk_move_1","text":"| bulk_move(dest_pool_id, vol_ids, **kwargs) Move volumes and their related volumes to another pool. To change a single volume's folder assignment (while remaining in the same pool), use a volume update operation to change the folder_id attribute. Parameters vol_ids : IDs of the volumes to move. dest_pool_id : ID of the destination pool or folder. Specify a pool ID when the volumes should not be in a folder; otherwise, specify a folder ID and the pool will be derived from the folder. force_vvol : Forcibly move a Virtual Volume. Moving Virtual Volume is disruptive to the vCenter, hence it should only be done by the VASA Provider (VP). This flag should only be set by the VP when it calls this API.","title":"bulk_move"},{"location":"api/volumes.html#abort_move_1","text":"| abort_move(id, **kwargs) Abort the in-progress move of the specified volume to another pool. Parameters id : ID of the volume to stop moving to a different pool.","title":"abort_move"},{"location":"api/volumes.html#bulk_set_dedupe_1","text":"| bulk_set_dedupe(dedupe_enabled, vol_ids, **kwargs) Enable or disable dedupe on a list of volumes. If the volumes are not dedupe capable, the operation will fail for the specified volume. Parameters vol_ids : IDs of the volumes to enable/disable dedupe. dedupe_enabled : Dedupe property to be applied to the list of volumes.","title":"bulk_set_dedupe"},{"location":"api/volumes.html#bulk_set_online_and_offline_1","text":"| bulk_set_online_and_offline(online, vol_ids, **kwargs) Bring a list of volumes online or offline. Parameters vol_ids : IDs of the volumes to set online or offline. online : Desired state of the volumes. \"true\" for online, \"false\" for offline.","title":"bulk_set_online_and_offline"},{"location":"api/volumes.html#online_1","text":"| online(id) Bring volume online. Parameters id : ID of the volume.","title":"online"},{"location":"api/volumes.html#offline_1","text":"| offline(id) Take volume offline. Parameters id : ID of the volume.","title":"offline"},{"location":"api/volumes.html#associate_1","text":"| associate(id, volcoll) Associate the volume to a volume_collection Parameters id : ID of the volume.","title":"associate"},{"location":"api/volumes.html#dissociate_1","text":"| dissociate(id) Dissociate the volume from a volume collection Parameters id : ID of the volume.","title":"dissociate"},{"location":"api/witnesses.html","text":"Table of Contents \u00b6 nimbleclient.v1.api.witnesses Witness test WitnessList test nimbleclient.v1.api.witnesses \u00b6 Witness \u00b6 class Witness(Resource) Manage witness host configuration. Parameters id : Identifier of the witness configuration. username : Username of witness. This has to be a non-root that can login to the witness host. password : Password of witness. host : Hostname or ip addresses of witness. port : Port of witness. secure_mode : To verify the witness host against CA cert and to apply possible security modes. auto_switchover_messages : List of validation messages for automatic switchover of Group Management. This will be empty when there are no conflicts found. test \u00b6 | test(**kwargs) Tests and validates witness configuration between the array and the witness. Parameters id : ID of the witness. WitnessList \u00b6 class WitnessList(Collection) test \u00b6 | test(id, **kwargs) Tests and validates witness configuration between the array and the witness. Parameters id : ID of the witness.","title":"witnesses"},{"location":"api/witnesses.html#table_of_contents","text":"nimbleclient.v1.api.witnesses Witness test WitnessList test","title":"Table of Contents"},{"location":"api/witnesses.html#nimbleclientv1apiwitnesses","text":"","title":"nimbleclient.v1.api.witnesses"},{"location":"api/witnesses.html#witness","text":"class Witness(Resource) Manage witness host configuration. Parameters id : Identifier of the witness configuration. username : Username of witness. This has to be a non-root that can login to the witness host. password : Password of witness. host : Hostname or ip addresses of witness. port : Port of witness. secure_mode : To verify the witness host against CA cert and to apply possible security modes. auto_switchover_messages : List of validation messages for automatic switchover of Group Management. This will be empty when there are no conflicts found.","title":"Witness"},{"location":"api/witnesses.html#test","text":"| test(**kwargs) Tests and validates witness configuration between the array and the witness. Parameters id : ID of the witness.","title":"test"},{"location":"api/witnesses.html#witnesslist","text":"class WitnessList(Collection)","title":"WitnessList"},{"location":"api/witnesses.html#test_1","text":"| test(id, **kwargs) Tests and validates witness configuration between the array and the witness. Parameters id : ID of the witness.","title":"test"},{"location":"get_started/examples/index.html","text":"Overview \u00b6 These example workflows constitutes an introduction to the HPE Nimble Storage SDK for Python. It may be used to get familiar both HPE Nimble Storage and NimbleOS as a product as well as getting familiar with the SDK. The examples are available to browse on GitHub . Overview Setup Interactive explorer Individual workflows Create a volume List objects Create a snapshot Create initiator group Publish volume Detach volume Create a clone Create access control record Create a clone and publish Protect volume Configures encryption Setup \u00b6 Ensure Python 3.6+, pip and git is installed on your workstation (See Requirements for other dependencies). pip install nimble-sdk git clone https://github.com/hpe-storage/nimble-python-sdk cd nimble-python-sdk/workflows It's possible to run the example scripts interactively, but it's more convenient to configure the accompanied workflow_config.json : { \"hostname\":\"192.168.1.100\", # Set these to point to the array being used \"username\":\"admin\", \"password\":\"admin\", \"vol_name\":\"wfvol\", \"ig_name\":\"wfig\", \"mk_name\":\"default\", \"mk_phrase\":\"test-phrase11\", \"protection_sched\":\"ps1\" } Scripts can be run with the --query_login paramater to interactively login to the Nimble array (credentials are not stored anywhere). Tip All examples below assumes current working directory nimble-python-sdk/workflows Interactive explorer \u00b6 As a starting point, running the interactive explorer allows a user to interact with a Nimble array using the SDK. python nimble_sdk_helper.py Source code: nimble_sdk_helper.py Individual workflows \u00b6 Each workflow creates objects to manipulate. If it's not desirable to have objects lingering around on the array, run the scripts with the --cleanup parameter. Good to know The example outputs below is run in sequence running from the top on a clean array. Create a volume \u00b6 Creates a volume on the array. python create_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create Volume Running: Create Volume \"wfvol\": Created Id: 0649686580b78e0b16000000000000000000000017 Source code: create_volume.py List objects \u00b6 List objects on the array. python list_objects.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: List Objects Generating Objects... Create Volume \"wfvol0\": Created Id: 0649686580b78e0b16000000000000000000000018 Create Snapshot \"wfvolsnap0.0\": Created Id: 0449686580b78e0b1600000000000000210000004f Create Snapshot \"wfvolsnap0.1\": Created Id: 0449686580b78e0b16000000000000002100000050 Create Snapshot \"wfvolsnap0.2\": Created Id: 0449686580b78e0b16000000000000002100000051 Create Volume \"wfvol1\": Created Id: 0649686580b78e0b16000000000000000000000019 Create Snapshot \"wfvolsnap1.0\": Created Id: 0449686580b78e0b16000000000000002200000052 Create Snapshot \"wfvolsnap1.1\": Created Id: 0449686580b78e0b16000000000000002200000053 Create Snapshot \"wfvolsnap1.2\": Created Id: 0449686580b78e0b16000000000000002200000054 Running: Objects on Array: VOLUME: wfvol0, Id: 0649686580b78e0b16000000000000000000000018 SNAPSHOT: wfvolsnap0.0, Id: 0449686580b78e0b1600000000000000210000004f SNAPSHOT: wfvolsnap0.1, Id: 0449686580b78e0b16000000000000002100000050 SNAPSHOT: wfvolsnap0.2, Id: 0449686580b78e0b16000000000000002100000051 VOLUME: wfvol, Id: 0649686580b78e0b16000000000000000000000017 VOLUME: wfvol1, Id: 0649686580b78e0b16000000000000000000000019 SNAPSHOT: wfvolsnap1.0, Id: 0449686580b78e0b16000000000000002200000052 SNAPSHOT: wfvolsnap1.1, Id: 0449686580b78e0b16000000000000002200000053 SNAPSHOT: wfvolsnap1.2, Id: 0449686580b78e0b16000000000000002200000054 Source code: list_objects.py Create a snapshot \u00b6 Creates a snapshot on an example volume. python create_snapshot.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create Snapshot Running: Create Volume \"wfvol\": Already exists. Continuing. Create Snapshot \"wfvolsnap\": Created Id: 0449686580b78e0b16000000000000002000000055 Source code: create_snapshot.py Create initiator group \u00b6 Create an initiator group. python create_and_update_initiator_group.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create And Update Initiator Group Running: Create Initiator Group \"wfig\": Created Id: 0249686580b78e0b16000000000000000000000005 Current initiator count: 0 Added initiator \"wftest-itor1\": {'label': 'wftest-itor1', 'ip_address': '1.1.1.1', 'iqn': 'iqn.1992-01.com.example:storage.tape1.sys1.xyz'} Current initiator count: 1 Source code: create_and_update_initiator_group.py Publish volume \u00b6 Publishes a volume to a host. python publish_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Publish Volume Running: Create Volume \"wfvol\": Already exists. Continuing. Create Initiator Group \"wfig\": Already exists. Continuing. Create Access Control Record: Created Id: 0d49686580b78e0b16000000000000000000000004 Source code: publish_volume.py Detach volume \u00b6 Detach volume from a host. python detach_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Detach Volume Running: Create Volume \"wfvol\": Already exists. Continuing. Create Initiator Group \"wfig\": Already exists. Continuing. Create Access Control Record: Already exists. Continuing. Cleanup Acccess Control Record: Deleted Id: 0d49686580b78e0b16000000000000000000000004 Cleanup Initiator Group \"wfig\": Deleted Id: 0249686580b78e0b16000000000000000000000005 Cleanup Vol \"wfvol\": Offlined and deleted Id: 0649686580b78e0b16000000000000000000000017 Source code: detach_volume.py Create a clone \u00b6 Create a clone from a snapshot. python create_clone.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create Clone Running: Create Volume \"wfvol\": Created Id: 0649686580b78e0b1600000000000000000000001a Create Snapshot \"wfvolsnap\": Created Id: 0449686580b78e0b16000000000000002300000056 Create Clone \"wfvolclone\": Created Id: 0649686580b78e0b1600000000000000000000001b Source code: create_clone.py Create access control record \u00b6 Create an access control record (ACR) for a volume. python create_access_control_record.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create Access control Record Running: Create Volume \"wfvol\": Already exists. Continuing. Create Initiator Group \"wfig\": Created Id: 0249686580b78e0b16000000000000000000000006 Create Access Control Record: Created Id: 0d49686580b78e0b16000000000000000000000005 Source code: create_access_control_record.py Create a clone and publish \u00b6 Create a clone from a snapshot and publish to a host. python clone_and_publish_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Clone And Publish Volume Running: Create Volume \"wfvol\": Already exists. Continuing. Create Snapshot \"wfvolsnap\": Already exists. Continuing. Create Clone \"wfvolclone\": Already exists. Continuing. Create Initiator Group \"wfvolcloneig\": Created Id: 0249686580b78e0b16000000000000000000000007 Create Access Control Record: Created Id: 0d49686580b78e0b16000000000000000000000006 Source code: clone_and_publish_volume.py Protect volume \u00b6 Protect a volume with a volume collection and protection schedule. python protect_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Protect Volume Running: Create Volume \"wfvol\": Already exists. Continuing. Create Volume Collection \"wfvolvolcoll\": Created Id: 0749686580b78e0b16000000000000000000000006 Associate Volume: Volume \"wfvol\" associated with volume vollection \"wfvolvolcoll\" Create Protection Schedule \"ps1\": Created Id: 0c49686580b78e0b1600000000000000000000000a Source code: protect_volume.py Configures encryption \u00b6 Setup encryption on the Nimble array. python configure_encryption.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Configure Encryption Running: Got group: \"nva-test-grp\", Id: 0049686580b78e0b16000000000000000000000001 Current encryption: {'master_key_set': False, 'mode': 'none', 'scope': 'none', 'cipher': 'none', 'encryption_active': False} Create Master Key \"default\": Created Id: 2449686580b78e0b16000000000000000000000001 Create Encrypted Volume \"wfvolencrypted\": Created Id: 0649686580b78e0b16000000000000000000000013 Updated encryption: {'master_key_set': True, 'mode': 'available', 'scope': 'group', 'cipher': 'aes_256_xts', 'encryption_active': True} Modified encryption: {'master_key_set': True, 'mode': 'secure', 'scope': 'group', 'cipher': 'aes_256_xts', 'encryption_active': True} Source code: configure_encryption.py","title":"Example workflows"},{"location":"get_started/examples/index.html#overview","text":"These example workflows constitutes an introduction to the HPE Nimble Storage SDK for Python. It may be used to get familiar both HPE Nimble Storage and NimbleOS as a product as well as getting familiar with the SDK. The examples are available to browse on GitHub . Overview Setup Interactive explorer Individual workflows Create a volume List objects Create a snapshot Create initiator group Publish volume Detach volume Create a clone Create access control record Create a clone and publish Protect volume Configures encryption","title":"Overview"},{"location":"get_started/examples/index.html#setup","text":"Ensure Python 3.6+, pip and git is installed on your workstation (See Requirements for other dependencies). pip install nimble-sdk git clone https://github.com/hpe-storage/nimble-python-sdk cd nimble-python-sdk/workflows It's possible to run the example scripts interactively, but it's more convenient to configure the accompanied workflow_config.json : { \"hostname\":\"192.168.1.100\", # Set these to point to the array being used \"username\":\"admin\", \"password\":\"admin\", \"vol_name\":\"wfvol\", \"ig_name\":\"wfig\", \"mk_name\":\"default\", \"mk_phrase\":\"test-phrase11\", \"protection_sched\":\"ps1\" } Scripts can be run with the --query_login paramater to interactively login to the Nimble array (credentials are not stored anywhere). Tip All examples below assumes current working directory nimble-python-sdk/workflows","title":"Setup"},{"location":"get_started/examples/index.html#interactive_explorer","text":"As a starting point, running the interactive explorer allows a user to interact with a Nimble array using the SDK. python nimble_sdk_helper.py Source code: nimble_sdk_helper.py","title":"Interactive explorer"},{"location":"get_started/examples/index.html#individual_workflows","text":"Each workflow creates objects to manipulate. If it's not desirable to have objects lingering around on the array, run the scripts with the --cleanup parameter. Good to know The example outputs below is run in sequence running from the top on a clean array.","title":"Individual workflows"},{"location":"get_started/examples/index.html#create_a_volume","text":"Creates a volume on the array. python create_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create Volume Running: Create Volume \"wfvol\": Created Id: 0649686580b78e0b16000000000000000000000017 Source code: create_volume.py","title":"Create a volume"},{"location":"get_started/examples/index.html#list_objects","text":"List objects on the array. python list_objects.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: List Objects Generating Objects... Create Volume \"wfvol0\": Created Id: 0649686580b78e0b16000000000000000000000018 Create Snapshot \"wfvolsnap0.0\": Created Id: 0449686580b78e0b1600000000000000210000004f Create Snapshot \"wfvolsnap0.1\": Created Id: 0449686580b78e0b16000000000000002100000050 Create Snapshot \"wfvolsnap0.2\": Created Id: 0449686580b78e0b16000000000000002100000051 Create Volume \"wfvol1\": Created Id: 0649686580b78e0b16000000000000000000000019 Create Snapshot \"wfvolsnap1.0\": Created Id: 0449686580b78e0b16000000000000002200000052 Create Snapshot \"wfvolsnap1.1\": Created Id: 0449686580b78e0b16000000000000002200000053 Create Snapshot \"wfvolsnap1.2\": Created Id: 0449686580b78e0b16000000000000002200000054 Running: Objects on Array: VOLUME: wfvol0, Id: 0649686580b78e0b16000000000000000000000018 SNAPSHOT: wfvolsnap0.0, Id: 0449686580b78e0b1600000000000000210000004f SNAPSHOT: wfvolsnap0.1, Id: 0449686580b78e0b16000000000000002100000050 SNAPSHOT: wfvolsnap0.2, Id: 0449686580b78e0b16000000000000002100000051 VOLUME: wfvol, Id: 0649686580b78e0b16000000000000000000000017 VOLUME: wfvol1, Id: 0649686580b78e0b16000000000000000000000019 SNAPSHOT: wfvolsnap1.0, Id: 0449686580b78e0b16000000000000002200000052 SNAPSHOT: wfvolsnap1.1, Id: 0449686580b78e0b16000000000000002200000053 SNAPSHOT: wfvolsnap1.2, Id: 0449686580b78e0b16000000000000002200000054 Source code: list_objects.py","title":"List objects"},{"location":"get_started/examples/index.html#create_a_snapshot","text":"Creates a snapshot on an example volume. python create_snapshot.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create Snapshot Running: Create Volume \"wfvol\": Already exists. Continuing. Create Snapshot \"wfvolsnap\": Created Id: 0449686580b78e0b16000000000000002000000055 Source code: create_snapshot.py","title":"Create a snapshot"},{"location":"get_started/examples/index.html#create_initiator_group","text":"Create an initiator group. python create_and_update_initiator_group.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create And Update Initiator Group Running: Create Initiator Group \"wfig\": Created Id: 0249686580b78e0b16000000000000000000000005 Current initiator count: 0 Added initiator \"wftest-itor1\": {'label': 'wftest-itor1', 'ip_address': '1.1.1.1', 'iqn': 'iqn.1992-01.com.example:storage.tape1.sys1.xyz'} Current initiator count: 1 Source code: create_and_update_initiator_group.py","title":"Create initiator group"},{"location":"get_started/examples/index.html#publish_volume","text":"Publishes a volume to a host. python publish_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Publish Volume Running: Create Volume \"wfvol\": Already exists. Continuing. Create Initiator Group \"wfig\": Already exists. Continuing. Create Access Control Record: Created Id: 0d49686580b78e0b16000000000000000000000004 Source code: publish_volume.py","title":"Publish volume"},{"location":"get_started/examples/index.html#detach_volume","text":"Detach volume from a host. python detach_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Detach Volume Running: Create Volume \"wfvol\": Already exists. Continuing. Create Initiator Group \"wfig\": Already exists. Continuing. Create Access Control Record: Already exists. Continuing. Cleanup Acccess Control Record: Deleted Id: 0d49686580b78e0b16000000000000000000000004 Cleanup Initiator Group \"wfig\": Deleted Id: 0249686580b78e0b16000000000000000000000005 Cleanup Vol \"wfvol\": Offlined and deleted Id: 0649686580b78e0b16000000000000000000000017 Source code: detach_volume.py","title":"Detach volume"},{"location":"get_started/examples/index.html#create_a_clone","text":"Create a clone from a snapshot. python create_clone.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create Clone Running: Create Volume \"wfvol\": Created Id: 0649686580b78e0b1600000000000000000000001a Create Snapshot \"wfvolsnap\": Created Id: 0449686580b78e0b16000000000000002300000056 Create Clone \"wfvolclone\": Created Id: 0649686580b78e0b1600000000000000000000001b Source code: create_clone.py","title":"Create a clone"},{"location":"get_started/examples/index.html#create_access_control_record","text":"Create an access control record (ACR) for a volume. python create_access_control_record.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Create Access control Record Running: Create Volume \"wfvol\": Already exists. Continuing. Create Initiator Group \"wfig\": Created Id: 0249686580b78e0b16000000000000000000000006 Create Access Control Record: Created Id: 0d49686580b78e0b16000000000000000000000005 Source code: create_access_control_record.py","title":"Create access control record"},{"location":"get_started/examples/index.html#create_a_clone_and_publish","text":"Create a clone from a snapshot and publish to a host. python clone_and_publish_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Clone And Publish Volume Running: Create Volume \"wfvol\": Already exists. Continuing. Create Snapshot \"wfvolsnap\": Already exists. Continuing. Create Clone \"wfvolclone\": Already exists. Continuing. Create Initiator Group \"wfvolcloneig\": Created Id: 0249686580b78e0b16000000000000000000000007 Create Access Control Record: Created Id: 0d49686580b78e0b16000000000000000000000006 Source code: clone_and_publish_volume.py","title":"Create a clone and publish"},{"location":"get_started/examples/index.html#protect_volume","text":"Protect a volume with a volume collection and protection schedule. python protect_volume.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Protect Volume Running: Create Volume \"wfvol\": Already exists. Continuing. Create Volume Collection \"wfvolvolcoll\": Created Id: 0749686580b78e0b16000000000000000000000006 Associate Volume: Volume \"wfvol\" associated with volume vollection \"wfvolvolcoll\" Create Protection Schedule \"ps1\": Created Id: 0c49686580b78e0b1600000000000000000000000a Source code: protect_volume.py","title":"Protect volume"},{"location":"get_started/examples/index.html#configures_encryption","text":"Setup encryption on the Nimble array. python configure_encryption.py Attempting to establish connection to array: Hostname: 192.168.59.128 Username: admin Connection successful! WORKFLOW: Configure Encryption Running: Got group: \"nva-test-grp\", Id: 0049686580b78e0b16000000000000000000000001 Current encryption: {'master_key_set': False, 'mode': 'none', 'scope': 'none', 'cipher': 'none', 'encryption_active': False} Create Master Key \"default\": Created Id: 2449686580b78e0b16000000000000000000000001 Create Encrypted Volume \"wfvolencrypted\": Created Id: 0649686580b78e0b16000000000000000000000013 Updated encryption: {'master_key_set': True, 'mode': 'available', 'scope': 'group', 'cipher': 'aes_256_xts', 'encryption_active': True} Modified encryption: {'master_key_set': True, 'mode': 'secure', 'scope': 'group', 'cipher': 'aes_256_xts', 'encryption_active': True} Source code: configure_encryption.py","title":"Configures encryption"},{"location":"get_started/install/index.html","text":"Install using pip \u00b6 The HPE Nimble Storage SDK for Python may be installed the Python Package Installer , pip for short. Pip is usually installed with Python. It varies from host operating system and distribution on how to get pip installed. Please refer to your platform documentation on how to install pip . To install the latest version of the SDK: pip install nimble-sdk Install from source \u00b6 Alternatively, you can grab the latest source code from GitHub : git clone https://github.com/hpe-storage/nimble-python-sdk.git python setup.py install Note Python 3.6, a recent version of Requests and NimbleOS 5.0 is required.","title":"Installation"},{"location":"get_started/install/index.html#install_using_pip","text":"The HPE Nimble Storage SDK for Python may be installed the Python Package Installer , pip for short. Pip is usually installed with Python. It varies from host operating system and distribution on how to get pip installed. Please refer to your platform documentation on how to install pip . To install the latest version of the SDK: pip install nimble-sdk","title":"Install using pip"},{"location":"get_started/install/index.html#install_from_source","text":"Alternatively, you can grab the latest source code from GitHub : git clone https://github.com/hpe-storage/nimble-python-sdk.git python setup.py install Note Python 3.6, a recent version of Requests and NimbleOS 5.0 is required.","title":"Install from source"},{"location":"get_started/using/index.html","text":"Using the SDK \u00b6 Refer to the API reference for indivual resource manipulations. This introduction illustrate how to use the SDK and the more advanced features. HPE Nimble Storage specific workflows can be found in the example workflows section. Using the SDK Using python interactively Manipulating resources Create a volume Create a volume with custom metadata List volumes Fetch volume attributes Assign a volume to an object Access object attributes Update volume attributes Access object methods Pagination Field filters List only resources with a certain name Expand object with limited resource attributes Using Fields Search for a volume wildcard Combining multiple Fields Complex Fields with AND and OR operators Using python interactively \u00b6 From scratch on a python prompt. $ python Python 3.7.7 (default, Mar 10 2020, 15:43:03) [Clang 11.0.0 (clang-1100.0.33.17)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from nimbleclient import NimOSClient >>> import pprint >>> api = NimOSClient('192.168.1.128', 'admin', 'admin') >>> Note All the examples below uses pprint for formatting purposes only. Manipulating resources \u00b6 Simple interactions with the volumes endpoint. Refer to the volumes API reference for more details. Create a volume \u00b6 >>> api.volumes.create('myvol1', size=1024, description='My first volume') <Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)> Create a volume with custom metadata \u00b6 >>> meta_data = {'mykey1': 'myval1', 'mykey2': 'myval2'} >>> api.volumes.create('myvol2', size=2048, description='My second volume', metadata=meta_data) <Volume(id=0649686580b78e0b16000000000000000000000005, name=myvol2)> List volumes \u00b6 >>> pprint.pprint(api.volumes.list()) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>, <Volume(id=0649686580b78e0b16000000000000000000000005, name=myvol2)>] Fetch volume attributes \u00b6 >>> pprint.pprint(api.volumes.get('0649686580b78e0b16000000000000000000000005').attrs) {'access_control_records': None, 'agent_type': 'none', 'app_category': 'Other', 'app_uuid': '', 'avg_stats_last_5mins': {'combined_iops': 0, 'combined_latency': 0, 'combined_throughput': 0, 'read_iops': 0, 'read_latency': 0, 'read_throughput': 0, 'write_iops': 0, 'write_latency': 0, 'write_throughput': 0}, 'base_snap_id': '', 'base_snap_name': '', 'block_size': 4096, 'cache_needed_for_pin': 2147483648, 'cache_pinned': False, 'cache_policy': 'normal', 'caching_enabled': True, 'cksum_last_verified': 0, 'clone': False, 'content_repl_errors_found': False, 'creation_time': 1573161873, 'dedupe_enabled': False, 'description': 'My second volume', 'dest_pool_id': '', 'dest_pool_name': '', 'encryption_cipher': 'none', 'fc_sessions': None, 'folder_id': '', 'folder_name': '', 'full_name': 'default:/myvol2', 'id': '0649686580b78e0b16000000000000000000000005', 'iscsi_sessions': None, 'iscsi_target_scope': 'group', 'last_content_snap_br_cg_uid': 0, 'last_content_snap_br_gid': 0, 'last_content_snap_id': 0, 'last_modified': 1573161873, 'last_replicated_snap': None, 'last_snap': None, 'limit': 100, 'limit_iops': -1, 'limit_mbps': -1, 'metadata': [{'key': 'mykey2', 'value': 'myval2'}, {'key': 'mykey1', 'value': 'myval1'}], 'move_aborting': False, 'move_bytes_migrated': 0, 'move_bytes_remaining': 0, 'move_est_compl_time': 0, 'move_start_time': 0, 'multi_initiator': False, 'name': 'myvol2', 'needs_content_repl': False, 'num_connections': 0, 'num_fc_connections': 0, 'num_iscsi_connections': 0, 'num_snaps': 0, 'offline_reason': None, 'online': True, 'online_snaps': None, 'owned_by_group': 'nva-test-grp', 'owned_by_group_id': '0049686580b78e0b16000000000000000000000001', 'parent_vol_id': '', 'parent_vol_name': '', 'perfpolicy_id': '0349686580b78e0b16000000000000000000000001', 'perfpolicy_name': 'default', 'pinned_cache_size': 0, 'pool_id': '0a49686580b78e0b16000000000000000000000001', 'pool_name': 'default', 'previously_deduped': False, 'projected_num_snaps': 0, 'protection_type': 'unprotected', 'read_only': False, 'replication_role': 'no_replication', 'reserve': 0, 'search_name': 'myvol2', 'serial_number': '2ee4231f34e21d4b6c9ce900966ee6fe', 'size': 2048, 'snap_limit': 9223372036854775807, 'snap_limit_percent': -1, 'snap_reserve': 0, 'snap_usage_compressed_bytes': 0, 'snap_usage_populated_bytes': 0, 'snap_usage_uncompressed_bytes': 0, 'snap_warn_level': 0, 'space_usage_level': 'normal', 'srep_last_sync': 0, 'srep_resync_percent': 0, 'target_name': 'iqn.2007-11.com.nimblestorage:nva-test-grp-g49686580b78e0b16', 'thinly_provisioned': True, 'total_usage_bytes': 0, 'upstream_cache_pinned': False, 'usage_valid': True, 'vol_state': 'online', 'vol_usage_compressed_bytes': 0, 'vol_usage_mapped_bytes': 0, 'vol_usage_uncompressed_bytes': 0, 'volcoll_id': '', 'volcoll_name': '', 'vpd_ieee0': '2ee4231f34e21d4b', 'vpd_ieee1': '6c9ce900966ee6fe', 'vpd_t10': 'Nimble 2ee4231f34e21d4b6c9ce900966ee6fe', 'warn_level': 0} Assign a volume to an object \u00b6 >>> vol = api.volumes.get(name='myvol1') <Volume(id=0601a32bf8f45646a500000000000000000000070d, name=vol-3)> Access object attributes \u00b6 >>> vol = api.volumes.get(name='myvol2') >>> pprint.pprint(vol.attrs['metadata']) [{'key': 'mykey2', 'value': 'myval2'}, {'key': 'mykey1', 'value': 'myval1'}] Update volume attributes \u00b6 >>> vol.update(id=vol.attrs['id'], description='My new cool description') >>> vol.reload() >>> pprint.pprint(vol.attrs['description']) 'My new cool description' Access object methods \u00b6 >>> vol.offline() { 'offline_reason': 'user', 'online': False } # Full object representation omitted >>> vol.delete() {} Pagination \u00b6 The list operation of an API resource comes with limit and from_id attributes that provide means to paginate objects and perform operations in batches. The below example uses the volumes resource to paginate volume objects. >>> pprint.pprint(api.volumes.list(limit=3)) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>, <Volume(id=0649686580b78e0b16000000000000000000000005, name=myvol2)>, <Volume(id=0649686580b78e0b16000000000000000000000006, name=myvol3)>] >>> >>> pprint.pprint(api.volumes.list(limit=3, from_id='0649686580b78e0b16000000000000000000000006')) [<Volume(id=0649686580b78e0b16000000000000000000000007, name=myvol4)>, <Volume(id=0649686580b78e0b16000000000000000000000008, name=myvol5)>, <Volume(id=0649686580b78e0b16000000000000000000000009, name=myvol6)>] >>> >>> pprint.pprint(api.volumes.list(limit=3, from_id='0649686580b78e0b16000000000000000000000009')) [<Volume(id=0649686580b78e0b1600000000000000000000000a, name=myvol7)>] >>> Field filters \u00b6 Most of the time a developer have a vague idea of what he's looking for and what attributes are of interest. Using field filters one way to satisfy the need and optimize the payload. List only resources with a certain name \u00b6 >>> pprint.pprint(api.volumes.list(name='myvol1')) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>] Expand object with limited resource attributes \u00b6 >>> pprint.pprint(api.volumes.list(name='myvol1', detail=True, fields='name,id,size,online,clone')[0].attrs) {'clone': False, 'id': '0649686580b78e0b16000000000000000000000004', 'name': 'myvol1', 'online': True, 'size': 1024} Using Fields \u00b6 Each API resource comes with \"Fields\" class which allow complex querying of the resource. The class naming convention is the resource name in singular without underscores in camelcase. Example: volumes -> VolumeFields volume_collections - VolumeCollectionFields protection_templates - ProtectionTemplateFields Note The volume named \"myvol2\" in previous steps that was deleted has to be recreated for the next set of examples to make sense. Search for a volume wildcard \u00b6 >>> from nimbleclient import * >>> from nimbleclient.v1 import VolumeFields >>> pprint.pprint(api.volumes.list(filter=and_(VolumeFields.name.contains('vol')))) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>, <Volume(id=0649686580b78e0b16000000000000000000000006, name=myvol2)>] Combining multiple Fields \u00b6 >>> myfilter = and_( ... VolumeFields.name.contains('vol'), ... VolumeFields.metadata('mykey1') == 'myval1' ... ) >>> pprint.pprint(api.volumes.list(detail=True, filter=myfilter, fields='id,name,size,metadata')) [<Volume(id=0649686580b78e0b16000000000000000000000006, name=myvol2)>] >>> pprint.pprint(api.volumes.list(detail=True, filter=myfilter, fields='name,size,metadata' ... )[0].attrs) {'metadata': [{'key': 'mykey2', 'value': 'myval2'}, {'key': 'mykey1', 'value': 'myval1'}], 'name': 'myvol2', 'size': 2048} Complex Fields with AND and OR operators \u00b6 >>> myfilter = and_( ... VolumeFields.name.contains('vol'), ... VolumeFields.online == 'true', ... or_( ... VolumeFields.protection_type == 'unprotected', ... and_( ... VolumeFields.size <= '4096', ... VolumeFields.encryption_cipher == None, ... ) ... ) ... ) >>> pprint.pprint(api.volumes.list(detail=True, filter=myfilter, fields='id,name,size,metadata')) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>, <Volume(id=0649686580b78e0b16000000000000000000000006, name=myvol2)>]","title":"Using"},{"location":"get_started/using/index.html#using_the_sdk","text":"Refer to the API reference for indivual resource manipulations. This introduction illustrate how to use the SDK and the more advanced features. HPE Nimble Storage specific workflows can be found in the example workflows section. Using the SDK Using python interactively Manipulating resources Create a volume Create a volume with custom metadata List volumes Fetch volume attributes Assign a volume to an object Access object attributes Update volume attributes Access object methods Pagination Field filters List only resources with a certain name Expand object with limited resource attributes Using Fields Search for a volume wildcard Combining multiple Fields Complex Fields with AND and OR operators","title":"Using the SDK"},{"location":"get_started/using/index.html#using_python_interactively","text":"From scratch on a python prompt. $ python Python 3.7.7 (default, Mar 10 2020, 15:43:03) [Clang 11.0.0 (clang-1100.0.33.17)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from nimbleclient import NimOSClient >>> import pprint >>> api = NimOSClient('192.168.1.128', 'admin', 'admin') >>> Note All the examples below uses pprint for formatting purposes only.","title":"Using python interactively"},{"location":"get_started/using/index.html#manipulating_resources","text":"Simple interactions with the volumes endpoint. Refer to the volumes API reference for more details.","title":"Manipulating resources"},{"location":"get_started/using/index.html#create_a_volume","text":">>> api.volumes.create('myvol1', size=1024, description='My first volume') <Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>","title":"Create a volume"},{"location":"get_started/using/index.html#create_a_volume_with_custom_metadata","text":">>> meta_data = {'mykey1': 'myval1', 'mykey2': 'myval2'} >>> api.volumes.create('myvol2', size=2048, description='My second volume', metadata=meta_data) <Volume(id=0649686580b78e0b16000000000000000000000005, name=myvol2)>","title":"Create a volume with custom metadata"},{"location":"get_started/using/index.html#list_volumes","text":">>> pprint.pprint(api.volumes.list()) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>, <Volume(id=0649686580b78e0b16000000000000000000000005, name=myvol2)>]","title":"List volumes"},{"location":"get_started/using/index.html#fetch_volume_attributes","text":">>> pprint.pprint(api.volumes.get('0649686580b78e0b16000000000000000000000005').attrs) {'access_control_records': None, 'agent_type': 'none', 'app_category': 'Other', 'app_uuid': '', 'avg_stats_last_5mins': {'combined_iops': 0, 'combined_latency': 0, 'combined_throughput': 0, 'read_iops': 0, 'read_latency': 0, 'read_throughput': 0, 'write_iops': 0, 'write_latency': 0, 'write_throughput': 0}, 'base_snap_id': '', 'base_snap_name': '', 'block_size': 4096, 'cache_needed_for_pin': 2147483648, 'cache_pinned': False, 'cache_policy': 'normal', 'caching_enabled': True, 'cksum_last_verified': 0, 'clone': False, 'content_repl_errors_found': False, 'creation_time': 1573161873, 'dedupe_enabled': False, 'description': 'My second volume', 'dest_pool_id': '', 'dest_pool_name': '', 'encryption_cipher': 'none', 'fc_sessions': None, 'folder_id': '', 'folder_name': '', 'full_name': 'default:/myvol2', 'id': '0649686580b78e0b16000000000000000000000005', 'iscsi_sessions': None, 'iscsi_target_scope': 'group', 'last_content_snap_br_cg_uid': 0, 'last_content_snap_br_gid': 0, 'last_content_snap_id': 0, 'last_modified': 1573161873, 'last_replicated_snap': None, 'last_snap': None, 'limit': 100, 'limit_iops': -1, 'limit_mbps': -1, 'metadata': [{'key': 'mykey2', 'value': 'myval2'}, {'key': 'mykey1', 'value': 'myval1'}], 'move_aborting': False, 'move_bytes_migrated': 0, 'move_bytes_remaining': 0, 'move_est_compl_time': 0, 'move_start_time': 0, 'multi_initiator': False, 'name': 'myvol2', 'needs_content_repl': False, 'num_connections': 0, 'num_fc_connections': 0, 'num_iscsi_connections': 0, 'num_snaps': 0, 'offline_reason': None, 'online': True, 'online_snaps': None, 'owned_by_group': 'nva-test-grp', 'owned_by_group_id': '0049686580b78e0b16000000000000000000000001', 'parent_vol_id': '', 'parent_vol_name': '', 'perfpolicy_id': '0349686580b78e0b16000000000000000000000001', 'perfpolicy_name': 'default', 'pinned_cache_size': 0, 'pool_id': '0a49686580b78e0b16000000000000000000000001', 'pool_name': 'default', 'previously_deduped': False, 'projected_num_snaps': 0, 'protection_type': 'unprotected', 'read_only': False, 'replication_role': 'no_replication', 'reserve': 0, 'search_name': 'myvol2', 'serial_number': '2ee4231f34e21d4b6c9ce900966ee6fe', 'size': 2048, 'snap_limit': 9223372036854775807, 'snap_limit_percent': -1, 'snap_reserve': 0, 'snap_usage_compressed_bytes': 0, 'snap_usage_populated_bytes': 0, 'snap_usage_uncompressed_bytes': 0, 'snap_warn_level': 0, 'space_usage_level': 'normal', 'srep_last_sync': 0, 'srep_resync_percent': 0, 'target_name': 'iqn.2007-11.com.nimblestorage:nva-test-grp-g49686580b78e0b16', 'thinly_provisioned': True, 'total_usage_bytes': 0, 'upstream_cache_pinned': False, 'usage_valid': True, 'vol_state': 'online', 'vol_usage_compressed_bytes': 0, 'vol_usage_mapped_bytes': 0, 'vol_usage_uncompressed_bytes': 0, 'volcoll_id': '', 'volcoll_name': '', 'vpd_ieee0': '2ee4231f34e21d4b', 'vpd_ieee1': '6c9ce900966ee6fe', 'vpd_t10': 'Nimble 2ee4231f34e21d4b6c9ce900966ee6fe', 'warn_level': 0}","title":"Fetch volume attributes"},{"location":"get_started/using/index.html#assign_a_volume_to_an_object","text":">>> vol = api.volumes.get(name='myvol1') <Volume(id=0601a32bf8f45646a500000000000000000000070d, name=vol-3)>","title":"Assign a volume to an object"},{"location":"get_started/using/index.html#access_object_attributes","text":">>> vol = api.volumes.get(name='myvol2') >>> pprint.pprint(vol.attrs['metadata']) [{'key': 'mykey2', 'value': 'myval2'}, {'key': 'mykey1', 'value': 'myval1'}]","title":"Access object attributes"},{"location":"get_started/using/index.html#update_volume_attributes","text":">>> vol.update(id=vol.attrs['id'], description='My new cool description') >>> vol.reload() >>> pprint.pprint(vol.attrs['description']) 'My new cool description'","title":"Update volume attributes"},{"location":"get_started/using/index.html#access_object_methods","text":">>> vol.offline() { 'offline_reason': 'user', 'online': False } # Full object representation omitted >>> vol.delete() {}","title":"Access object methods"},{"location":"get_started/using/index.html#pagination","text":"The list operation of an API resource comes with limit and from_id attributes that provide means to paginate objects and perform operations in batches. The below example uses the volumes resource to paginate volume objects. >>> pprint.pprint(api.volumes.list(limit=3)) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>, <Volume(id=0649686580b78e0b16000000000000000000000005, name=myvol2)>, <Volume(id=0649686580b78e0b16000000000000000000000006, name=myvol3)>] >>> >>> pprint.pprint(api.volumes.list(limit=3, from_id='0649686580b78e0b16000000000000000000000006')) [<Volume(id=0649686580b78e0b16000000000000000000000007, name=myvol4)>, <Volume(id=0649686580b78e0b16000000000000000000000008, name=myvol5)>, <Volume(id=0649686580b78e0b16000000000000000000000009, name=myvol6)>] >>> >>> pprint.pprint(api.volumes.list(limit=3, from_id='0649686580b78e0b16000000000000000000000009')) [<Volume(id=0649686580b78e0b1600000000000000000000000a, name=myvol7)>] >>>","title":"Pagination"},{"location":"get_started/using/index.html#field_filters","text":"Most of the time a developer have a vague idea of what he's looking for and what attributes are of interest. Using field filters one way to satisfy the need and optimize the payload.","title":"Field filters"},{"location":"get_started/using/index.html#list_only_resources_with_a_certain_name","text":">>> pprint.pprint(api.volumes.list(name='myvol1')) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>]","title":"List only resources with a certain name"},{"location":"get_started/using/index.html#expand_object_with_limited_resource_attributes","text":">>> pprint.pprint(api.volumes.list(name='myvol1', detail=True, fields='name,id,size,online,clone')[0].attrs) {'clone': False, 'id': '0649686580b78e0b16000000000000000000000004', 'name': 'myvol1', 'online': True, 'size': 1024}","title":"Expand object with limited resource attributes"},{"location":"get_started/using/index.html#using_fields","text":"Each API resource comes with \"Fields\" class which allow complex querying of the resource. The class naming convention is the resource name in singular without underscores in camelcase. Example: volumes -> VolumeFields volume_collections - VolumeCollectionFields protection_templates - ProtectionTemplateFields Note The volume named \"myvol2\" in previous steps that was deleted has to be recreated for the next set of examples to make sense.","title":"Using Fields"},{"location":"get_started/using/index.html#search_for_a_volume_wildcard","text":">>> from nimbleclient import * >>> from nimbleclient.v1 import VolumeFields >>> pprint.pprint(api.volumes.list(filter=and_(VolumeFields.name.contains('vol')))) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>, <Volume(id=0649686580b78e0b16000000000000000000000006, name=myvol2)>]","title":"Search for a volume wildcard"},{"location":"get_started/using/index.html#combining_multiple_fields","text":">>> myfilter = and_( ... VolumeFields.name.contains('vol'), ... VolumeFields.metadata('mykey1') == 'myval1' ... ) >>> pprint.pprint(api.volumes.list(detail=True, filter=myfilter, fields='id,name,size,metadata')) [<Volume(id=0649686580b78e0b16000000000000000000000006, name=myvol2)>] >>> pprint.pprint(api.volumes.list(detail=True, filter=myfilter, fields='name,size,metadata' ... )[0].attrs) {'metadata': [{'key': 'mykey2', 'value': 'myval2'}, {'key': 'mykey1', 'value': 'myval1'}], 'name': 'myvol2', 'size': 2048}","title":"Combining multiple Fields"},{"location":"get_started/using/index.html#complex_fields_with_and_and_or_operators","text":">>> myfilter = and_( ... VolumeFields.name.contains('vol'), ... VolumeFields.online == 'true', ... or_( ... VolumeFields.protection_type == 'unprotected', ... and_( ... VolumeFields.size <= '4096', ... VolumeFields.encryption_cipher == None, ... ) ... ) ... ) >>> pprint.pprint(api.volumes.list(detail=True, filter=myfilter, fields='id,name,size,metadata')) [<Volume(id=0649686580b78e0b16000000000000000000000004, name=myvol1)>, <Volume(id=0649686580b78e0b16000000000000000000000006, name=myvol2)>]","title":"Complex Fields with AND and OR operators"},{"location":"legal/contributing/index.html","text":"Contribution Guide \u00b6 We welcome and encourage community contributions to nimble-python-sdk Contributing \u00b6 The best way to directly collaborate with the project contributors is through the hpe-storage/nimble-python-sdk repo on GitHub. If you want to contribute to our code by either fixing a problem or creating a new feature, please open a GitHub pull request. If you want to raise an issue such as a defect, an enhancement request or a general issue, please open a GitHub issue. Before you start to code, we recommend discussing your plans through a GitHub issue, especially for more ambitious contributions. This gives other contributors a chance to point you in the right direction, give you feedback on your design, and help you find out if someone else is working on the same thing. Note that all patches from all contributors get reviewed. After a pull request is made, other contributors will offer feedback. If the patch passes review, a maintainer will accept it with a comment. When a pull request fails review, the author is expected to update the pull request to address the issue until it passes review and the pull request merges successfully. At least one review from a maintainer is required for all patches. Developer's Certificate of Origin \u00b6 All contributions must include acceptance of the DCO: Developer Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 660 York Street, Suite 102, San Francisco, CA 94110 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved. Sign your work \u00b6 To accept the DCO, simply add this line to each commit message with your name and email address (git commit -s will do this for you): Signed-off-by: Jane Example <jane@example.com> For legal reasons, no anonymous or pseudonymous contributions are accepted. Submitting Code Pull Requests \u00b6 We encourage and support contributions from the community. No fix is too small. We strive to process all pull requests as soon as possible and with constructive feedback. If your pull request is not accepted at first, please try again after addressing the feedback you received. To make a pull request you will need a GitHub account. For help, see GitHub's documentation on forking and pull requests.","title":"Contributing"},{"location":"legal/contributing/index.html#contribution_guide","text":"We welcome and encourage community contributions to nimble-python-sdk","title":"Contribution Guide"},{"location":"legal/contributing/index.html#contributing","text":"The best way to directly collaborate with the project contributors is through the hpe-storage/nimble-python-sdk repo on GitHub. If you want to contribute to our code by either fixing a problem or creating a new feature, please open a GitHub pull request. If you want to raise an issue such as a defect, an enhancement request or a general issue, please open a GitHub issue. Before you start to code, we recommend discussing your plans through a GitHub issue, especially for more ambitious contributions. This gives other contributors a chance to point you in the right direction, give you feedback on your design, and help you find out if someone else is working on the same thing. Note that all patches from all contributors get reviewed. After a pull request is made, other contributors will offer feedback. If the patch passes review, a maintainer will accept it with a comment. When a pull request fails review, the author is expected to update the pull request to address the issue until it passes review and the pull request merges successfully. At least one review from a maintainer is required for all patches.","title":"Contributing"},{"location":"legal/contributing/index.html#developers_certificate_of_origin","text":"All contributions must include acceptance of the DCO: Developer Certificate of Origin Version 1.1 Copyright (C) 2004, 2006 The Linux Foundation and its contributors. 660 York Street, Suite 102, San Francisco, CA 94110 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Developer's Certificate of Origin 1.1 By making a contribution to this project, I certify that: (a) The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or (b) The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or (c) The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it. (d) I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.","title":"Developer's Certificate of Origin"},{"location":"legal/contributing/index.html#sign_your_work","text":"To accept the DCO, simply add this line to each commit message with your name and email address (git commit -s will do this for you): Signed-off-by: Jane Example <jane@example.com> For legal reasons, no anonymous or pseudonymous contributions are accepted.","title":"Sign your work"},{"location":"legal/contributing/index.html#submitting_code_pull_requests","text":"We encourage and support contributions from the community. No fix is too small. We strive to process all pull requests as soon as possible and with constructive feedback. If your pull request is not accepted at first, please try again after addressing the feedback you received. To make a pull request you will need a GitHub account. For help, see GitHub's documentation on forking and pull requests.","title":"Submitting Code Pull Requests"},{"location":"legal/license/index.html","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"legal/support/index.html","text":"Support \u00b6 HPE Nimble Storage SDK for Python is supported by HPE when used with HPE Nimble Storage arrays on valid support contracts. Please send an email to support@nimblestorage.com to get started with any issue you might need assistance with. Engage with your HPE representative for other means on how to get in touch with Nimble support directly.","title":"Support"},{"location":"legal/support/index.html#support","text":"HPE Nimble Storage SDK for Python is supported by HPE when used with HPE Nimble Storage arrays on valid support contracts. Please send an email to support@nimblestorage.com to get started with any issue you might need assistance with. Engage with your HPE representative for other means on how to get in touch with Nimble support directly.","title":"Support"}]}